{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-arknights/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/hexo-theme-arknights/source/CNAME","path":"CNAME","modified":0,"renderable":1},{"_id":"themes/hexo-theme-arknights/source/README.md","path":"README.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-arknights/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/hexo-theme-arknights/source/font/BenderLight.ttf","path":"font/BenderLight.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-arknights/source/font/JetBrainsMono-Regular.woff2","path":"font/JetBrainsMono-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-arknights/source/css/arknights.css","path":"css/arknights.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-arknights/source/css/arknights.sass","path":"css/arknights.sass","modified":0,"renderable":1},{"_id":"themes/hexo-theme-arknights/source/css/caogao.txt","path":"css/caogao.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-arknights/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-arknights/source/js/arknights.ts","path":"js/arknights.ts","modified":0,"renderable":1},{"_id":"themes/hexo-theme-arknights/source/js/arknights.js","path":"js/arknights.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-arknights/source/js/gitalk.js","path":"js/gitalk.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-arknights/source/js/tsconfig.json","path":"js/tsconfig.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-arknights/source/img/Alipay.png","path":"img/Alipay.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-arknights/source/img/WeChat.png","path":"img/WeChat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-arknights/source/img/bg.jpg","path":"img/bg.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-arknights/source/img/bk.jpg","path":"img/bk.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-arknights/source/img/logo.png","path":"img/logo.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/About-CTF.md","hash":"d39e97ba8a247dfa177c9161819a64a7e03a3ee5","modified":1639895773321},{"_id":"source/_posts/HelloWorld.md","hash":"bb9f89b2312e180aee5377340b7f3497ebf97a58","modified":1639895773322},{"_id":"source/_posts/PHPの小笔记.md","hash":"96eb63835cfd4b4ceeb8f22c8f51da9068a0baa7","modified":1639895773322},{"_id":"source/_posts/bit-operation.md","hash":"821ef76d9e9341f7415db5bcec143c662ba8094b","modified":1639895773323},{"_id":"source/_posts/基本控制结构.md","hash":"ac2fc5b0ff5916ad23dc4212f7683bf0b5dd69cd","modified":1639895773323},{"_id":"source/_posts/快速幂.md","hash":"c11dc6893b54c71e7418cfed7015e41d76ab009d","modified":1639895773324},{"_id":"source/_posts/浅谈浮点.md","hash":"6e2d38e8a8e402bd86a36552deba119026ae40da","modified":1639895773325},{"_id":"source/_posts/河南省宗教知识竞赛刷分思路＆脚本合集.md","hash":"0e3c89b106e878eeedb61775c110b436bcb0387d","modified":1639895773324},{"_id":"source/about/index.md","hash":"4db2a5c6b2f3e6c0fa2a67caabffe3016195bd72","modified":1639895773326},{"_id":"source/_posts/腾讯云函数环境配置指南.md","hash":"07668c28c1e8a036923836a17867b3403d0b3dd1","modified":1639895773325},{"_id":"source/tag/index.md","hash":"9b44e622b39d27b2a4645def7eb4131d40af076c","modified":1639895773328},{"_id":"source/categories/index.md","hash":"77b4c30e024c90ab6d43d7e07084bdbb13e53074","modified":1639895773327},{"_id":"source/links/index.md","hash":"0d8718b45a6a29f478e67c05e3efa17ffbae4a9a","modified":1639895773328},{"_id":"themes/hexo-theme-arknights/.editorconfig","hash":"57f50fc69fdc98a28c9bb04c338865a8b267b4bc","modified":1639896837426},{"_id":"themes/hexo-theme-arknights/.gitignore","hash":"213618a702e4a2029e93c53f893d973a57bc593f","modified":1639896837427},{"_id":"themes/hexo-theme-arknights/LICENSE","hash":"438ccc3597948b7577b003ccff330f40f8e9987b","modified":1639896837427},{"_id":"themes/hexo-theme-arknights/README-Ja.md","hash":"b37eb50aec1694e54c5d4f44c0b9a19dba4452c3","modified":1639896837429},{"_id":"themes/hexo-theme-arknights/README.md","hash":"1d295181e7b11e9e77dae2255925038911a6258c","modified":1639896837429},{"_id":"themes/hexo-theme-arknights/_config.yml","hash":"f0dac8300f7ed88d3e2f0018c1b048aa52718dce","modified":1639902107815},{"_id":"themes/hexo-theme-arknights/package.json","hash":"a9be5617e8a411ac6adb95ea51a4d48e977d12dd","modified":1639896837436},{"_id":"themes/hexo-theme-arknights/layout/archive.pug","hash":"e2fb5b8eeb1781b49b2c434249bf54760e44a39a","modified":1639896837432},{"_id":"themes/hexo-theme-arknights/layout/category.pug","hash":"66a81ae0c3a89a150a0813ae0a7d6f7defb3cba8","modified":1639896837432},{"_id":"themes/hexo-theme-arknights/source/404.html","hash":"526399fe5be55ed75ae9fea90e7b2e38658fc55a","modified":1639896837437},{"_id":"themes/hexo-theme-arknights/layout/index.pug","hash":"56b7ed9b68646c865797fa17319fc2a48c3a1350","modified":1639896837434},{"_id":"themes/hexo-theme-arknights/layout/page.pug","hash":"6777ef19665cc9b7d974ad26fc7e392980cd8c85","modified":1639896837435},{"_id":"themes/hexo-theme-arknights/layout/post.pug","hash":"1c71e65f9c086b7b0804c1fba04bfeeaf8b7fb99","modified":1639896837435},{"_id":"themes/hexo-theme-arknights/layout/tag.pug","hash":"4c9229e669e395afaac4829b95cd2a7399a0e49f","modified":1639896837436},{"_id":"themes/hexo-theme-arknights/source/CNAME","hash":"bdbbd81fa4b69a523c7ac18567a8f68978babcf9","modified":1639896837437},{"_id":"themes/hexo-theme-arknights/source/README.md","hash":"b16955f9769cf1a2a8dd06137939a0ab61db379c","modified":1639896837438},{"_id":"themes/hexo-theme-arknights/source/favicon.ico","hash":"10adaea9ed613e955bf761962db4af2931cf97ee","modified":1639896837446},{"_id":"themes/hexo-theme-arknights/layout/includes/recent-posts.pug","hash":"c26a4212fc729f988286bca9298159be69f8dcb4","modified":1639896837434},{"_id":"themes/hexo-theme-arknights/layout/includes/layout.pug","hash":"25e38f773b132d718a61b6d7bca95522d1ac355f","modified":1639896837433},{"_id":"themes/hexo-theme-arknights/source/font/JetBrainsMono-Regular.woff2","hash":"23f70e45de896a9e12798db1d1f1ce5197f33ca4","modified":1639896837448},{"_id":"themes/hexo-theme-arknights/source/css/arknights.css","hash":"e1bb85094420323dc054506f670852eecfdd7ab3","modified":1639896837439},{"_id":"themes/hexo-theme-arknights/source/css/arknights.sass","hash":"2c81c418c656c214f5f60a351a6685cb7d377965","modified":1639896837439},{"_id":"themes/hexo-theme-arknights/source/css/caogao.txt","hash":"f2e3aeb7c5f7cefc07fcd6e749538134dbee7fa9","modified":1639896837440},{"_id":"themes/hexo-theme-arknights/source/css/gitalk.css","hash":"2a069472b096be272f11a287ae5f46c129ce9589","modified":1639896837440},{"_id":"themes/hexo-theme-arknights/source/js/arknights.ts","hash":"67ecc1ab54c12cbda944dc03375dd0a479d19733","modified":1639896837457},{"_id":"themes/hexo-theme-arknights/source/js/arknights.js","hash":"9346e9b55daa2797b36b55bf9cf9dc60ef82a4e8","modified":1639896837457},{"_id":"themes/hexo-theme-arknights/source/js/tsconfig.json","hash":"47b83304a235040823ea0e0668debf73871456e4","modified":1639896837461},{"_id":"themes/hexo-theme-arknights/source/img/Alipay.png","hash":"529d851d55de77e40cedf39620e34be11e3fd710","modified":1639896837449},{"_id":"themes/hexo-theme-arknights/source/img/WeChat.png","hash":"46b03d7f8800e6b9c4bb47a37ab7afadd798706f","modified":1639896837450},{"_id":"themes/hexo-theme-arknights/source/img/bg.jpg","hash":"463cfbcfd68886be8564a532c38cb32d180edba4","modified":1639896837451},{"_id":"themes/hexo-theme-arknights/source/img/logo.png","hash":"50cb3653f6406b4e936aa0ba21dc573928016a94","modified":1639896837456},{"_id":"themes/hexo-theme-arknights/source/css/sass/_base_style.sass","hash":"6b74ca2868e4f2834c41383df67d54ed00b38c60","modified":1639896837441},{"_id":"themes/hexo-theme-arknights/source/css/sass/_class_style.sass","hash":"01548747fd90aec49312d3d600e4dbb4a244e829","modified":1639896837442},{"_id":"themes/hexo-theme-arknights/source/css/sass/_flex_layout.sass","hash":"711058172f4858697c8dfd51187db3615fe8e8c6","modified":1639896837442},{"_id":"themes/hexo-theme-arknights/source/css/sass/_font.sass","hash":"34af1a0ada35d1c68c419156a17d33d084fca3d4","modified":1639896837443},{"_id":"themes/hexo-theme-arknights/source/css/sass/layout/__main.sass","hash":"63e1b2f117fcc27e74f42393495ab9ce1c4979d7","modified":1639896837444},{"_id":"themes/hexo-theme-arknights/source/css/sass/layout/__main_article.sass","hash":"ca03587bed7989711b6d2a15fbad5c394403a258","modified":1639896837444},{"_id":"themes/hexo-theme-arknights/source/css/sass/layout/__main_aside.sass","hash":"fba1a9257757e6b5acbca79177a15aad34e8708e","modified":1639896837445},{"_id":"themes/hexo-theme-arknights/source/css/sass/layout/_archive.sass","hash":"bb65b614808b843bb34ac10279443f1d5417d3b7","modified":1639896837445},{"_id":"themes/hexo-theme-arknights/source/css/sass/layout/_post.sass","hash":"085a802078b22edd5c271d4794c5851efa4e653e","modified":1639896837446},{"_id":"themes/hexo-theme-arknights/support.jpg","hash":"9ca7c5e40123bc51da82f3a01d13c32ab2b5edc3","modified":1639896837462},{"_id":"themes/hexo-theme-arknights/source/font/BenderLight.ttf","hash":"5b500dbf6f2b95adff8861c76692562d70ca7b14","modified":1639896837448},{"_id":"themes/hexo-theme-arknights/demo.png","hash":"381cacd14c50017155067930b33ece892c27cd32","modified":1639896837431},{"_id":"themes/hexo-theme-arknights/source/js/gitalk.js","hash":"aef1ac4b42ebefaafe34707b68386484aad7d325","modified":1639896837460},{"_id":"themes/hexo-theme-arknights/source/img/bk.jpg","hash":"2146714c7429ca673a38469e7f74a412dc0ef09e","modified":1639896837455}],"Category":[{"name":"CTF","_id":"ckxcz8rxy0004f8v0aiu70hd2"},{"name":"随手一记","_id":"ckxcz8ry3000bf8v06dqm5zgn"},{"name":"编程语言","_id":"ckxcz8ry5000gf8v0gktlavrx"},{"name":"腾讯云","_id":"ckxcz8ryh0014f8v0bmpa11of"}],"Data":[],"Page":[{"title":"about","date":"2021-11-20T13:15:09.000Z","_content":"#### 关于我\n探姬~\n这里是一名星际玩家\n要素比较多的混合体\n记得，叫姐姐（！！","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-11-20 21:15:09\n---\n#### 关于我\n探姬~\n这里是一名星际玩家\n要素比较多的混合体\n记得，叫姐姐（！！","updated":"2021-12-19T06:36:13.326Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckxcz8rxr0000f8v0f66kgnhe","content":"<h4 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h4><p>探姬~<br>这里是一名星际玩家<br>要素比较多的混合体<br>记得，叫姐姐（！！</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h4><p>探姬~<br>这里是一名星际玩家<br>要素比较多的混合体<br>记得，叫姐姐（！！</p>\n"},{"type":"tag","layout":"tag","_content":"","source":"tag/index.md","raw":"---\ntype: \"tag\"\nlayout: \"tag\"\n---\n","date":"2021-12-19T06:36:13.328Z","updated":"2021-12-19T06:36:13.328Z","path":"tag/index.html","title":"","comments":1,"_id":"ckxcz8rxw0002f8v0byida6ou","content":"","site":{"data":{}},"excerpt":"","more":""},{"type":"links","layout":"links","_content":"<div align=\"center\">\n    <table width=\"980\" height=\"35\" border=\"0\" align=\"center\">\n        <tr>\n            <td>\n                我的小项目：&nbsp;\n                <a target=\"_blank\" href=\"https://bbs.arktoolbox.jamsg.cn/\">泰拉数据中心</a>\n                &nbsp;|&nbsp;\n                <a target=\"_blank\" href=\"https://www.yuque.com/probius\">我的语雀</a>\n                &nbsp;|&nbsp;\n                <a target=\"_blank\" href=\"https://www.yuque.com/zzulic\">语雀C语言专题</a>\n                &nbsp;|&nbsp;\n            </td>\n        </tr>\n    </table>\n</div>\n<span></span>\n<div align=\"center\">\n    <table width=\"980\" height=\"35\" border=\"0\" align=\"center\">\n        <tr>\n            <td>\n                朋友们的博客:&nbsp;\n                <a target=\"_blank\" href=\"https://blog.emptydreams.xyz/\">空梦の博客</a>\n                &nbsp;|&nbsp;\n                <a target=\"_blank\" href=\"https://www.therehello.top/\">therhelloの博客</a>\n                &nbsp;|&nbsp;\n                <a target=\"_blank\" href=\"https://blog.csdn.net/lspdd\">狗蛋の博客</a>\n                &nbsp;|&nbsp;\n                <a target=\"_blank\" href=\"https://blog.zixutech.cn/\">紫旭の博客</a>\n                &nbsp;|&nbsp;\n                <a target=\"_blank\" href=\"https://coding.maylove.pub/\">Zkeqの博客</a>\n            </td>\n        </tr>\n    </table>\n</div>\n","source":"links/index.md","raw":"---\ntype: \"links\"\nlayout: \"links\"\n---\n<div align=\"center\">\n    <table width=\"980\" height=\"35\" border=\"0\" align=\"center\">\n        <tr>\n            <td>\n                我的小项目：&nbsp;\n                <a target=\"_blank\" href=\"https://bbs.arktoolbox.jamsg.cn/\">泰拉数据中心</a>\n                &nbsp;|&nbsp;\n                <a target=\"_blank\" href=\"https://www.yuque.com/probius\">我的语雀</a>\n                &nbsp;|&nbsp;\n                <a target=\"_blank\" href=\"https://www.yuque.com/zzulic\">语雀C语言专题</a>\n                &nbsp;|&nbsp;\n            </td>\n        </tr>\n    </table>\n</div>\n<span></span>\n<div align=\"center\">\n    <table width=\"980\" height=\"35\" border=\"0\" align=\"center\">\n        <tr>\n            <td>\n                朋友们的博客:&nbsp;\n                <a target=\"_blank\" href=\"https://blog.emptydreams.xyz/\">空梦の博客</a>\n                &nbsp;|&nbsp;\n                <a target=\"_blank\" href=\"https://www.therehello.top/\">therhelloの博客</a>\n                &nbsp;|&nbsp;\n                <a target=\"_blank\" href=\"https://blog.csdn.net/lspdd\">狗蛋の博客</a>\n                &nbsp;|&nbsp;\n                <a target=\"_blank\" href=\"https://blog.zixutech.cn/\">紫旭の博客</a>\n                &nbsp;|&nbsp;\n                <a target=\"_blank\" href=\"https://coding.maylove.pub/\">Zkeqの博客</a>\n            </td>\n        </tr>\n    </table>\n</div>\n","date":"2021-12-19T06:36:13.328Z","updated":"2021-12-19T06:36:13.328Z","path":"links/index.html","title":"","comments":1,"_id":"ckxcz8ry00006f8v09jigcuaq","content":"<div align=\"center\">\n    <table width=\"980\" height=\"35\" border=\"0\" align=\"center\">\n        <tr>\n            <td>\n                我的小项目：&nbsp;\n                <a target=\"_blank\" href=\"https://bbs.arktoolbox.jamsg.cn/\">泰拉数据中心</a>\n                &nbsp;|&nbsp;\n                <a target=\"_blank\" href=\"https://www.yuque.com/probius\">我的语雀</a>\n                &nbsp;|&nbsp;\n                <a target=\"_blank\" href=\"https://www.yuque.com/zzulic\">语雀C语言专题</a>\n                &nbsp;|&nbsp;\n            </td>\n        </tr>\n    </table>\n</div>\n<span></span>\n<div align=\"center\">\n    <table width=\"980\" height=\"35\" border=\"0\" align=\"center\">\n        <tr>\n            <td>\n                朋友们的博客:&nbsp;\n                <a target=\"_blank\" href=\"https://blog.emptydreams.xyz/\">空梦の博客</a>\n                &nbsp;|&nbsp;\n                <a target=\"_blank\" href=\"https://www.therehello.top/\">therhelloの博客</a>\n                &nbsp;|&nbsp;\n                <a target=\"_blank\" href=\"https://blog.csdn.net/lspdd\">狗蛋の博客</a>\n                &nbsp;|&nbsp;\n                <a target=\"_blank\" href=\"https://blog.zixutech.cn/\">紫旭の博客</a>\n                &nbsp;|&nbsp;\n                <a target=\"_blank\" href=\"https://coding.maylove.pub/\">Zkeqの博客</a>\n            </td>\n        </tr>\n    </table>\n</div>\n","site":{"data":{}},"excerpt":"","more":"<div align=\"center\">\n    <table width=\"980\" height=\"35\" border=\"0\" align=\"center\">\n        <tr>\n            <td>\n                我的小项目：&nbsp;\n                <a target=\"_blank\" href=\"https://bbs.arktoolbox.jamsg.cn/\">泰拉数据中心</a>\n                &nbsp;|&nbsp;\n                <a target=\"_blank\" href=\"https://www.yuque.com/probius\">我的语雀</a>\n                &nbsp;|&nbsp;\n                <a target=\"_blank\" href=\"https://www.yuque.com/zzulic\">语雀C语言专题</a>\n                &nbsp;|&nbsp;\n            </td>\n        </tr>\n    </table>\n</div>\n<span></span>\n<div align=\"center\">\n    <table width=\"980\" height=\"35\" border=\"0\" align=\"center\">\n        <tr>\n            <td>\n                朋友们的博客:&nbsp;\n                <a target=\"_blank\" href=\"https://blog.emptydreams.xyz/\">空梦の博客</a>\n                &nbsp;|&nbsp;\n                <a target=\"_blank\" href=\"https://www.therehello.top/\">therhelloの博客</a>\n                &nbsp;|&nbsp;\n                <a target=\"_blank\" href=\"https://blog.csdn.net/lspdd\">狗蛋の博客</a>\n                &nbsp;|&nbsp;\n                <a target=\"_blank\" href=\"https://blog.zixutech.cn/\">紫旭の博客</a>\n                &nbsp;|&nbsp;\n                <a target=\"_blank\" href=\"https://coding.maylove.pub/\">Zkeqの博客</a>\n            </td>\n        </tr>\n    </table>\n</div>\n"},{"type":"category","layout":"category","_content":"","source":"categories/index.md","raw":"---\ntype: \"category\"\nlayout: \"category\"\n---\n","date":"2021-12-19T06:36:13.327Z","updated":"2021-12-19T06:36:13.327Z","path":"categories/index.html","title":"","comments":1,"_id":"ckxcz8ry10008f8v0824u70m7","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"About_CTF","date":"2021-11-19T18:09:46.000Z","_content":"## CTF的介绍\nCTF（**C**apture **T**he **F**lag，夺旗赛）CTF 的前身是传统黑客之间的网络技术比拼游戏，起源于 1996 年第四届 DEFCON，以代替之前黑客们通过互相发起真实攻击进行技术比拼的方式。 CTF是一种流行的信息安全竞赛形式，其英文名可直译为“夺得Flag”，也可意译为“夺旗赛”。\n其大致流程是，参赛团队之间通过进行攻防对抗、程序分析等形式，率先从主办方给出的比赛环境中得到一串具有一定格式的字符串或其他内容，并将其提交给主办方，从而夺得分数。为了方便称呼，我们把这样的内容称之为“Flag”。\n flag所表示的为目标服务器上存储的一些敏感机密的信息, 这些信息正常情况下是不能对外暴露的。选手利用目标的一些漏洞，获取到flag，其表示的即为在真实的黑客攻击中窃取到的机密信息。 \n一般情况下flag拥有固定格式为flag{xxxxx}，有些比赛会把flag关键词替换，例如CTFHub平台的flag为ctfhub{xxxxx}，利用固定格式来反推flag也是一种常见的解题思路 \n通常来说CTF是以团队为单位进行参赛。每个团队3-5人(具体根据主办方要求决定)，在整个比赛过程中既要每个选手拥有某个方向的漏洞挖掘能力，也要同队选手之间的相互配合。\n## 题目类型\n在CTF中主要包含以下5个大类的题目，有些比赛会根据自己的侧重点单独添加某个分类，例如移动设备(Mobile), 电子取证(Forensics)等，近年来也会出来混合类型的题目，例如在Web中存在一个二进制程序，需要选手先利用Web的漏洞获取到二进制程序，之后通过逆向或是Pwn等方式获得最终flag\n### Web\nWeb类题目大部分情况下和网、Web、HTTP等相关技能有关。主要考察选手对于Web攻防的一些知识技巧。诸如SQL注入、XSS、代码执行、代码审计等等都是很常见的考点。一般情况下Web题目只会给出一个能够访问的URL。部分题目会给出附件\n### Pwn\nPwn类题目重点考察选手对于二进制漏洞的挖掘和利用能力，其考点也通常在堆栈溢出、格式化漏洞、UAF、Double Free等常见二进制漏洞上。选手需要根据题目中给出的二进制可执行文件进行逆向分析，找出其中的漏洞并进行利用，编写对应的漏洞攻击脚本(Exploit)，进而对主办方给出的远程服务器进行攻击并获取flag通常来说Pwn类题目给出的远程服务器信息为nc IP_ADDRESS PORT，例如nc 1.2.3.4 4567这种形式，表示在1.2.3.4这个IP的4567端口上运行了该题目\n### Reverse\nRe类题目考察选手逆向工程能力。题目会给出一个可执行二进制文件，有些时候也可能是Android的APK安装包。选手需要逆向给出的程序，分析其程序工作原理。最终根据程序行为等获得flag\n### Crypto\nCrypto类题目考察选手对密码学相关知识的了解程度，诸如RSA、AES、DES等都是密码学题目的常客。有些时候也会给出一个加密脚本和密文，根据加密流程逆推出明文。\n### Misc\nMisc意为杂项，即不包含在以上分类的题目都会放到这个分类。题目会给出一个附件。选手下载该附件进行分析，最终得出flag\n常见的题型有图片隐写、视频隐写、文档隐写、流量分析、协议分析、游戏、IoT相关等等。五花八门，种类繁多。\n## 竞赛模式\n### 理论知识\n理论题多见于国内比赛，通常为选择题。包含单选及多选，选手需要根据自己所学的相关理论知识进行作答。最终得出分数。理论部分通常多见于初赛或是初赛之前的海选\n### Jeopardy-解题\n参赛队伍可以通过互联网或者现场网络参与，参数队伍通过与在线环境交互或文件离线分析，解决网络安全技术挑战获取相应分值，类似于 ACM 编程竞赛、信息学奥林匹克赛，根据总分和时间来进行排名。 不同的是这个解题模式一般会设置 一血(First Blood) 、 二血(Second Blood) 、 三血(Third Blood) ，也即最先完成的前三支队伍会获得额外分值，所以这不仅是对首先解出题目的队伍的分值鼓励，也是一种团队能力的间接体现。 当然还有一种流行的计分规则是设置每道题目的初始分数后，根据该题的成功解答队伍数，来逐渐降低该题的分值，也就是说如果解答这道题的人数越多，那么这道题的分值就越低。最后会下降到一个保底分值后便不再下降。一般称之为动态积分题目类型主要包含 Web 网络攻防 、 RE 逆向工程 、 Pwn 二进制漏洞利用 、 Crypto 密码攻击以及 Misc 安全杂项 这五个类别，个别比赛会根据题目类型进行扩展。\n### AwD-攻防模式\n**A**ttack **w**ith **D**efense(AwD)全称攻防模式，在攻防模式CTF赛制中，参赛队伍连接到同一个网络空间。主办方会预先为每个参赛队分配要防守的主机，该主机称之为GameBox，每个队伍之间的GameBox配置及漏洞是完全一致的，选手需要防护自己的GameBox不被攻击的同时挖掘漏洞并攻击对手服务来得分。在AwD中主办方会运行一个名为Checker的程序定时检测选手的GameBox的运行状态。若检测到状态不对则判定该GameBox宕机，按照规则扣除一定分数。攻防模式CTF赛制可以实时通过得分反映出比赛情况，最终也以得分直接分出胜负，是一种竞争激烈，具有很强观赏性和高度透明性的网络安全赛制。在这种赛制中，不仅仅是比参赛队员的智力和技术，也比体力（因为比赛一般都会持续24至48小时左右），同时也比团队之间的分工配合与合作。 AwD通常仅包含Web及Pwn两种类型的题目。每个队伍可能会分到多个GameBox，随着比赛的进行，最早的GameBox可能会下线，同时会上线新的GameBox。\n### RHG-自动化[ AI自动化]\n**R**obo **H**acking **G**ame(RHG)该利用人工智能或是AI或是自动化攻击程序来全自动的挖掘并利用漏洞，考验选手对于漏洞理解以及工程化能力。比赛开始前(一般为1-4周左右)主办方会给出测试环境以及相关接口文档。选手需要编写自动化程序来请求接口获取题目相关信息，该类程序通常称之为bot，在程序中全自动访问并挖掘目标漏洞，完成利用漏洞攻击并获取flag的过程。获取到的flag也由程序自动化提交。RHG因为是由bot全自动进行工作，所以比赛开始即可视为结束。剩下的一切全看参赛选手编写的自动化bot的工作情况。 比赛过程中不允许选手对bot进行任何的操作(包括debug/patch等等)。选手仅能看到自己的bot完成了哪些题。目前的得分情况等等。\n### RW-真实世界\n**R**eal **W**orld(RW) 首次于2018年长亭科技主办的RealWorldCTF中出现，该赛制着重考察选手在面对真实的环境下的漏洞挖掘与利用能力。通常RW模式出题也会围绕着能够应用于真实渗透攻击当中的漏洞，一般来说RW常见题型为VM/Docker逃逸、针对浏览器的攻击、针对IoT/Car等设备的攻击，Web类攻击等等 在RW赛制中会有一个Show Time，当选手认为自己已经可以完成题目时，选手可以在比赛平台上提交展示申请，由工作人员根据申请先后顺序进行展示排期。选手展示之前需要上台并连接相关网络，同时现场大屏会切换至目标的正常页面。选手确认连接并测试OK之后开始计时。一般情况下上台攻击的时间为5分钟，选手一旦完成攻击现场大屏幕会实时看到攻击的效果，此时裁判会根据效果是否符合题目要求来判定该题是否完成。如5在攻击时间内依然未能看到展示效果则认为本次攻击失败。现如今为了防止选手恶意排期。通常会有一个队伍总展示次数(例如在2019年数字经济云安全公测大赛中每个队伍只允许上台展示30次)，选手也需要尽可能保证上台之后攻击的成功率 举个例子。题目要求需要攻击位于比赛网络中的某个网站并将首页替换为包含队伍名称的页面。题目给出该网站的一些信息(源代码/数据库等等)，选手经过本地挖掘漏洞之后，提交展示申请，排期到了之后进行上台展示。注意，因为RW模式是以展示效果来作为题目是否完成的准则，所以在RW模式中并不存在Flag。\n### KoH-抢占山头\n**K**ing **o**f **H**ill(KoH)是近些年新衍生的一种赛制。该赛制有点类似于AwD，但是又和AwD有些不一样。选手面对的是一个黑盒的目标，需要先挖掘漏洞并利用漏洞控制目标。将自己的队伍标识(队伍名称或是Token之类)写入到指定文件。随后在该主机上进行加固等操作防止其他队伍攻击，主办方会定期去检查标识文件，根据文件中的队伍标识来判定本回合分数给予哪个队伍。可以看出KoH也是一种对抗极为激烈的赛制，同时考察选手的渗透能力及防御加固能力。\n### Mix[混合]\n混合模式结合了以上多种模式，现如今单一的赛制已经无法满足比赛及选手的参赛需求，所以大部分比赛会同时以多个模式进行比赛。例如参赛队伍通过解题(Jeopardy)可以获取一些初始分数，然后通过攻防对抗(AwD)进行得分增减的零和游戏，最终以得分高低分出胜负。\n## 比赛形式\nCTF比赛一般分为线上赛和线下赛。通常来说，线上赛多为初赛, 线下赛多为决赛, 但是也不排除直接进行\n### 线上\n选手通过主办方搭建的比赛平台在线注册，在线做题并提交flag，线上比赛多为解题模式，攻防模式较为少见。通常来说对于长时间未解出的题目，主办方会酌情给出提示(Hint)来帮助选手做题。\n### 线下\n选手前往比赛所在地，现场接入比赛网络进行比赛，线下多为AWD模式，近年来随着比赛赛制的不断革新，线下赛也会出现多种模式混合进行，例如结合**解题+AWD**，**解题+RW** 等等\n","source":"_posts/About-CTF.md","raw":"---\ntitle: About_CTF\ndate: 2021-11-20 02:09:46\ntags: CTF-基础知识\ncategories: CTF\n---\n## CTF的介绍\nCTF（**C**apture **T**he **F**lag，夺旗赛）CTF 的前身是传统黑客之间的网络技术比拼游戏，起源于 1996 年第四届 DEFCON，以代替之前黑客们通过互相发起真实攻击进行技术比拼的方式。 CTF是一种流行的信息安全竞赛形式，其英文名可直译为“夺得Flag”，也可意译为“夺旗赛”。\n其大致流程是，参赛团队之间通过进行攻防对抗、程序分析等形式，率先从主办方给出的比赛环境中得到一串具有一定格式的字符串或其他内容，并将其提交给主办方，从而夺得分数。为了方便称呼，我们把这样的内容称之为“Flag”。\n flag所表示的为目标服务器上存储的一些敏感机密的信息, 这些信息正常情况下是不能对外暴露的。选手利用目标的一些漏洞，获取到flag，其表示的即为在真实的黑客攻击中窃取到的机密信息。 \n一般情况下flag拥有固定格式为flag{xxxxx}，有些比赛会把flag关键词替换，例如CTFHub平台的flag为ctfhub{xxxxx}，利用固定格式来反推flag也是一种常见的解题思路 \n通常来说CTF是以团队为单位进行参赛。每个团队3-5人(具体根据主办方要求决定)，在整个比赛过程中既要每个选手拥有某个方向的漏洞挖掘能力，也要同队选手之间的相互配合。\n## 题目类型\n在CTF中主要包含以下5个大类的题目，有些比赛会根据自己的侧重点单独添加某个分类，例如移动设备(Mobile), 电子取证(Forensics)等，近年来也会出来混合类型的题目，例如在Web中存在一个二进制程序，需要选手先利用Web的漏洞获取到二进制程序，之后通过逆向或是Pwn等方式获得最终flag\n### Web\nWeb类题目大部分情况下和网、Web、HTTP等相关技能有关。主要考察选手对于Web攻防的一些知识技巧。诸如SQL注入、XSS、代码执行、代码审计等等都是很常见的考点。一般情况下Web题目只会给出一个能够访问的URL。部分题目会给出附件\n### Pwn\nPwn类题目重点考察选手对于二进制漏洞的挖掘和利用能力，其考点也通常在堆栈溢出、格式化漏洞、UAF、Double Free等常见二进制漏洞上。选手需要根据题目中给出的二进制可执行文件进行逆向分析，找出其中的漏洞并进行利用，编写对应的漏洞攻击脚本(Exploit)，进而对主办方给出的远程服务器进行攻击并获取flag通常来说Pwn类题目给出的远程服务器信息为nc IP_ADDRESS PORT，例如nc 1.2.3.4 4567这种形式，表示在1.2.3.4这个IP的4567端口上运行了该题目\n### Reverse\nRe类题目考察选手逆向工程能力。题目会给出一个可执行二进制文件，有些时候也可能是Android的APK安装包。选手需要逆向给出的程序，分析其程序工作原理。最终根据程序行为等获得flag\n### Crypto\nCrypto类题目考察选手对密码学相关知识的了解程度，诸如RSA、AES、DES等都是密码学题目的常客。有些时候也会给出一个加密脚本和密文，根据加密流程逆推出明文。\n### Misc\nMisc意为杂项，即不包含在以上分类的题目都会放到这个分类。题目会给出一个附件。选手下载该附件进行分析，最终得出flag\n常见的题型有图片隐写、视频隐写、文档隐写、流量分析、协议分析、游戏、IoT相关等等。五花八门，种类繁多。\n## 竞赛模式\n### 理论知识\n理论题多见于国内比赛，通常为选择题。包含单选及多选，选手需要根据自己所学的相关理论知识进行作答。最终得出分数。理论部分通常多见于初赛或是初赛之前的海选\n### Jeopardy-解题\n参赛队伍可以通过互联网或者现场网络参与，参数队伍通过与在线环境交互或文件离线分析，解决网络安全技术挑战获取相应分值，类似于 ACM 编程竞赛、信息学奥林匹克赛，根据总分和时间来进行排名。 不同的是这个解题模式一般会设置 一血(First Blood) 、 二血(Second Blood) 、 三血(Third Blood) ，也即最先完成的前三支队伍会获得额外分值，所以这不仅是对首先解出题目的队伍的分值鼓励，也是一种团队能力的间接体现。 当然还有一种流行的计分规则是设置每道题目的初始分数后，根据该题的成功解答队伍数，来逐渐降低该题的分值，也就是说如果解答这道题的人数越多，那么这道题的分值就越低。最后会下降到一个保底分值后便不再下降。一般称之为动态积分题目类型主要包含 Web 网络攻防 、 RE 逆向工程 、 Pwn 二进制漏洞利用 、 Crypto 密码攻击以及 Misc 安全杂项 这五个类别，个别比赛会根据题目类型进行扩展。\n### AwD-攻防模式\n**A**ttack **w**ith **D**efense(AwD)全称攻防模式，在攻防模式CTF赛制中，参赛队伍连接到同一个网络空间。主办方会预先为每个参赛队分配要防守的主机，该主机称之为GameBox，每个队伍之间的GameBox配置及漏洞是完全一致的，选手需要防护自己的GameBox不被攻击的同时挖掘漏洞并攻击对手服务来得分。在AwD中主办方会运行一个名为Checker的程序定时检测选手的GameBox的运行状态。若检测到状态不对则判定该GameBox宕机，按照规则扣除一定分数。攻防模式CTF赛制可以实时通过得分反映出比赛情况，最终也以得分直接分出胜负，是一种竞争激烈，具有很强观赏性和高度透明性的网络安全赛制。在这种赛制中，不仅仅是比参赛队员的智力和技术，也比体力（因为比赛一般都会持续24至48小时左右），同时也比团队之间的分工配合与合作。 AwD通常仅包含Web及Pwn两种类型的题目。每个队伍可能会分到多个GameBox，随着比赛的进行，最早的GameBox可能会下线，同时会上线新的GameBox。\n### RHG-自动化[ AI自动化]\n**R**obo **H**acking **G**ame(RHG)该利用人工智能或是AI或是自动化攻击程序来全自动的挖掘并利用漏洞，考验选手对于漏洞理解以及工程化能力。比赛开始前(一般为1-4周左右)主办方会给出测试环境以及相关接口文档。选手需要编写自动化程序来请求接口获取题目相关信息，该类程序通常称之为bot，在程序中全自动访问并挖掘目标漏洞，完成利用漏洞攻击并获取flag的过程。获取到的flag也由程序自动化提交。RHG因为是由bot全自动进行工作，所以比赛开始即可视为结束。剩下的一切全看参赛选手编写的自动化bot的工作情况。 比赛过程中不允许选手对bot进行任何的操作(包括debug/patch等等)。选手仅能看到自己的bot完成了哪些题。目前的得分情况等等。\n### RW-真实世界\n**R**eal **W**orld(RW) 首次于2018年长亭科技主办的RealWorldCTF中出现，该赛制着重考察选手在面对真实的环境下的漏洞挖掘与利用能力。通常RW模式出题也会围绕着能够应用于真实渗透攻击当中的漏洞，一般来说RW常见题型为VM/Docker逃逸、针对浏览器的攻击、针对IoT/Car等设备的攻击，Web类攻击等等 在RW赛制中会有一个Show Time，当选手认为自己已经可以完成题目时，选手可以在比赛平台上提交展示申请，由工作人员根据申请先后顺序进行展示排期。选手展示之前需要上台并连接相关网络，同时现场大屏会切换至目标的正常页面。选手确认连接并测试OK之后开始计时。一般情况下上台攻击的时间为5分钟，选手一旦完成攻击现场大屏幕会实时看到攻击的效果，此时裁判会根据效果是否符合题目要求来判定该题是否完成。如5在攻击时间内依然未能看到展示效果则认为本次攻击失败。现如今为了防止选手恶意排期。通常会有一个队伍总展示次数(例如在2019年数字经济云安全公测大赛中每个队伍只允许上台展示30次)，选手也需要尽可能保证上台之后攻击的成功率 举个例子。题目要求需要攻击位于比赛网络中的某个网站并将首页替换为包含队伍名称的页面。题目给出该网站的一些信息(源代码/数据库等等)，选手经过本地挖掘漏洞之后，提交展示申请，排期到了之后进行上台展示。注意，因为RW模式是以展示效果来作为题目是否完成的准则，所以在RW模式中并不存在Flag。\n### KoH-抢占山头\n**K**ing **o**f **H**ill(KoH)是近些年新衍生的一种赛制。该赛制有点类似于AwD，但是又和AwD有些不一样。选手面对的是一个黑盒的目标，需要先挖掘漏洞并利用漏洞控制目标。将自己的队伍标识(队伍名称或是Token之类)写入到指定文件。随后在该主机上进行加固等操作防止其他队伍攻击，主办方会定期去检查标识文件，根据文件中的队伍标识来判定本回合分数给予哪个队伍。可以看出KoH也是一种对抗极为激烈的赛制，同时考察选手的渗透能力及防御加固能力。\n### Mix[混合]\n混合模式结合了以上多种模式，现如今单一的赛制已经无法满足比赛及选手的参赛需求，所以大部分比赛会同时以多个模式进行比赛。例如参赛队伍通过解题(Jeopardy)可以获取一些初始分数，然后通过攻防对抗(AwD)进行得分增减的零和游戏，最终以得分高低分出胜负。\n## 比赛形式\nCTF比赛一般分为线上赛和线下赛。通常来说，线上赛多为初赛, 线下赛多为决赛, 但是也不排除直接进行\n### 线上\n选手通过主办方搭建的比赛平台在线注册，在线做题并提交flag，线上比赛多为解题模式，攻防模式较为少见。通常来说对于长时间未解出的题目，主办方会酌情给出提示(Hint)来帮助选手做题。\n### 线下\n选手前往比赛所在地，现场接入比赛网络进行比赛，线下多为AWD模式，近年来随着比赛赛制的不断革新，线下赛也会出现多种模式混合进行，例如结合**解题+AWD**，**解题+RW** 等等\n","slug":"About-CTF","published":1,"updated":"2021-12-19T06:36:13.321Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxcz8rxu0001f8v07f43278b","content":"<h2 id=\"CTF的介绍\"><a href=\"#CTF的介绍\" class=\"headerlink\" title=\"CTF的介绍\"></a>CTF的介绍</h2><p>CTF（<strong>C</strong>apture <strong>T</strong>he <strong>F</strong>lag，夺旗赛）CTF 的前身是传统黑客之间的网络技术比拼游戏，起源于 1996 年第四届 DEFCON，以代替之前黑客们通过互相发起真实攻击进行技术比拼的方式。 CTF是一种流行的信息安全竞赛形式，其英文名可直译为“夺得Flag”，也可意译为“夺旗赛”。<br>其大致流程是，参赛团队之间通过进行攻防对抗、程序分析等形式，率先从主办方给出的比赛环境中得到一串具有一定格式的字符串或其他内容，并将其提交给主办方，从而夺得分数。为了方便称呼，我们把这样的内容称之为“Flag”。<br> flag所表示的为目标服务器上存储的一些敏感机密的信息, 这些信息正常情况下是不能对外暴露的。选手利用目标的一些漏洞，获取到flag，其表示的即为在真实的黑客攻击中窃取到的机密信息。<br>一般情况下flag拥有固定格式为flag{xxxxx}，有些比赛会把flag关键词替换，例如CTFHub平台的flag为ctfhub{xxxxx}，利用固定格式来反推flag也是一种常见的解题思路<br>通常来说CTF是以团队为单位进行参赛。每个团队3-5人(具体根据主办方要求决定)，在整个比赛过程中既要每个选手拥有某个方向的漏洞挖掘能力，也要同队选手之间的相互配合。</p>\n<h2 id=\"题目类型\"><a href=\"#题目类型\" class=\"headerlink\" title=\"题目类型\"></a>题目类型</h2><p>在CTF中主要包含以下5个大类的题目，有些比赛会根据自己的侧重点单独添加某个分类，例如移动设备(Mobile), 电子取证(Forensics)等，近年来也会出来混合类型的题目，例如在Web中存在一个二进制程序，需要选手先利用Web的漏洞获取到二进制程序，之后通过逆向或是Pwn等方式获得最终flag</p>\n<h3 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h3><p>Web类题目大部分情况下和网、Web、HTTP等相关技能有关。主要考察选手对于Web攻防的一些知识技巧。诸如SQL注入、XSS、代码执行、代码审计等等都是很常见的考点。一般情况下Web题目只会给出一个能够访问的URL。部分题目会给出附件</p>\n<h3 id=\"Pwn\"><a href=\"#Pwn\" class=\"headerlink\" title=\"Pwn\"></a>Pwn</h3><p>Pwn类题目重点考察选手对于二进制漏洞的挖掘和利用能力，其考点也通常在堆栈溢出、格式化漏洞、UAF、Double Free等常见二进制漏洞上。选手需要根据题目中给出的二进制可执行文件进行逆向分析，找出其中的漏洞并进行利用，编写对应的漏洞攻击脚本(Exploit)，进而对主办方给出的远程服务器进行攻击并获取flag通常来说Pwn类题目给出的远程服务器信息为nc IP_ADDRESS PORT，例如nc 1.2.3.4 4567这种形式，表示在1.2.3.4这个IP的4567端口上运行了该题目</p>\n<h3 id=\"Reverse\"><a href=\"#Reverse\" class=\"headerlink\" title=\"Reverse\"></a>Reverse</h3><p>Re类题目考察选手逆向工程能力。题目会给出一个可执行二进制文件，有些时候也可能是Android的APK安装包。选手需要逆向给出的程序，分析其程序工作原理。最终根据程序行为等获得flag</p>\n<h3 id=\"Crypto\"><a href=\"#Crypto\" class=\"headerlink\" title=\"Crypto\"></a>Crypto</h3><p>Crypto类题目考察选手对密码学相关知识的了解程度，诸如RSA、AES、DES等都是密码学题目的常客。有些时候也会给出一个加密脚本和密文，根据加密流程逆推出明文。</p>\n<h3 id=\"Misc\"><a href=\"#Misc\" class=\"headerlink\" title=\"Misc\"></a>Misc</h3><p>Misc意为杂项，即不包含在以上分类的题目都会放到这个分类。题目会给出一个附件。选手下载该附件进行分析，最终得出flag<br>常见的题型有图片隐写、视频隐写、文档隐写、流量分析、协议分析、游戏、IoT相关等等。五花八门，种类繁多。</p>\n<h2 id=\"竞赛模式\"><a href=\"#竞赛模式\" class=\"headerlink\" title=\"竞赛模式\"></a>竞赛模式</h2><h3 id=\"理论知识\"><a href=\"#理论知识\" class=\"headerlink\" title=\"理论知识\"></a>理论知识</h3><p>理论题多见于国内比赛，通常为选择题。包含单选及多选，选手需要根据自己所学的相关理论知识进行作答。最终得出分数。理论部分通常多见于初赛或是初赛之前的海选</p>\n<h3 id=\"Jeopardy-解题\"><a href=\"#Jeopardy-解题\" class=\"headerlink\" title=\"Jeopardy-解题\"></a>Jeopardy-解题</h3><p>参赛队伍可以通过互联网或者现场网络参与，参数队伍通过与在线环境交互或文件离线分析，解决网络安全技术挑战获取相应分值，类似于 ACM 编程竞赛、信息学奥林匹克赛，根据总分和时间来进行排名。 不同的是这个解题模式一般会设置 一血(First Blood) 、 二血(Second Blood) 、 三血(Third Blood) ，也即最先完成的前三支队伍会获得额外分值，所以这不仅是对首先解出题目的队伍的分值鼓励，也是一种团队能力的间接体现。 当然还有一种流行的计分规则是设置每道题目的初始分数后，根据该题的成功解答队伍数，来逐渐降低该题的分值，也就是说如果解答这道题的人数越多，那么这道题的分值就越低。最后会下降到一个保底分值后便不再下降。一般称之为动态积分题目类型主要包含 Web 网络攻防 、 RE 逆向工程 、 Pwn 二进制漏洞利用 、 Crypto 密码攻击以及 Misc 安全杂项 这五个类别，个别比赛会根据题目类型进行扩展。</p>\n<h3 id=\"AwD-攻防模式\"><a href=\"#AwD-攻防模式\" class=\"headerlink\" title=\"AwD-攻防模式\"></a>AwD-攻防模式</h3><p><strong>A</strong>ttack <strong>w</strong>ith <strong>D</strong>efense(AwD)全称攻防模式，在攻防模式CTF赛制中，参赛队伍连接到同一个网络空间。主办方会预先为每个参赛队分配要防守的主机，该主机称之为GameBox，每个队伍之间的GameBox配置及漏洞是完全一致的，选手需要防护自己的GameBox不被攻击的同时挖掘漏洞并攻击对手服务来得分。在AwD中主办方会运行一个名为Checker的程序定时检测选手的GameBox的运行状态。若检测到状态不对则判定该GameBox宕机，按照规则扣除一定分数。攻防模式CTF赛制可以实时通过得分反映出比赛情况，最终也以得分直接分出胜负，是一种竞争激烈，具有很强观赏性和高度透明性的网络安全赛制。在这种赛制中，不仅仅是比参赛队员的智力和技术，也比体力（因为比赛一般都会持续24至48小时左右），同时也比团队之间的分工配合与合作。 AwD通常仅包含Web及Pwn两种类型的题目。每个队伍可能会分到多个GameBox，随着比赛的进行，最早的GameBox可能会下线，同时会上线新的GameBox。</p>\n<h3 id=\"RHG-自动化-AI自动化\"><a href=\"#RHG-自动化-AI自动化\" class=\"headerlink\" title=\"RHG-自动化[ AI自动化]\"></a>RHG-自动化[ AI自动化]</h3><p><strong>R</strong>obo <strong>H</strong>acking <strong>G</strong>ame(RHG)该利用人工智能或是AI或是自动化攻击程序来全自动的挖掘并利用漏洞，考验选手对于漏洞理解以及工程化能力。比赛开始前(一般为1-4周左右)主办方会给出测试环境以及相关接口文档。选手需要编写自动化程序来请求接口获取题目相关信息，该类程序通常称之为bot，在程序中全自动访问并挖掘目标漏洞，完成利用漏洞攻击并获取flag的过程。获取到的flag也由程序自动化提交。RHG因为是由bot全自动进行工作，所以比赛开始即可视为结束。剩下的一切全看参赛选手编写的自动化bot的工作情况。 比赛过程中不允许选手对bot进行任何的操作(包括debug/patch等等)。选手仅能看到自己的bot完成了哪些题。目前的得分情况等等。</p>\n<h3 id=\"RW-真实世界\"><a href=\"#RW-真实世界\" class=\"headerlink\" title=\"RW-真实世界\"></a>RW-真实世界</h3><p><strong>R</strong>eal <strong>W</strong>orld(RW) 首次于2018年长亭科技主办的RealWorldCTF中出现，该赛制着重考察选手在面对真实的环境下的漏洞挖掘与利用能力。通常RW模式出题也会围绕着能够应用于真实渗透攻击当中的漏洞，一般来说RW常见题型为VM/Docker逃逸、针对浏览器的攻击、针对IoT/Car等设备的攻击，Web类攻击等等 在RW赛制中会有一个Show Time，当选手认为自己已经可以完成题目时，选手可以在比赛平台上提交展示申请，由工作人员根据申请先后顺序进行展示排期。选手展示之前需要上台并连接相关网络，同时现场大屏会切换至目标的正常页面。选手确认连接并测试OK之后开始计时。一般情况下上台攻击的时间为5分钟，选手一旦完成攻击现场大屏幕会实时看到攻击的效果，此时裁判会根据效果是否符合题目要求来判定该题是否完成。如5在攻击时间内依然未能看到展示效果则认为本次攻击失败。现如今为了防止选手恶意排期。通常会有一个队伍总展示次数(例如在2019年数字经济云安全公测大赛中每个队伍只允许上台展示30次)，选手也需要尽可能保证上台之后攻击的成功率 举个例子。题目要求需要攻击位于比赛网络中的某个网站并将首页替换为包含队伍名称的页面。题目给出该网站的一些信息(源代码/数据库等等)，选手经过本地挖掘漏洞之后，提交展示申请，排期到了之后进行上台展示。注意，因为RW模式是以展示效果来作为题目是否完成的准则，所以在RW模式中并不存在Flag。</p>\n<h3 id=\"KoH-抢占山头\"><a href=\"#KoH-抢占山头\" class=\"headerlink\" title=\"KoH-抢占山头\"></a>KoH-抢占山头</h3><p><strong>K</strong>ing <strong>o</strong>f <strong>H</strong>ill(KoH)是近些年新衍生的一种赛制。该赛制有点类似于AwD，但是又和AwD有些不一样。选手面对的是一个黑盒的目标，需要先挖掘漏洞并利用漏洞控制目标。将自己的队伍标识(队伍名称或是Token之类)写入到指定文件。随后在该主机上进行加固等操作防止其他队伍攻击，主办方会定期去检查标识文件，根据文件中的队伍标识来判定本回合分数给予哪个队伍。可以看出KoH也是一种对抗极为激烈的赛制，同时考察选手的渗透能力及防御加固能力。</p>\n<h3 id=\"Mix-混合\"><a href=\"#Mix-混合\" class=\"headerlink\" title=\"Mix[混合]\"></a>Mix[混合]</h3><p>混合模式结合了以上多种模式，现如今单一的赛制已经无法满足比赛及选手的参赛需求，所以大部分比赛会同时以多个模式进行比赛。例如参赛队伍通过解题(Jeopardy)可以获取一些初始分数，然后通过攻防对抗(AwD)进行得分增减的零和游戏，最终以得分高低分出胜负。</p>\n<h2 id=\"比赛形式\"><a href=\"#比赛形式\" class=\"headerlink\" title=\"比赛形式\"></a>比赛形式</h2><p>CTF比赛一般分为线上赛和线下赛。通常来说，线上赛多为初赛, 线下赛多为决赛, 但是也不排除直接进行</p>\n<h3 id=\"线上\"><a href=\"#线上\" class=\"headerlink\" title=\"线上\"></a>线上</h3><p>选手通过主办方搭建的比赛平台在线注册，在线做题并提交flag，线上比赛多为解题模式，攻防模式较为少见。通常来说对于长时间未解出的题目，主办方会酌情给出提示(Hint)来帮助选手做题。</p>\n<h3 id=\"线下\"><a href=\"#线下\" class=\"headerlink\" title=\"线下\"></a>线下</h3><p>选手前往比赛所在地，现场接入比赛网络进行比赛，线下多为AWD模式，近年来随着比赛赛制的不断革新，线下赛也会出现多种模式混合进行，例如结合<strong>解题+AWD</strong>，<strong>解题+RW</strong> 等等</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"CTF的介绍\"><a href=\"#CTF的介绍\" class=\"headerlink\" title=\"CTF的介绍\"></a>CTF的介绍</h2><p>CTF（<strong>C</strong>apture <strong>T</strong>he <strong>F</strong>lag，夺旗赛）CTF 的前身是传统黑客之间的网络技术比拼游戏，起源于 1996 年第四届 DEFCON，以代替之前黑客们通过互相发起真实攻击进行技术比拼的方式。 CTF是一种流行的信息安全竞赛形式，其英文名可直译为“夺得Flag”，也可意译为“夺旗赛”。<br>其大致流程是，参赛团队之间通过进行攻防对抗、程序分析等形式，率先从主办方给出的比赛环境中得到一串具有一定格式的字符串或其他内容，并将其提交给主办方，从而夺得分数。为了方便称呼，我们把这样的内容称之为“Flag”。<br> flag所表示的为目标服务器上存储的一些敏感机密的信息, 这些信息正常情况下是不能对外暴露的。选手利用目标的一些漏洞，获取到flag，其表示的即为在真实的黑客攻击中窃取到的机密信息。<br>一般情况下flag拥有固定格式为flag{xxxxx}，有些比赛会把flag关键词替换，例如CTFHub平台的flag为ctfhub{xxxxx}，利用固定格式来反推flag也是一种常见的解题思路<br>通常来说CTF是以团队为单位进行参赛。每个团队3-5人(具体根据主办方要求决定)，在整个比赛过程中既要每个选手拥有某个方向的漏洞挖掘能力，也要同队选手之间的相互配合。</p>\n<h2 id=\"题目类型\"><a href=\"#题目类型\" class=\"headerlink\" title=\"题目类型\"></a>题目类型</h2><p>在CTF中主要包含以下5个大类的题目，有些比赛会根据自己的侧重点单独添加某个分类，例如移动设备(Mobile), 电子取证(Forensics)等，近年来也会出来混合类型的题目，例如在Web中存在一个二进制程序，需要选手先利用Web的漏洞获取到二进制程序，之后通过逆向或是Pwn等方式获得最终flag</p>\n<h3 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h3><p>Web类题目大部分情况下和网、Web、HTTP等相关技能有关。主要考察选手对于Web攻防的一些知识技巧。诸如SQL注入、XSS、代码执行、代码审计等等都是很常见的考点。一般情况下Web题目只会给出一个能够访问的URL。部分题目会给出附件</p>\n<h3 id=\"Pwn\"><a href=\"#Pwn\" class=\"headerlink\" title=\"Pwn\"></a>Pwn</h3><p>Pwn类题目重点考察选手对于二进制漏洞的挖掘和利用能力，其考点也通常在堆栈溢出、格式化漏洞、UAF、Double Free等常见二进制漏洞上。选手需要根据题目中给出的二进制可执行文件进行逆向分析，找出其中的漏洞并进行利用，编写对应的漏洞攻击脚本(Exploit)，进而对主办方给出的远程服务器进行攻击并获取flag通常来说Pwn类题目给出的远程服务器信息为nc IP_ADDRESS PORT，例如nc 1.2.3.4 4567这种形式，表示在1.2.3.4这个IP的4567端口上运行了该题目</p>\n<h3 id=\"Reverse\"><a href=\"#Reverse\" class=\"headerlink\" title=\"Reverse\"></a>Reverse</h3><p>Re类题目考察选手逆向工程能力。题目会给出一个可执行二进制文件，有些时候也可能是Android的APK安装包。选手需要逆向给出的程序，分析其程序工作原理。最终根据程序行为等获得flag</p>\n<h3 id=\"Crypto\"><a href=\"#Crypto\" class=\"headerlink\" title=\"Crypto\"></a>Crypto</h3><p>Crypto类题目考察选手对密码学相关知识的了解程度，诸如RSA、AES、DES等都是密码学题目的常客。有些时候也会给出一个加密脚本和密文，根据加密流程逆推出明文。</p>\n<h3 id=\"Misc\"><a href=\"#Misc\" class=\"headerlink\" title=\"Misc\"></a>Misc</h3><p>Misc意为杂项，即不包含在以上分类的题目都会放到这个分类。题目会给出一个附件。选手下载该附件进行分析，最终得出flag<br>常见的题型有图片隐写、视频隐写、文档隐写、流量分析、协议分析、游戏、IoT相关等等。五花八门，种类繁多。</p>\n<h2 id=\"竞赛模式\"><a href=\"#竞赛模式\" class=\"headerlink\" title=\"竞赛模式\"></a>竞赛模式</h2><h3 id=\"理论知识\"><a href=\"#理论知识\" class=\"headerlink\" title=\"理论知识\"></a>理论知识</h3><p>理论题多见于国内比赛，通常为选择题。包含单选及多选，选手需要根据自己所学的相关理论知识进行作答。最终得出分数。理论部分通常多见于初赛或是初赛之前的海选</p>\n<h3 id=\"Jeopardy-解题\"><a href=\"#Jeopardy-解题\" class=\"headerlink\" title=\"Jeopardy-解题\"></a>Jeopardy-解题</h3><p>参赛队伍可以通过互联网或者现场网络参与，参数队伍通过与在线环境交互或文件离线分析，解决网络安全技术挑战获取相应分值，类似于 ACM 编程竞赛、信息学奥林匹克赛，根据总分和时间来进行排名。 不同的是这个解题模式一般会设置 一血(First Blood) 、 二血(Second Blood) 、 三血(Third Blood) ，也即最先完成的前三支队伍会获得额外分值，所以这不仅是对首先解出题目的队伍的分值鼓励，也是一种团队能力的间接体现。 当然还有一种流行的计分规则是设置每道题目的初始分数后，根据该题的成功解答队伍数，来逐渐降低该题的分值，也就是说如果解答这道题的人数越多，那么这道题的分值就越低。最后会下降到一个保底分值后便不再下降。一般称之为动态积分题目类型主要包含 Web 网络攻防 、 RE 逆向工程 、 Pwn 二进制漏洞利用 、 Crypto 密码攻击以及 Misc 安全杂项 这五个类别，个别比赛会根据题目类型进行扩展。</p>\n<h3 id=\"AwD-攻防模式\"><a href=\"#AwD-攻防模式\" class=\"headerlink\" title=\"AwD-攻防模式\"></a>AwD-攻防模式</h3><p><strong>A</strong>ttack <strong>w</strong>ith <strong>D</strong>efense(AwD)全称攻防模式，在攻防模式CTF赛制中，参赛队伍连接到同一个网络空间。主办方会预先为每个参赛队分配要防守的主机，该主机称之为GameBox，每个队伍之间的GameBox配置及漏洞是完全一致的，选手需要防护自己的GameBox不被攻击的同时挖掘漏洞并攻击对手服务来得分。在AwD中主办方会运行一个名为Checker的程序定时检测选手的GameBox的运行状态。若检测到状态不对则判定该GameBox宕机，按照规则扣除一定分数。攻防模式CTF赛制可以实时通过得分反映出比赛情况，最终也以得分直接分出胜负，是一种竞争激烈，具有很强观赏性和高度透明性的网络安全赛制。在这种赛制中，不仅仅是比参赛队员的智力和技术，也比体力（因为比赛一般都会持续24至48小时左右），同时也比团队之间的分工配合与合作。 AwD通常仅包含Web及Pwn两种类型的题目。每个队伍可能会分到多个GameBox，随着比赛的进行，最早的GameBox可能会下线，同时会上线新的GameBox。</p>\n<h3 id=\"RHG-自动化-AI自动化\"><a href=\"#RHG-自动化-AI自动化\" class=\"headerlink\" title=\"RHG-自动化[ AI自动化]\"></a>RHG-自动化[ AI自动化]</h3><p><strong>R</strong>obo <strong>H</strong>acking <strong>G</strong>ame(RHG)该利用人工智能或是AI或是自动化攻击程序来全自动的挖掘并利用漏洞，考验选手对于漏洞理解以及工程化能力。比赛开始前(一般为1-4周左右)主办方会给出测试环境以及相关接口文档。选手需要编写自动化程序来请求接口获取题目相关信息，该类程序通常称之为bot，在程序中全自动访问并挖掘目标漏洞，完成利用漏洞攻击并获取flag的过程。获取到的flag也由程序自动化提交。RHG因为是由bot全自动进行工作，所以比赛开始即可视为结束。剩下的一切全看参赛选手编写的自动化bot的工作情况。 比赛过程中不允许选手对bot进行任何的操作(包括debug/patch等等)。选手仅能看到自己的bot完成了哪些题。目前的得分情况等等。</p>\n<h3 id=\"RW-真实世界\"><a href=\"#RW-真实世界\" class=\"headerlink\" title=\"RW-真实世界\"></a>RW-真实世界</h3><p><strong>R</strong>eal <strong>W</strong>orld(RW) 首次于2018年长亭科技主办的RealWorldCTF中出现，该赛制着重考察选手在面对真实的环境下的漏洞挖掘与利用能力。通常RW模式出题也会围绕着能够应用于真实渗透攻击当中的漏洞，一般来说RW常见题型为VM/Docker逃逸、针对浏览器的攻击、针对IoT/Car等设备的攻击，Web类攻击等等 在RW赛制中会有一个Show Time，当选手认为自己已经可以完成题目时，选手可以在比赛平台上提交展示申请，由工作人员根据申请先后顺序进行展示排期。选手展示之前需要上台并连接相关网络，同时现场大屏会切换至目标的正常页面。选手确认连接并测试OK之后开始计时。一般情况下上台攻击的时间为5分钟，选手一旦完成攻击现场大屏幕会实时看到攻击的效果，此时裁判会根据效果是否符合题目要求来判定该题是否完成。如5在攻击时间内依然未能看到展示效果则认为本次攻击失败。现如今为了防止选手恶意排期。通常会有一个队伍总展示次数(例如在2019年数字经济云安全公测大赛中每个队伍只允许上台展示30次)，选手也需要尽可能保证上台之后攻击的成功率 举个例子。题目要求需要攻击位于比赛网络中的某个网站并将首页替换为包含队伍名称的页面。题目给出该网站的一些信息(源代码/数据库等等)，选手经过本地挖掘漏洞之后，提交展示申请，排期到了之后进行上台展示。注意，因为RW模式是以展示效果来作为题目是否完成的准则，所以在RW模式中并不存在Flag。</p>\n<h3 id=\"KoH-抢占山头\"><a href=\"#KoH-抢占山头\" class=\"headerlink\" title=\"KoH-抢占山头\"></a>KoH-抢占山头</h3><p><strong>K</strong>ing <strong>o</strong>f <strong>H</strong>ill(KoH)是近些年新衍生的一种赛制。该赛制有点类似于AwD，但是又和AwD有些不一样。选手面对的是一个黑盒的目标，需要先挖掘漏洞并利用漏洞控制目标。将自己的队伍标识(队伍名称或是Token之类)写入到指定文件。随后在该主机上进行加固等操作防止其他队伍攻击，主办方会定期去检查标识文件，根据文件中的队伍标识来判定本回合分数给予哪个队伍。可以看出KoH也是一种对抗极为激烈的赛制，同时考察选手的渗透能力及防御加固能力。</p>\n<h3 id=\"Mix-混合\"><a href=\"#Mix-混合\" class=\"headerlink\" title=\"Mix[混合]\"></a>Mix[混合]</h3><p>混合模式结合了以上多种模式，现如今单一的赛制已经无法满足比赛及选手的参赛需求，所以大部分比赛会同时以多个模式进行比赛。例如参赛队伍通过解题(Jeopardy)可以获取一些初始分数，然后通过攻防对抗(AwD)进行得分增减的零和游戏，最终以得分高低分出胜负。</p>\n<h2 id=\"比赛形式\"><a href=\"#比赛形式\" class=\"headerlink\" title=\"比赛形式\"></a>比赛形式</h2><p>CTF比赛一般分为线上赛和线下赛。通常来说，线上赛多为初赛, 线下赛多为决赛, 但是也不排除直接进行</p>\n<h3 id=\"线上\"><a href=\"#线上\" class=\"headerlink\" title=\"线上\"></a>线上</h3><p>选手通过主办方搭建的比赛平台在线注册，在线做题并提交flag，线上比赛多为解题模式，攻防模式较为少见。通常来说对于长时间未解出的题目，主办方会酌情给出提示(Hint)来帮助选手做题。</p>\n<h3 id=\"线下\"><a href=\"#线下\" class=\"headerlink\" title=\"线下\"></a>线下</h3><p>选手前往比赛所在地，现场接入比赛网络进行比赛，线下多为AWD模式，近年来随着比赛赛制的不断革新，线下赛也会出现多种模式混合进行，例如结合<strong>解题+AWD</strong>，<strong>解题+RW</strong> 等等</p>\n"},{"title":"HelloWorld","date":"2021-11-19T16:37:57.000Z","_content":"---\nHello World\n---\n#### 你好~好久不见？\n这里是探姬，在换了无数个奇奇怪怪的博客之后，最后又决定走一走静态做一回极简主义，于是呢，就有了这个以[Hexo](https://hexo.io/)为框架的博客。\n#### 内容\n探姬的更新内容很杂的，包括但不限于计算机方面\n而且....\n偶尔会网易云（雾\n#### 关于博客\nHexo是完全静态的博客，除了第三方插件或者API会获取您的某些信息以为，该博客不会存储任何与您相关的信息。\n#### 关于我\n探姬~\n这里是一名星际玩家\n要素比较多的混合体\n记得，叫姐姐（！！","source":"_posts/HelloWorld.md","raw":"---\ntitle: HelloWorld\ndate: 2021-11-20 00:37:57\ntags: Unknown\ncategories: 随手一记\n---\n---\nHello World\n---\n#### 你好~好久不见？\n这里是探姬，在换了无数个奇奇怪怪的博客之后，最后又决定走一走静态做一回极简主义，于是呢，就有了这个以[Hexo](https://hexo.io/)为框架的博客。\n#### 内容\n探姬的更新内容很杂的，包括但不限于计算机方面\n而且....\n偶尔会网易云（雾\n#### 关于博客\nHexo是完全静态的博客，除了第三方插件或者API会获取您的某些信息以为，该博客不会存储任何与您相关的信息。\n#### 关于我\n探姬~\n这里是一名星际玩家\n要素比较多的混合体\n记得，叫姐姐（！！","slug":"HelloWorld","published":1,"updated":"2021-12-19T06:36:13.322Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxcz8rxx0003f8v09z3p53xx","content":"<hr>\n<h2 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h2><h4 id=\"你好-好久不见？\"><a href=\"#你好-好久不见？\" class=\"headerlink\" title=\"你好~好久不见？\"></a>你好~好久不见？</h4><p>这里是探姬，在换了无数个奇奇怪怪的博客之后，最后又决定走一走静态做一回极简主义，于是呢，就有了这个以<a href=\"https://hexo.io/\">Hexo</a>为框架的博客。</p>\n<h4 id=\"内容\"><a href=\"#内容\" class=\"headerlink\" title=\"内容\"></a>内容</h4><p>探姬的更新内容很杂的，包括但不限于计算机方面<br>而且….<br>偶尔会网易云（雾</p>\n<h4 id=\"关于博客\"><a href=\"#关于博客\" class=\"headerlink\" title=\"关于博客\"></a>关于博客</h4><p>Hexo是完全静态的博客，除了第三方插件或者API会获取您的某些信息以为，该博客不会存储任何与您相关的信息。</p>\n<h4 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h4><p>探姬~<br>这里是一名星际玩家<br>要素比较多的混合体<br>记得，叫姐姐（！！</p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h2 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h2><h4 id=\"你好-好久不见？\"><a href=\"#你好-好久不见？\" class=\"headerlink\" title=\"你好~好久不见？\"></a>你好~好久不见？</h4><p>这里是探姬，在换了无数个奇奇怪怪的博客之后，最后又决定走一走静态做一回极简主义，于是呢，就有了这个以<a href=\"https://hexo.io/\">Hexo</a>为框架的博客。</p>\n<h4 id=\"内容\"><a href=\"#内容\" class=\"headerlink\" title=\"内容\"></a>内容</h4><p>探姬的更新内容很杂的，包括但不限于计算机方面<br>而且….<br>偶尔会网易云（雾</p>\n<h4 id=\"关于博客\"><a href=\"#关于博客\" class=\"headerlink\" title=\"关于博客\"></a>关于博客</h4><p>Hexo是完全静态的博客，除了第三方插件或者API会获取您的某些信息以为，该博客不会存储任何与您相关的信息。</p>\n<h4 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h4><p>探姬~<br>这里是一名星际玩家<br>要素比较多的混合体<br>记得，叫姐姐（！！</p>\n"},{"title":"PHPの小笔记","date":"2021-11-19T17:28:11.000Z","_content":"## 常量与变量\n#### (PHP 是一门弱类型语言:\n```php\n<?php\n$x_int=5;\n$y_int=6;\n$txt_string=\"Hello World!\";\n$float_num=4.0;\n$z=$x+$y;\necho $z;\n?>\n```\n#### PHP的数据类型：\n`String（字符串 `` Integer（整型 `` Float（浮点型）``Boolean（布尔型）`\n`Array（数组）``Object（对象）``NULL（空值）`\n#### PHP的类型比较：\n\n- 松散比较：使用两个等号 **==** 比较，只比较值，不比较类型。\n- 严格比较：用三个等号 **===** 比较，除了比较值，也比较类型。\n#### PHP的常量：\n`bool define ( string $name , mixed $value [, bool $case_insensitive = false ] )`\nEg：`define(\"GREETING\", \"欢迎访问\", true);`//true表示不区分大小写。\n`$GREETING`和`$greeting`都会输出“欢迎访问”。\n#### PHP 变量作用域：\n\n- 全局变量除了**常规定义**，可以在函数内部使用`global`关键词来定义一个全局变量。\n- php支持`static`关键词来定义静态局部变量。\n#### PHP 超级全局变量\nPHP中预定义了几个超级全局变量（superglobals） ，这意味着它们在一个脚本的全部作用域中都可用。 你不需要特别说明，就可以在函数及类中使用。\n**PHP 超级全局变量列表:**\n`$GLOBAL`   `$_SERVER`   `$_REQUEST`   `$_POST`\n`$_GET`   `$_FILES`   `$_ENV`   `$_COOKIE`   `$_SESSION`\n```php\n//Example for $GLOBAL\n<?php \n$x = 75; \n$y = 25;\nfunction addition() \n{ \n    $GLOBALS['z'] = $GLOBALS['x'] + $GLOBALS['y']; \n}\naddition(); \necho $z; \n?>\n```\n`$_SERVER `是一个包含了诸如头**信息(header)**、**路径(path)**、以及**脚本位置(script locations)**等等信息的**数组**。这个数组中的项目由 Web 服务器创建。(不能保证每个服务器都提供全部项目)；(以下为表格：)\n\n| $_SERVER['PHP_SELF'] | 当前执行脚本的文件名，与 document root 有关。例如，在地址为 http://example.com/test.php/foo.bar 的脚本中使用 $_SERVER['PHP_SELF'] 将得到 /test.php/foo.bar。__FILE__ 常量包含当前(例如包含)文件的完整路径和文件名。 从 PHP 4.3.0 版本开始，如果 PHP 以命令行模式运行，这个变量将包含脚本名。之前的版本该变量不可用。 |\n| --- | --- |\n| $_SERVER['GATEWAY_INTERFACE'] | 服务器使用的 CGI 规范的版本；例如，\"CGI/1.1\"。 |\n| $_SERVER['SERVER_ADDR'] | 当前运行脚本所在的服务器的 IP 地址。 |\n| $_SERVER['SERVER_NAME'] | 当前运行脚本所在的服务器的主机名。如果脚本运行于虚拟主机中，该名称是由那个虚拟主机所设置的值决定。(如: www.runoob.com) |\n| $_SERVER['SERVER_SOFTWARE'] | 服务器标识字符串，在响应请求时的头信息中给出。 (如：Apache/2.2.24) |\n| $_SERVER['SERVER_PROTOCOL'] | 请求页面时通信协议的名称和版本。例如，\"HTTP/1.0\"。 |\n| $_SERVER['REQUEST_METHOD'] | 访问页面使用的请求方法；例如，\"GET\", \"HEAD\"，\"POST\"，\"PUT\"。 |\n| $_SERVER['REQUEST_TIME'] | 请求开始时的时间戳。从 PHP 5.1.0 起可用。 (如：1377687496) |\n| $_SERVER['QUERY_STRING'] | query string（查询字符串），如果有的话，通过它进行页面访问。 |\n| $_SERVER['HTTP_ACCEPT'] | 当前请求头中 Accept: 项的内容，如果存在的话。 |\n| $_SERVER['HTTP_ACCEPT_CHARSET'] | 当前请求头中 Accept-Charset: 项的内容，如果存在的话。例如：\"iso-8859-1,*,utf-8\"。 |\n| $_SERVER['HTTP_HOST'] | 当前请求头中 Host: 项的内容，如果存在的话。 |\n| $_SERVER['HTTP_REFERER'] | 引导用户代理到当前页的前一页的地址（如果存在）。由 user agent 设置决定。并不是所有的用户代理都会设置该项，有的还提供了修改 HTTP_REFERER 的功能。简言之，该值并不可信。) |\n| $_SERVER['HTTPS'] | 如果脚本是通过 HTTPS 协议被访问，则被设为一个非空的值。 |\n| $_SERVER['REMOTE_ADDR'] | 浏览当前页面的用户的 IP 地址。 |\n| $_SERVER['REMOTE_HOST'] | 浏览当前页面的用户的主机名。DNS 反向解析不依赖于用户的 REMOTE_ADDR。 |\n| $_SERVER['REMOTE_PORT'] | 用户机器上连接到 Web 服务器所使用的端口号。 |\n| $_SERVER['SCRIPT_FILENAME'] | 当前执行脚本的绝对路径。 |\n| $_SERVER['SERVER_ADMIN'] | 该值指明了 Apache 服务器配置文件中的 SERVER_ADMIN 参数。如果脚本运行在一个虚拟主机上，则该值是那个虚拟主机的值。(如：someone@runoob.com) |\n| $_SERVER['SERVER_PORT'] | Web 服务器使用的端口。默认值为 \"80\"。如果使用 SSL 安全连接，则这个值为用户设置的 HTTP 端口。 |\n| $_SERVER['SERVER_SIGNATURE'] | 包含了服务器版本和虚拟主机名的字符串。 |\n| $_SERVER['PATH_TRANSLATED'] | 当前脚本所在文件系统（非文档根目录）的基本路径。这是在服务器进行虚拟到真实路径的映像后的结果。 |\n| $_SERVER['SCRIPT_NAME'] | 包含当前脚本的路径。这在页面需要指向自己时非常有用。__FILE__ 常量包含当前脚本(例如包含文件)的完整路径和文件名。 |\n| $_SERVER['SCRIPT_URI'] | URI 用来指定要访问的页面。例如 \"/index.html\"。 |\n\n#### PHP 魔术常量\n| **__LINE__** | 文件中的当前行号。 |\n| --- | --- |\n| **__FILE__** | 文件的完整路径和文件名。如果用在被包含文件中，则返回被包含的文件名。\n自 PHP 4.0.2 起，__FILE__ 总是包含一个绝对路径（如果是符号连接，则是解析后的绝对路径），而在此之前的版本有时会包含一个相对路径。\n实例: |\n| **__DIR__** | 文件所在的目录。如果用在被包括文件中，则返回被包括的文件所在的目录。\n它等价于 dirname(__FILE__)。除非是根目录，否则目录中名不包括末尾的斜杠。（PHP 5.3.0中新增） |\n| **__FUNCTION__** |  起本常量返回该函数被定义时的名字 |\n| **__CLASS__** | 自 PHP 5 起本常量返回该类被定义时的名字（区分大小写）。 |\n| **__TRAIT__** | ???? |\n| **__METHOD__** | 返回该方法被定义时的名字（区分大小写）。PHP 5.0.0 新加 |\n| **__NAMESPACE__** | 当前命名空间的名称（区分大小写）。此常量是在编译时定义的（PHP 5.3.0 新增）。 |\n\n#### PHP 字符串变量\n```php\n<?php\n$txt1=\"Hello world!\";\n$txt2=\"What a nice day!\";\necho $txt1 . \" \" . $txt2;\n?>\n//Output:\"Hello world! What a nice day!\"\n```\nPHP同样有`strlen()`函数（\n`strpos()`——查找字符\n```php\n<?php\necho strpos(\"Hello world!\",\"world\");\n?>\n//Output:\"6\"(7-1)\n```\n#### PHP 数组排序\n\n- `**sort()**` - 对数组进行升序排列\n- `**rsort()**` - 对数组进行降序排列\n- `**asort()**` - 根据关联数组的值，对数组进行升序排列\n- `**ksort()**` - 根据关联数组的键，对数组进行升序排列\n- `**arsort() **`- 根据关联数组的值，对数组进行降序排列\n- `**krsort() **`- 根据关联数组的键，对数组进行降序排列\n#### PHP命名空间\n#### PHP面向对象\n\n---\n\n","source":"_posts/PHPの小笔记.md","raw":"---\ntitle: PHPの小笔记\ndate: 2021-11-20 01:28:11\ntags: \n- PHP \n- language\ncategories: 编程语言\n---\n## 常量与变量\n#### (PHP 是一门弱类型语言:\n```php\n<?php\n$x_int=5;\n$y_int=6;\n$txt_string=\"Hello World!\";\n$float_num=4.0;\n$z=$x+$y;\necho $z;\n?>\n```\n#### PHP的数据类型：\n`String（字符串 `` Integer（整型 `` Float（浮点型）``Boolean（布尔型）`\n`Array（数组）``Object（对象）``NULL（空值）`\n#### PHP的类型比较：\n\n- 松散比较：使用两个等号 **==** 比较，只比较值，不比较类型。\n- 严格比较：用三个等号 **===** 比较，除了比较值，也比较类型。\n#### PHP的常量：\n`bool define ( string $name , mixed $value [, bool $case_insensitive = false ] )`\nEg：`define(\"GREETING\", \"欢迎访问\", true);`//true表示不区分大小写。\n`$GREETING`和`$greeting`都会输出“欢迎访问”。\n#### PHP 变量作用域：\n\n- 全局变量除了**常规定义**，可以在函数内部使用`global`关键词来定义一个全局变量。\n- php支持`static`关键词来定义静态局部变量。\n#### PHP 超级全局变量\nPHP中预定义了几个超级全局变量（superglobals） ，这意味着它们在一个脚本的全部作用域中都可用。 你不需要特别说明，就可以在函数及类中使用。\n**PHP 超级全局变量列表:**\n`$GLOBAL`   `$_SERVER`   `$_REQUEST`   `$_POST`\n`$_GET`   `$_FILES`   `$_ENV`   `$_COOKIE`   `$_SESSION`\n```php\n//Example for $GLOBAL\n<?php \n$x = 75; \n$y = 25;\nfunction addition() \n{ \n    $GLOBALS['z'] = $GLOBALS['x'] + $GLOBALS['y']; \n}\naddition(); \necho $z; \n?>\n```\n`$_SERVER `是一个包含了诸如头**信息(header)**、**路径(path)**、以及**脚本位置(script locations)**等等信息的**数组**。这个数组中的项目由 Web 服务器创建。(不能保证每个服务器都提供全部项目)；(以下为表格：)\n\n| $_SERVER['PHP_SELF'] | 当前执行脚本的文件名，与 document root 有关。例如，在地址为 http://example.com/test.php/foo.bar 的脚本中使用 $_SERVER['PHP_SELF'] 将得到 /test.php/foo.bar。__FILE__ 常量包含当前(例如包含)文件的完整路径和文件名。 从 PHP 4.3.0 版本开始，如果 PHP 以命令行模式运行，这个变量将包含脚本名。之前的版本该变量不可用。 |\n| --- | --- |\n| $_SERVER['GATEWAY_INTERFACE'] | 服务器使用的 CGI 规范的版本；例如，\"CGI/1.1\"。 |\n| $_SERVER['SERVER_ADDR'] | 当前运行脚本所在的服务器的 IP 地址。 |\n| $_SERVER['SERVER_NAME'] | 当前运行脚本所在的服务器的主机名。如果脚本运行于虚拟主机中，该名称是由那个虚拟主机所设置的值决定。(如: www.runoob.com) |\n| $_SERVER['SERVER_SOFTWARE'] | 服务器标识字符串，在响应请求时的头信息中给出。 (如：Apache/2.2.24) |\n| $_SERVER['SERVER_PROTOCOL'] | 请求页面时通信协议的名称和版本。例如，\"HTTP/1.0\"。 |\n| $_SERVER['REQUEST_METHOD'] | 访问页面使用的请求方法；例如，\"GET\", \"HEAD\"，\"POST\"，\"PUT\"。 |\n| $_SERVER['REQUEST_TIME'] | 请求开始时的时间戳。从 PHP 5.1.0 起可用。 (如：1377687496) |\n| $_SERVER['QUERY_STRING'] | query string（查询字符串），如果有的话，通过它进行页面访问。 |\n| $_SERVER['HTTP_ACCEPT'] | 当前请求头中 Accept: 项的内容，如果存在的话。 |\n| $_SERVER['HTTP_ACCEPT_CHARSET'] | 当前请求头中 Accept-Charset: 项的内容，如果存在的话。例如：\"iso-8859-1,*,utf-8\"。 |\n| $_SERVER['HTTP_HOST'] | 当前请求头中 Host: 项的内容，如果存在的话。 |\n| $_SERVER['HTTP_REFERER'] | 引导用户代理到当前页的前一页的地址（如果存在）。由 user agent 设置决定。并不是所有的用户代理都会设置该项，有的还提供了修改 HTTP_REFERER 的功能。简言之，该值并不可信。) |\n| $_SERVER['HTTPS'] | 如果脚本是通过 HTTPS 协议被访问，则被设为一个非空的值。 |\n| $_SERVER['REMOTE_ADDR'] | 浏览当前页面的用户的 IP 地址。 |\n| $_SERVER['REMOTE_HOST'] | 浏览当前页面的用户的主机名。DNS 反向解析不依赖于用户的 REMOTE_ADDR。 |\n| $_SERVER['REMOTE_PORT'] | 用户机器上连接到 Web 服务器所使用的端口号。 |\n| $_SERVER['SCRIPT_FILENAME'] | 当前执行脚本的绝对路径。 |\n| $_SERVER['SERVER_ADMIN'] | 该值指明了 Apache 服务器配置文件中的 SERVER_ADMIN 参数。如果脚本运行在一个虚拟主机上，则该值是那个虚拟主机的值。(如：someone@runoob.com) |\n| $_SERVER['SERVER_PORT'] | Web 服务器使用的端口。默认值为 \"80\"。如果使用 SSL 安全连接，则这个值为用户设置的 HTTP 端口。 |\n| $_SERVER['SERVER_SIGNATURE'] | 包含了服务器版本和虚拟主机名的字符串。 |\n| $_SERVER['PATH_TRANSLATED'] | 当前脚本所在文件系统（非文档根目录）的基本路径。这是在服务器进行虚拟到真实路径的映像后的结果。 |\n| $_SERVER['SCRIPT_NAME'] | 包含当前脚本的路径。这在页面需要指向自己时非常有用。__FILE__ 常量包含当前脚本(例如包含文件)的完整路径和文件名。 |\n| $_SERVER['SCRIPT_URI'] | URI 用来指定要访问的页面。例如 \"/index.html\"。 |\n\n#### PHP 魔术常量\n| **__LINE__** | 文件中的当前行号。 |\n| --- | --- |\n| **__FILE__** | 文件的完整路径和文件名。如果用在被包含文件中，则返回被包含的文件名。\n自 PHP 4.0.2 起，__FILE__ 总是包含一个绝对路径（如果是符号连接，则是解析后的绝对路径），而在此之前的版本有时会包含一个相对路径。\n实例: |\n| **__DIR__** | 文件所在的目录。如果用在被包括文件中，则返回被包括的文件所在的目录。\n它等价于 dirname(__FILE__)。除非是根目录，否则目录中名不包括末尾的斜杠。（PHP 5.3.0中新增） |\n| **__FUNCTION__** |  起本常量返回该函数被定义时的名字 |\n| **__CLASS__** | 自 PHP 5 起本常量返回该类被定义时的名字（区分大小写）。 |\n| **__TRAIT__** | ???? |\n| **__METHOD__** | 返回该方法被定义时的名字（区分大小写）。PHP 5.0.0 新加 |\n| **__NAMESPACE__** | 当前命名空间的名称（区分大小写）。此常量是在编译时定义的（PHP 5.3.0 新增）。 |\n\n#### PHP 字符串变量\n```php\n<?php\n$txt1=\"Hello world!\";\n$txt2=\"What a nice day!\";\necho $txt1 . \" \" . $txt2;\n?>\n//Output:\"Hello world! What a nice day!\"\n```\nPHP同样有`strlen()`函数（\n`strpos()`——查找字符\n```php\n<?php\necho strpos(\"Hello world!\",\"world\");\n?>\n//Output:\"6\"(7-1)\n```\n#### PHP 数组排序\n\n- `**sort()**` - 对数组进行升序排列\n- `**rsort()**` - 对数组进行降序排列\n- `**asort()**` - 根据关联数组的值，对数组进行升序排列\n- `**ksort()**` - 根据关联数组的键，对数组进行升序排列\n- `**arsort() **`- 根据关联数组的值，对数组进行降序排列\n- `**krsort() **`- 根据关联数组的键，对数组进行降序排列\n#### PHP命名空间\n#### PHP面向对象\n\n---\n\n","slug":"PHPの小笔记","published":1,"updated":"2021-12-19T06:36:13.322Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxcz8ry00007f8v0hfglaqbr","content":"<h2 id=\"常量与变量\"><a href=\"#常量与变量\" class=\"headerlink\" title=\"常量与变量\"></a>常量与变量</h2><h4 id=\"PHP-是一门弱类型语言\"><a href=\"#PHP-是一门弱类型语言\" class=\"headerlink\" title=\"(PHP 是一门弱类型语言:\"></a>(PHP 是一门弱类型语言:</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><br><span class=\"hljs-variable\">$x_int</span>=<span class=\"hljs-number\">5</span>;<br><span class=\"hljs-variable\">$y_int</span>=<span class=\"hljs-number\">6</span>;<br><span class=\"hljs-variable\">$txt_string</span>=<span class=\"hljs-string\">&quot;Hello World!&quot;</span>;<br><span class=\"hljs-variable\">$float_num</span>=<span class=\"hljs-number\">4.0</span>;<br><span class=\"hljs-variable\">$z</span>=<span class=\"hljs-variable\">$x</span>+<span class=\"hljs-variable\">$y</span>;<br><span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$z</span>;<br><span class=\"hljs-meta\">?&gt;</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"PHP的数据类型：\"><a href=\"#PHP的数据类型：\" class=\"headerlink\" title=\"PHP的数据类型：\"></a>PHP的数据类型：</h4><p><code>String（字符串 `` Integer（整型 `` Float（浮点型）``Boolean（布尔型）</code><br><code>Array（数组）``Object（对象）``NULL（空值）</code></p>\n<h4 id=\"PHP的类型比较：\"><a href=\"#PHP的类型比较：\" class=\"headerlink\" title=\"PHP的类型比较：\"></a>PHP的类型比较：</h4><ul>\n<li><p>松散比较：使用两个等号 <strong>==</strong> 比较，只比较值，不比较类型。</p>\n</li>\n<li><p>严格比较：用三个等号 <strong>===</strong> 比较，除了比较值，也比较类型。</p>\n<h4 id=\"PHP的常量：\"><a href=\"#PHP的常量：\" class=\"headerlink\" title=\"PHP的常量：\"></a>PHP的常量：</h4><p><code>bool define ( string $name , mixed $value [, bool $case_insensitive = false ] )</code><br>Eg：<code>define(&quot;GREETING&quot;, &quot;欢迎访问&quot;, true);</code>//true表示不区分大小写。<br><code>$GREETING</code>和<code>$greeting</code>都会输出“欢迎访问”。</p>\n<h4 id=\"PHP-变量作用域：\"><a href=\"#PHP-变量作用域：\" class=\"headerlink\" title=\"PHP 变量作用域：\"></a>PHP 变量作用域：</h4></li>\n<li><p>全局变量除了<strong>常规定义</strong>，可以在函数内部使用<code>global</code>关键词来定义一个全局变量。</p>\n</li>\n<li><p>php支持<code>static</code>关键词来定义静态局部变量。</p>\n<h4 id=\"PHP-超级全局变量\"><a href=\"#PHP-超级全局变量\" class=\"headerlink\" title=\"PHP 超级全局变量\"></a>PHP 超级全局变量</h4><p>PHP中预定义了几个超级全局变量（superglobals） ，这意味着它们在一个脚本的全部作用域中都可用。 你不需要特别说明，就可以在函数及类中使用。</p>\n</li>\n</ul>\n<p><strong>PHP 超级全局变量列表:</strong><br><code>$GLOBAL</code>   <code>$_SERVER</code>   <code>$_REQUEST</code>   <code>$_POST</code><br><code>$_GET</code>   <code>$_FILES</code>   <code>$_ENV</code>   <code>$_COOKIE</code>   <code>$_SESSION</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-comment\">//Example for $GLOBAL</span><br><span class=\"hljs-meta\">&lt;?php</span> <br><span class=\"hljs-variable\">$x</span> = <span class=\"hljs-number\">75</span>; <br><span class=\"hljs-variable\">$y</span> = <span class=\"hljs-number\">25</span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">addition</span>(<span class=\"hljs-params\"></span>) </span><br><span class=\"hljs-function\"></span>&#123; <br>    <span class=\"hljs-variable\">$GLOBALS</span>[<span class=\"hljs-string\">&#x27;z&#x27;</span>] = <span class=\"hljs-variable\">$GLOBALS</span>[<span class=\"hljs-string\">&#x27;x&#x27;</span>] + <span class=\"hljs-variable\">$GLOBALS</span>[<span class=\"hljs-string\">&#x27;y&#x27;</span>]; <br>&#125;<br>addition(); <br><span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$z</span>; <br><span class=\"hljs-meta\">?&gt;</span><br></code></pre></td></tr></table></figure>\n<p><code>$_SERVER </code>是一个包含了诸如头<strong>信息(header)<strong>、</strong>路径(path)<strong>、以及</strong>脚本位置(script locations)<strong>等等信息的</strong>数组</strong>。这个数组中的项目由 Web 服务器创建。(不能保证每个服务器都提供全部项目)；(以下为表格：)</p>\n<table>\n<thead>\n<tr>\n<th>$_SERVER[‘PHP_SELF’]</th>\n<th>当前执行脚本的文件名，与 document root 有关。例如，在地址为 <a href=\"http://example.com/test.php/foo.bar\">http://example.com/test.php/foo.bar</a> 的脚本中使用 $<em>SERVER[‘PHP_SELF’] 将得到 /test.php/foo.bar。__FILE</em>_ 常量包含当前(例如包含)文件的完整路径和文件名。 从 PHP 4.3.0 版本开始，如果 PHP 以命令行模式运行，这个变量将包含脚本名。之前的版本该变量不可用。</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$_SERVER[‘GATEWAY_INTERFACE’]</td>\n<td>服务器使用的 CGI 规范的版本；例如，”CGI/1.1”。</td>\n</tr>\n<tr>\n<td>$_SERVER[‘SERVER_ADDR’]</td>\n<td>当前运行脚本所在的服务器的 IP 地址。</td>\n</tr>\n<tr>\n<td>$_SERVER[‘SERVER_NAME’]</td>\n<td>当前运行脚本所在的服务器的主机名。如果脚本运行于虚拟主机中，该名称是由那个虚拟主机所设置的值决定。(如: <a href=\"http://www.runoob.com/\">www.runoob.com</a>)</td>\n</tr>\n<tr>\n<td>$_SERVER[‘SERVER_SOFTWARE’]</td>\n<td>服务器标识字符串，在响应请求时的头信息中给出。 (如：Apache/2.2.24)</td>\n</tr>\n<tr>\n<td>$_SERVER[‘SERVER_PROTOCOL’]</td>\n<td>请求页面时通信协议的名称和版本。例如，”HTTP/1.0”。</td>\n</tr>\n<tr>\n<td>$_SERVER[‘REQUEST_METHOD’]</td>\n<td>访问页面使用的请求方法；例如，”GET”, “HEAD”，”POST”，”PUT”。</td>\n</tr>\n<tr>\n<td>$_SERVER[‘REQUEST_TIME’]</td>\n<td>请求开始时的时间戳。从 PHP 5.1.0 起可用。 (如：1377687496)</td>\n</tr>\n<tr>\n<td>$_SERVER[‘QUERY_STRING’]</td>\n<td>query string（查询字符串），如果有的话，通过它进行页面访问。</td>\n</tr>\n<tr>\n<td>$_SERVER[‘HTTP_ACCEPT’]</td>\n<td>当前请求头中 Accept: 项的内容，如果存在的话。</td>\n</tr>\n<tr>\n<td>$_SERVER[‘HTTP_ACCEPT_CHARSET’]</td>\n<td>当前请求头中 Accept-Charset: 项的内容，如果存在的话。例如：”iso-8859-1,*,utf-8”。</td>\n</tr>\n<tr>\n<td>$_SERVER[‘HTTP_HOST’]</td>\n<td>当前请求头中 Host: 项的内容，如果存在的话。</td>\n</tr>\n<tr>\n<td>$_SERVER[‘HTTP_REFERER’]</td>\n<td>引导用户代理到当前页的前一页的地址（如果存在）。由 user agent 设置决定。并不是所有的用户代理都会设置该项，有的还提供了修改 HTTP_REFERER 的功能。简言之，该值并不可信。)</td>\n</tr>\n<tr>\n<td>$_SERVER[‘HTTPS’]</td>\n<td>如果脚本是通过 HTTPS 协议被访问，则被设为一个非空的值。</td>\n</tr>\n<tr>\n<td>$_SERVER[‘REMOTE_ADDR’]</td>\n<td>浏览当前页面的用户的 IP 地址。</td>\n</tr>\n<tr>\n<td>$_SERVER[‘REMOTE_HOST’]</td>\n<td>浏览当前页面的用户的主机名。DNS 反向解析不依赖于用户的 REMOTE_ADDR。</td>\n</tr>\n<tr>\n<td>$_SERVER[‘REMOTE_PORT’]</td>\n<td>用户机器上连接到 Web 服务器所使用的端口号。</td>\n</tr>\n<tr>\n<td>$_SERVER[‘SCRIPT_FILENAME’]</td>\n<td>当前执行脚本的绝对路径。</td>\n</tr>\n<tr>\n<td>$_SERVER[‘SERVER_ADMIN’]</td>\n<td>该值指明了 Apache 服务器配置文件中的 SERVER_ADMIN 参数。如果脚本运行在一个虚拟主机上，则该值是那个虚拟主机的值。(如：<a href=\"mailto:&#115;&#x6f;&#x6d;&#101;&#x6f;&#x6e;&#101;&#x40;&#114;&#117;&#110;&#111;&#x6f;&#x62;&#x2e;&#99;&#111;&#x6d;\">&#115;&#x6f;&#x6d;&#101;&#x6f;&#x6e;&#101;&#x40;&#114;&#117;&#110;&#111;&#x6f;&#x62;&#x2e;&#99;&#111;&#x6d;</a>)</td>\n</tr>\n<tr>\n<td>$_SERVER[‘SERVER_PORT’]</td>\n<td>Web 服务器使用的端口。默认值为 “80”。如果使用 SSL 安全连接，则这个值为用户设置的 HTTP 端口。</td>\n</tr>\n<tr>\n<td>$_SERVER[‘SERVER_SIGNATURE’]</td>\n<td>包含了服务器版本和虚拟主机名的字符串。</td>\n</tr>\n<tr>\n<td>$_SERVER[‘PATH_TRANSLATED’]</td>\n<td>当前脚本所在文件系统（非文档根目录）的基本路径。这是在服务器进行虚拟到真实路径的映像后的结果。</td>\n</tr>\n<tr>\n<td>$_SERVER[‘SCRIPT_NAME’]</td>\n<td>包含当前脚本的路径。这在页面需要指向自己时非常有用。<strong>FILE</strong> 常量包含当前脚本(例如包含文件)的完整路径和文件名。</td>\n</tr>\n<tr>\n<td>$_SERVER[‘SCRIPT_URI’]</td>\n<td>URI 用来指定要访问的页面。例如 “/index.html”。</td>\n</tr>\n</tbody></table>\n<h4 id=\"PHP-魔术常量\"><a href=\"#PHP-魔术常量\" class=\"headerlink\" title=\"PHP 魔术常量\"></a>PHP 魔术常量</h4><table>\n<thead>\n<tr>\n<th><strong><strong>LINE</strong></strong></th>\n<th>文件中的当前行号。</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong><strong>FILE</strong></strong></td>\n<td>文件的完整路径和文件名。如果用在被包含文件中，则返回被包含的文件名。</td>\n</tr>\n<tr>\n<td>自 PHP 4.0.2 起，<strong>FILE</strong> 总是包含一个绝对路径（如果是符号连接，则是解析后的绝对路径），而在此之前的版本有时会包含一个相对路径。</td>\n<td></td>\n</tr>\n<tr>\n<td>实例:</td>\n<td></td>\n</tr>\n<tr>\n<td><strong><strong>DIR</strong></strong></td>\n<td>文件所在的目录。如果用在被包括文件中，则返回被包括的文件所在的目录。</td>\n</tr>\n<tr>\n<td>它等价于 dirname(<strong>FILE</strong>)。除非是根目录，否则目录中名不包括末尾的斜杠。（PHP 5.3.0中新增）</td>\n<td></td>\n</tr>\n<tr>\n<td><strong><strong>FUNCTION</strong></strong></td>\n<td>起本常量返回该函数被定义时的名字</td>\n</tr>\n<tr>\n<td><strong><strong>CLASS</strong></strong></td>\n<td>自 PHP 5 起本常量返回该类被定义时的名字（区分大小写）。</td>\n</tr>\n<tr>\n<td><strong><strong>TRAIT</strong></strong></td>\n<td>????</td>\n</tr>\n<tr>\n<td><strong><strong>METHOD</strong></strong></td>\n<td>返回该方法被定义时的名字（区分大小写）。PHP 5.0.0 新加</td>\n</tr>\n<tr>\n<td><strong><strong>NAMESPACE</strong></strong></td>\n<td>当前命名空间的名称（区分大小写）。此常量是在编译时定义的（PHP 5.3.0 新增）。</td>\n</tr>\n</tbody></table>\n<h4 id=\"PHP-字符串变量\"><a href=\"#PHP-字符串变量\" class=\"headerlink\" title=\"PHP 字符串变量\"></a>PHP 字符串变量</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><br><span class=\"hljs-variable\">$txt1</span>=<span class=\"hljs-string\">&quot;Hello world!&quot;</span>;<br><span class=\"hljs-variable\">$txt2</span>=<span class=\"hljs-string\">&quot;What a nice day!&quot;</span>;<br><span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$txt1</span> . <span class=\"hljs-string\">&quot; &quot;</span> . <span class=\"hljs-variable\">$txt2</span>;<br><span class=\"hljs-meta\">?&gt;</span><br><span class=\"hljs-comment\">//Output:&quot;Hello world! What a nice day!&quot;</span><br></code></pre></td></tr></table></figure>\n<p>PHP同样有<code>strlen()</code>函数（<br><code>strpos()</code>——查找字符</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><br><span class=\"hljs-keyword\">echo</span> strpos(<span class=\"hljs-string\">&quot;Hello world!&quot;</span>,<span class=\"hljs-string\">&quot;world&quot;</span>);<br><span class=\"hljs-meta\">?&gt;</span><br><span class=\"hljs-comment\">//Output:&quot;6&quot;(7-1)</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"PHP-数组排序\"><a href=\"#PHP-数组排序\" class=\"headerlink\" title=\"PHP 数组排序\"></a>PHP 数组排序</h4><ul>\n<li><code>**sort()**</code> - 对数组进行升序排列</li>\n<li><code>**rsort()**</code> - 对数组进行降序排列</li>\n<li><code>**asort()**</code> - 根据关联数组的值，对数组进行升序排列</li>\n<li><code>**ksort()**</code> - 根据关联数组的键，对数组进行升序排列</li>\n<li><code>**arsort() **</code>- 根据关联数组的值，对数组进行降序排列</li>\n<li><code>**krsort() **</code>- 根据关联数组的键，对数组进行降序排列<h4 id=\"PHP命名空间\"><a href=\"#PHP命名空间\" class=\"headerlink\" title=\"PHP命名空间\"></a>PHP命名空间</h4><h4 id=\"PHP面向对象\"><a href=\"#PHP面向对象\" class=\"headerlink\" title=\"PHP面向对象\"></a>PHP面向对象</h4></li>\n</ul>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"常量与变量\"><a href=\"#常量与变量\" class=\"headerlink\" title=\"常量与变量\"></a>常量与变量</h2><h4 id=\"PHP-是一门弱类型语言\"><a href=\"#PHP-是一门弱类型语言\" class=\"headerlink\" title=\"(PHP 是一门弱类型语言:\"></a>(PHP 是一门弱类型语言:</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><br><span class=\"hljs-variable\">$x_int</span>=<span class=\"hljs-number\">5</span>;<br><span class=\"hljs-variable\">$y_int</span>=<span class=\"hljs-number\">6</span>;<br><span class=\"hljs-variable\">$txt_string</span>=<span class=\"hljs-string\">&quot;Hello World!&quot;</span>;<br><span class=\"hljs-variable\">$float_num</span>=<span class=\"hljs-number\">4.0</span>;<br><span class=\"hljs-variable\">$z</span>=<span class=\"hljs-variable\">$x</span>+<span class=\"hljs-variable\">$y</span>;<br><span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$z</span>;<br><span class=\"hljs-meta\">?&gt;</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"PHP的数据类型：\"><a href=\"#PHP的数据类型：\" class=\"headerlink\" title=\"PHP的数据类型：\"></a>PHP的数据类型：</h4><p><code>String（字符串 `` Integer（整型 `` Float（浮点型）``Boolean（布尔型）</code><br><code>Array（数组）``Object（对象）``NULL（空值）</code></p>\n<h4 id=\"PHP的类型比较：\"><a href=\"#PHP的类型比较：\" class=\"headerlink\" title=\"PHP的类型比较：\"></a>PHP的类型比较：</h4><ul>\n<li><p>松散比较：使用两个等号 <strong>==</strong> 比较，只比较值，不比较类型。</p>\n</li>\n<li><p>严格比较：用三个等号 <strong>===</strong> 比较，除了比较值，也比较类型。</p>\n<h4 id=\"PHP的常量：\"><a href=\"#PHP的常量：\" class=\"headerlink\" title=\"PHP的常量：\"></a>PHP的常量：</h4><p><code>bool define ( string $name , mixed $value [, bool $case_insensitive = false ] )</code><br>Eg：<code>define(&quot;GREETING&quot;, &quot;欢迎访问&quot;, true);</code>//true表示不区分大小写。<br><code>$GREETING</code>和<code>$greeting</code>都会输出“欢迎访问”。</p>\n<h4 id=\"PHP-变量作用域：\"><a href=\"#PHP-变量作用域：\" class=\"headerlink\" title=\"PHP 变量作用域：\"></a>PHP 变量作用域：</h4></li>\n<li><p>全局变量除了<strong>常规定义</strong>，可以在函数内部使用<code>global</code>关键词来定义一个全局变量。</p>\n</li>\n<li><p>php支持<code>static</code>关键词来定义静态局部变量。</p>\n<h4 id=\"PHP-超级全局变量\"><a href=\"#PHP-超级全局变量\" class=\"headerlink\" title=\"PHP 超级全局变量\"></a>PHP 超级全局变量</h4><p>PHP中预定义了几个超级全局变量（superglobals） ，这意味着它们在一个脚本的全部作用域中都可用。 你不需要特别说明，就可以在函数及类中使用。</p>\n</li>\n</ul>\n<p><strong>PHP 超级全局变量列表:</strong><br><code>$GLOBAL</code>   <code>$_SERVER</code>   <code>$_REQUEST</code>   <code>$_POST</code><br><code>$_GET</code>   <code>$_FILES</code>   <code>$_ENV</code>   <code>$_COOKIE</code>   <code>$_SESSION</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-comment\">//Example for $GLOBAL</span><br><span class=\"hljs-meta\">&lt;?php</span> <br><span class=\"hljs-variable\">$x</span> = <span class=\"hljs-number\">75</span>; <br><span class=\"hljs-variable\">$y</span> = <span class=\"hljs-number\">25</span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">addition</span>(<span class=\"hljs-params\"></span>) </span><br><span class=\"hljs-function\"></span>&#123; <br>    <span class=\"hljs-variable\">$GLOBALS</span>[<span class=\"hljs-string\">&#x27;z&#x27;</span>] = <span class=\"hljs-variable\">$GLOBALS</span>[<span class=\"hljs-string\">&#x27;x&#x27;</span>] + <span class=\"hljs-variable\">$GLOBALS</span>[<span class=\"hljs-string\">&#x27;y&#x27;</span>]; <br>&#125;<br>addition(); <br><span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$z</span>; <br><span class=\"hljs-meta\">?&gt;</span><br></code></pre></td></tr></table></figure>\n<p><code>$_SERVER </code>是一个包含了诸如头<strong>信息(header)<strong>、</strong>路径(path)<strong>、以及</strong>脚本位置(script locations)<strong>等等信息的</strong>数组</strong>。这个数组中的项目由 Web 服务器创建。(不能保证每个服务器都提供全部项目)；(以下为表格：)</p>\n<table>\n<thead>\n<tr>\n<th>$_SERVER[‘PHP_SELF’]</th>\n<th>当前执行脚本的文件名，与 document root 有关。例如，在地址为 <a href=\"http://example.com/test.php/foo.bar\">http://example.com/test.php/foo.bar</a> 的脚本中使用 $<em>SERVER[‘PHP_SELF’] 将得到 /test.php/foo.bar。__FILE</em>_ 常量包含当前(例如包含)文件的完整路径和文件名。 从 PHP 4.3.0 版本开始，如果 PHP 以命令行模式运行，这个变量将包含脚本名。之前的版本该变量不可用。</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$_SERVER[‘GATEWAY_INTERFACE’]</td>\n<td>服务器使用的 CGI 规范的版本；例如，”CGI/1.1”。</td>\n</tr>\n<tr>\n<td>$_SERVER[‘SERVER_ADDR’]</td>\n<td>当前运行脚本所在的服务器的 IP 地址。</td>\n</tr>\n<tr>\n<td>$_SERVER[‘SERVER_NAME’]</td>\n<td>当前运行脚本所在的服务器的主机名。如果脚本运行于虚拟主机中，该名称是由那个虚拟主机所设置的值决定。(如: <a href=\"http://www.runoob.com/\">www.runoob.com</a>)</td>\n</tr>\n<tr>\n<td>$_SERVER[‘SERVER_SOFTWARE’]</td>\n<td>服务器标识字符串，在响应请求时的头信息中给出。 (如：Apache/2.2.24)</td>\n</tr>\n<tr>\n<td>$_SERVER[‘SERVER_PROTOCOL’]</td>\n<td>请求页面时通信协议的名称和版本。例如，”HTTP/1.0”。</td>\n</tr>\n<tr>\n<td>$_SERVER[‘REQUEST_METHOD’]</td>\n<td>访问页面使用的请求方法；例如，”GET”, “HEAD”，”POST”，”PUT”。</td>\n</tr>\n<tr>\n<td>$_SERVER[‘REQUEST_TIME’]</td>\n<td>请求开始时的时间戳。从 PHP 5.1.0 起可用。 (如：1377687496)</td>\n</tr>\n<tr>\n<td>$_SERVER[‘QUERY_STRING’]</td>\n<td>query string（查询字符串），如果有的话，通过它进行页面访问。</td>\n</tr>\n<tr>\n<td>$_SERVER[‘HTTP_ACCEPT’]</td>\n<td>当前请求头中 Accept: 项的内容，如果存在的话。</td>\n</tr>\n<tr>\n<td>$_SERVER[‘HTTP_ACCEPT_CHARSET’]</td>\n<td>当前请求头中 Accept-Charset: 项的内容，如果存在的话。例如：”iso-8859-1,*,utf-8”。</td>\n</tr>\n<tr>\n<td>$_SERVER[‘HTTP_HOST’]</td>\n<td>当前请求头中 Host: 项的内容，如果存在的话。</td>\n</tr>\n<tr>\n<td>$_SERVER[‘HTTP_REFERER’]</td>\n<td>引导用户代理到当前页的前一页的地址（如果存在）。由 user agent 设置决定。并不是所有的用户代理都会设置该项，有的还提供了修改 HTTP_REFERER 的功能。简言之，该值并不可信。)</td>\n</tr>\n<tr>\n<td>$_SERVER[‘HTTPS’]</td>\n<td>如果脚本是通过 HTTPS 协议被访问，则被设为一个非空的值。</td>\n</tr>\n<tr>\n<td>$_SERVER[‘REMOTE_ADDR’]</td>\n<td>浏览当前页面的用户的 IP 地址。</td>\n</tr>\n<tr>\n<td>$_SERVER[‘REMOTE_HOST’]</td>\n<td>浏览当前页面的用户的主机名。DNS 反向解析不依赖于用户的 REMOTE_ADDR。</td>\n</tr>\n<tr>\n<td>$_SERVER[‘REMOTE_PORT’]</td>\n<td>用户机器上连接到 Web 服务器所使用的端口号。</td>\n</tr>\n<tr>\n<td>$_SERVER[‘SCRIPT_FILENAME’]</td>\n<td>当前执行脚本的绝对路径。</td>\n</tr>\n<tr>\n<td>$_SERVER[‘SERVER_ADMIN’]</td>\n<td>该值指明了 Apache 服务器配置文件中的 SERVER_ADMIN 参数。如果脚本运行在一个虚拟主机上，则该值是那个虚拟主机的值。(如：<a href=\"mailto:&#115;&#x6f;&#x6d;&#101;&#x6f;&#x6e;&#101;&#x40;&#114;&#117;&#110;&#111;&#x6f;&#x62;&#x2e;&#99;&#111;&#x6d;\">&#115;&#x6f;&#x6d;&#101;&#x6f;&#x6e;&#101;&#x40;&#114;&#117;&#110;&#111;&#x6f;&#x62;&#x2e;&#99;&#111;&#x6d;</a>)</td>\n</tr>\n<tr>\n<td>$_SERVER[‘SERVER_PORT’]</td>\n<td>Web 服务器使用的端口。默认值为 “80”。如果使用 SSL 安全连接，则这个值为用户设置的 HTTP 端口。</td>\n</tr>\n<tr>\n<td>$_SERVER[‘SERVER_SIGNATURE’]</td>\n<td>包含了服务器版本和虚拟主机名的字符串。</td>\n</tr>\n<tr>\n<td>$_SERVER[‘PATH_TRANSLATED’]</td>\n<td>当前脚本所在文件系统（非文档根目录）的基本路径。这是在服务器进行虚拟到真实路径的映像后的结果。</td>\n</tr>\n<tr>\n<td>$_SERVER[‘SCRIPT_NAME’]</td>\n<td>包含当前脚本的路径。这在页面需要指向自己时非常有用。<strong>FILE</strong> 常量包含当前脚本(例如包含文件)的完整路径和文件名。</td>\n</tr>\n<tr>\n<td>$_SERVER[‘SCRIPT_URI’]</td>\n<td>URI 用来指定要访问的页面。例如 “/index.html”。</td>\n</tr>\n</tbody></table>\n<h4 id=\"PHP-魔术常量\"><a href=\"#PHP-魔术常量\" class=\"headerlink\" title=\"PHP 魔术常量\"></a>PHP 魔术常量</h4><table>\n<thead>\n<tr>\n<th><strong><strong>LINE</strong></strong></th>\n<th>文件中的当前行号。</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong><strong>FILE</strong></strong></td>\n<td>文件的完整路径和文件名。如果用在被包含文件中，则返回被包含的文件名。</td>\n</tr>\n<tr>\n<td>自 PHP 4.0.2 起，<strong>FILE</strong> 总是包含一个绝对路径（如果是符号连接，则是解析后的绝对路径），而在此之前的版本有时会包含一个相对路径。</td>\n<td></td>\n</tr>\n<tr>\n<td>实例:</td>\n<td></td>\n</tr>\n<tr>\n<td><strong><strong>DIR</strong></strong></td>\n<td>文件所在的目录。如果用在被包括文件中，则返回被包括的文件所在的目录。</td>\n</tr>\n<tr>\n<td>它等价于 dirname(<strong>FILE</strong>)。除非是根目录，否则目录中名不包括末尾的斜杠。（PHP 5.3.0中新增）</td>\n<td></td>\n</tr>\n<tr>\n<td><strong><strong>FUNCTION</strong></strong></td>\n<td>起本常量返回该函数被定义时的名字</td>\n</tr>\n<tr>\n<td><strong><strong>CLASS</strong></strong></td>\n<td>自 PHP 5 起本常量返回该类被定义时的名字（区分大小写）。</td>\n</tr>\n<tr>\n<td><strong><strong>TRAIT</strong></strong></td>\n<td>????</td>\n</tr>\n<tr>\n<td><strong><strong>METHOD</strong></strong></td>\n<td>返回该方法被定义时的名字（区分大小写）。PHP 5.0.0 新加</td>\n</tr>\n<tr>\n<td><strong><strong>NAMESPACE</strong></strong></td>\n<td>当前命名空间的名称（区分大小写）。此常量是在编译时定义的（PHP 5.3.0 新增）。</td>\n</tr>\n</tbody></table>\n<h4 id=\"PHP-字符串变量\"><a href=\"#PHP-字符串变量\" class=\"headerlink\" title=\"PHP 字符串变量\"></a>PHP 字符串变量</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><br><span class=\"hljs-variable\">$txt1</span>=<span class=\"hljs-string\">&quot;Hello world!&quot;</span>;<br><span class=\"hljs-variable\">$txt2</span>=<span class=\"hljs-string\">&quot;What a nice day!&quot;</span>;<br><span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$txt1</span> . <span class=\"hljs-string\">&quot; &quot;</span> . <span class=\"hljs-variable\">$txt2</span>;<br><span class=\"hljs-meta\">?&gt;</span><br><span class=\"hljs-comment\">//Output:&quot;Hello world! What a nice day!&quot;</span><br></code></pre></td></tr></table></figure>\n<p>PHP同样有<code>strlen()</code>函数（<br><code>strpos()</code>——查找字符</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><br><span class=\"hljs-keyword\">echo</span> strpos(<span class=\"hljs-string\">&quot;Hello world!&quot;</span>,<span class=\"hljs-string\">&quot;world&quot;</span>);<br><span class=\"hljs-meta\">?&gt;</span><br><span class=\"hljs-comment\">//Output:&quot;6&quot;(7-1)</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"PHP-数组排序\"><a href=\"#PHP-数组排序\" class=\"headerlink\" title=\"PHP 数组排序\"></a>PHP 数组排序</h4><ul>\n<li><code>**sort()**</code> - 对数组进行升序排列</li>\n<li><code>**rsort()**</code> - 对数组进行降序排列</li>\n<li><code>**asort()**</code> - 根据关联数组的值，对数组进行升序排列</li>\n<li><code>**ksort()**</code> - 根据关联数组的键，对数组进行升序排列</li>\n<li><code>**arsort() **</code>- 根据关联数组的值，对数组进行降序排列</li>\n<li><code>**krsort() **</code>- 根据关联数组的键，对数组进行降序排列<h4 id=\"PHP命名空间\"><a href=\"#PHP命名空间\" class=\"headerlink\" title=\"PHP命名空间\"></a>PHP命名空间</h4><h4 id=\"PHP面向对象\"><a href=\"#PHP面向对象\" class=\"headerlink\" title=\"PHP面向对象\"></a>PHP面向对象</h4></li>\n</ul>\n<hr>\n"},{"title":"bit_operation","date":"2021-11-19T17:51:38.000Z","_content":"# 位运算\n## &（and,和 运算,二元）\nand运算通常用于二进制的取位操作，例如一个数 and 1的结果就是取二进制的最末位。这可以用来判断一个整数的奇偶，二进制的最末位为0表示该数为偶数，最末位为1表示该数为奇数（Eg：快速奇偶判断）\n```c\n#include<stdio.h>\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    n&1?printf(\"odd\"):printf(\"even\");\n}\n```\n其原理为“相同位的两个数字都为1，则为1(True)；若有一个不为1，则为0(False)”\n举个栗子：\n**20：10100        20:10100**\n**01：00001        04:00100**\n**------------        -----------**\n**re：00000         re:00100**\n**10=  0               10= 4**\n##  |（or,或 运算，二元）\n（相同位只要一个为1即为1）\nor运算通常用于二进制特定位上的无条件赋值，例如一个数or 1的结果就是把二进制最末位强行变成1。\n在这里你会发现一个有意思的东西：在某些情况(其实就是**不进位**的情况下)下a+b 和 a|b是等价的\n**153:10011001**\n**102:01100110**\n**|   =255**\n如果需要把二进制最末位变成0，对这个数or 1之后再减一就可以了，其实际意义就是把这个数强行变成最接近的偶数。\n```javascript\nvar a = 103;\nvar c = (a | 1) - 1;//注意优先级\nconsole.log(c);\n```\n**控制台输出：102**\n**103：1100111**\n**| 1  :  1100111**\n**-1   :   1100110**\n## xor，异或 运算 ^（二元）\n按位异或运算, 对等长二进制模式按位或二进制数的每一位执行逻辑按位异或操作，操作的结果是如果某位不同则该位为1, 否则该位为0.（相同位不同则为1，相同则为0）\n**00101**\n**11100**\n**-------**\n**11001**\n> xor运算的逆运算是它本身，也就是说两次异或同一个数最后结果不变，即(a xor b) xor b = a。xor运算可以用于简单的加密，比如我想对我MM说1314520，但怕别人知道，于是双方约定拿我的生日19880516作为密钥。1314520 xor 19880516 = 20665500，我就把20665500告诉MM。MM再次计算20665500 xor 19880516的值，得到1314520。\n\n**在不进位的情况下，xor,or的运行结果相同~**\n```c\nvar a = 2;\nvar b = 153 ^ 102;\nconsole.log(b);\n//输出225\n```\n## not，非 运算 ~（一元）\nnot运算的定义是把内存中的0和1全部取反。\n使用not运算时要格外小心，你需要注意整数类型有没有符号。如果not的对象是无符号整数（不能表示负数），那么得到的值就是它与该类型上界的差，因为无符号类型的数是用00到$FFFF依次表示的。\n下面程序返回65535-100=65435:\n```c\n#include<stdio.h>\nint main()\n{\n    unsigned short a=100;\n    a=~a;\n    printf(\"%d\\n\",a);\n    return 0;\n}\n```\n**~的使用技巧：**\n记得 **!=EOF**吗，关于代码\"`if(scanf(\"%d\",n)!=EOF)`\",它可以写成\"`if(~scanf(\"%d\",n))`\"\n因为scanf如果没有输入值就是返回**_-1_**，对于-1取反，则为0,**0 ==  false**\n这里注意，布尔类型和数字类型的非运算符号不一样，布尔类型是!，数字类型是~。\n## shr，右移 运算 >>（二元）\na shr b表示二进制右移b位（去掉末b位）\n举个栗子：\n运行这段代码：\n```javascript\nvar b = 985;\nb >>= 1;\nconsole.log(b);\n```\n**控制台会输出：492，原理如下**\n**985：1111011001**\n**>>1**\n**492： 0111101100**\n**可以看到，985的二进制想右位移1位，高位用0补齐了；**\n_ **&与>>的运用**_\n可用来取**整数n**的**二进制数**的第**k**位数\n**_n>>k&1_**\n```javascript\nvar n = 211;\nvar w = n >> 4 & 1;\nconsole.log(w);\n```\n**控制台会输出：1，即是211二进制表示的第4位数**\n**原理解析：**\n**211： 11010011**\n**>>4    00001101**\n**&1      00000001**\n**re10 ：1**\n## shl，左移 运算 <<（二元）\n同理，我们的<<运算符则是向左移动，通常可以用来快速进行2的幂运算\n这里直接用2的幂运算举例子\n```javascript\nvar a = 2<<4;\nconsole.log(a);\n```\n**控制台会输出：32，也就是2的4+1次幂，为什么是4+1？**\n**原理同>>,下面具体化一下：**\n**02：_0000_10**\n**<<4**\n**32：100000**\n## 无符号右移（二元）\n**无符号右移在C中并不存在，在C中对无符号数进行右移便是无符号右移！**\n**（在其他支持语言中大多为>>>）**\n无符号右移是将二进制数所有位向右移动指定位数，与右移不同，无符号右移空位永远补0。\n例如：`0b10011 >>> 2 = 0b00100[11]`（括号中的数是被裁掉的数）。\n​\n\n# \n**​**\n\n# \n","source":"_posts/bit-operation.md","raw":"---\ntitle: bit_operation\ndate: 2021-11-20 01:51:38\ntags: algorithm\ncategories: 编程语言\n---\n# 位运算\n## &（and,和 运算,二元）\nand运算通常用于二进制的取位操作，例如一个数 and 1的结果就是取二进制的最末位。这可以用来判断一个整数的奇偶，二进制的最末位为0表示该数为偶数，最末位为1表示该数为奇数（Eg：快速奇偶判断）\n```c\n#include<stdio.h>\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    n&1?printf(\"odd\"):printf(\"even\");\n}\n```\n其原理为“相同位的两个数字都为1，则为1(True)；若有一个不为1，则为0(False)”\n举个栗子：\n**20：10100        20:10100**\n**01：00001        04:00100**\n**------------        -----------**\n**re：00000         re:00100**\n**10=  0               10= 4**\n##  |（or,或 运算，二元）\n（相同位只要一个为1即为1）\nor运算通常用于二进制特定位上的无条件赋值，例如一个数or 1的结果就是把二进制最末位强行变成1。\n在这里你会发现一个有意思的东西：在某些情况(其实就是**不进位**的情况下)下a+b 和 a|b是等价的\n**153:10011001**\n**102:01100110**\n**|   =255**\n如果需要把二进制最末位变成0，对这个数or 1之后再减一就可以了，其实际意义就是把这个数强行变成最接近的偶数。\n```javascript\nvar a = 103;\nvar c = (a | 1) - 1;//注意优先级\nconsole.log(c);\n```\n**控制台输出：102**\n**103：1100111**\n**| 1  :  1100111**\n**-1   :   1100110**\n## xor，异或 运算 ^（二元）\n按位异或运算, 对等长二进制模式按位或二进制数的每一位执行逻辑按位异或操作，操作的结果是如果某位不同则该位为1, 否则该位为0.（相同位不同则为1，相同则为0）\n**00101**\n**11100**\n**-------**\n**11001**\n> xor运算的逆运算是它本身，也就是说两次异或同一个数最后结果不变，即(a xor b) xor b = a。xor运算可以用于简单的加密，比如我想对我MM说1314520，但怕别人知道，于是双方约定拿我的生日19880516作为密钥。1314520 xor 19880516 = 20665500，我就把20665500告诉MM。MM再次计算20665500 xor 19880516的值，得到1314520。\n\n**在不进位的情况下，xor,or的运行结果相同~**\n```c\nvar a = 2;\nvar b = 153 ^ 102;\nconsole.log(b);\n//输出225\n```\n## not，非 运算 ~（一元）\nnot运算的定义是把内存中的0和1全部取反。\n使用not运算时要格外小心，你需要注意整数类型有没有符号。如果not的对象是无符号整数（不能表示负数），那么得到的值就是它与该类型上界的差，因为无符号类型的数是用00到$FFFF依次表示的。\n下面程序返回65535-100=65435:\n```c\n#include<stdio.h>\nint main()\n{\n    unsigned short a=100;\n    a=~a;\n    printf(\"%d\\n\",a);\n    return 0;\n}\n```\n**~的使用技巧：**\n记得 **!=EOF**吗，关于代码\"`if(scanf(\"%d\",n)!=EOF)`\",它可以写成\"`if(~scanf(\"%d\",n))`\"\n因为scanf如果没有输入值就是返回**_-1_**，对于-1取反，则为0,**0 ==  false**\n这里注意，布尔类型和数字类型的非运算符号不一样，布尔类型是!，数字类型是~。\n## shr，右移 运算 >>（二元）\na shr b表示二进制右移b位（去掉末b位）\n举个栗子：\n运行这段代码：\n```javascript\nvar b = 985;\nb >>= 1;\nconsole.log(b);\n```\n**控制台会输出：492，原理如下**\n**985：1111011001**\n**>>1**\n**492： 0111101100**\n**可以看到，985的二进制想右位移1位，高位用0补齐了；**\n_ **&与>>的运用**_\n可用来取**整数n**的**二进制数**的第**k**位数\n**_n>>k&1_**\n```javascript\nvar n = 211;\nvar w = n >> 4 & 1;\nconsole.log(w);\n```\n**控制台会输出：1，即是211二进制表示的第4位数**\n**原理解析：**\n**211： 11010011**\n**>>4    00001101**\n**&1      00000001**\n**re10 ：1**\n## shl，左移 运算 <<（二元）\n同理，我们的<<运算符则是向左移动，通常可以用来快速进行2的幂运算\n这里直接用2的幂运算举例子\n```javascript\nvar a = 2<<4;\nconsole.log(a);\n```\n**控制台会输出：32，也就是2的4+1次幂，为什么是4+1？**\n**原理同>>,下面具体化一下：**\n**02：_0000_10**\n**<<4**\n**32：100000**\n## 无符号右移（二元）\n**无符号右移在C中并不存在，在C中对无符号数进行右移便是无符号右移！**\n**（在其他支持语言中大多为>>>）**\n无符号右移是将二进制数所有位向右移动指定位数，与右移不同，无符号右移空位永远补0。\n例如：`0b10011 >>> 2 = 0b00100[11]`（括号中的数是被裁掉的数）。\n​\n\n# \n**​**\n\n# \n","slug":"bit-operation","published":1,"updated":"2021-12-19T06:36:13.323Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxcz8ry20009f8v0b1qadndr","content":"<h1 id=\"位运算\"><a href=\"#位运算\" class=\"headerlink\" title=\"位运算\"></a>位运算</h1><h2 id=\"amp-（and-和-运算-二元）\"><a href=\"#amp-（and-和-运算-二元）\" class=\"headerlink\" title=\"&amp;（and,和 运算,二元）\"></a>&amp;（and,和 运算,二元）</h2><p>and运算通常用于二进制的取位操作，例如一个数 and 1的结果就是取二进制的最末位。这可以用来判断一个整数的奇偶，二进制的最末位为0表示该数为偶数，最末位为1表示该数为奇数（Eg：快速奇偶判断）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> n;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n);<br>    n&amp;<span class=\"hljs-number\">1</span>?<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;odd&quot;</span>):<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;even&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>其原理为“相同位的两个数字都为1，则为1(True)；若有一个不为1，则为0(False)”<br>举个栗子：<br><strong>20：10100        20:10100</strong><br><strong>01：00001        04:00100</strong><br><strong>————        ———–</strong><br><strong>re：00000         re:00100</strong><br><strong>10=  0               10= 4</strong></p>\n<h2 id=\"（or-或-运算，二元）\"><a href=\"#（or-或-运算，二元）\" class=\"headerlink\" title=\"|（or,或 运算，二元）\"></a>|（or,或 运算，二元）</h2><p>（相同位只要一个为1即为1）<br>or运算通常用于二进制特定位上的无条件赋值，例如一个数or 1的结果就是把二进制最末位强行变成1。<br>在这里你会发现一个有意思的东西：在某些情况(其实就是<strong>不进位</strong>的情况下)下a+b 和 a|b是等价的<br><strong>153:10011001</strong><br><strong>102:01100110</strong><br><strong>|   =255</strong><br>如果需要把二进制最末位变成0，对这个数or 1之后再减一就可以了，其实际意义就是把这个数强行变成最接近的偶数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">103</span>;<br><span class=\"hljs-keyword\">var</span> c = (a | <span class=\"hljs-number\">1</span>) - <span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">//注意优先级</span><br><span class=\"hljs-built_in\">console</span>.log(c);<br></code></pre></td></tr></table></figure>\n<p><strong>控制台输出：102</strong><br><strong>103：1100111</strong><br><strong>| 1  :  1100111</strong><br><strong>-1   :   1100110</strong></p>\n<h2 id=\"xor，异或-运算-（二元）\"><a href=\"#xor，异或-运算-（二元）\" class=\"headerlink\" title=\"xor，异或 运算 ^（二元）\"></a>xor，异或 运算 ^（二元）</h2><p>按位异或运算, 对等长二进制模式按位或二进制数的每一位执行逻辑按位异或操作，操作的结果是如果某位不同则该位为1, 否则该位为0.（相同位不同则为1，相同则为0）<br><strong>00101</strong><br><strong>11100</strong><br><strong>——-</strong><br><strong>11001</strong></p>\n<blockquote>\n<p>xor运算的逆运算是它本身，也就是说两次异或同一个数最后结果不变，即(a xor b) xor b = a。xor运算可以用于简单的加密，比如我想对我MM说1314520，但怕别人知道，于是双方约定拿我的生日19880516作为密钥。1314520 xor 19880516 = 20665500，我就把20665500告诉MM。MM再次计算20665500 xor 19880516的值，得到1314520。</p>\n</blockquote>\n<p><strong>在不进位的情况下，xor,or的运行结果相同~</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">var a = <span class=\"hljs-number\">2</span>;<br>var b = <span class=\"hljs-number\">153</span> ^ <span class=\"hljs-number\">102</span>;<br>console.<span class=\"hljs-built_in\">log</span>(b);<br><span class=\"hljs-comment\">//输出225</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"not，非-运算-（一元）\"><a href=\"#not，非-运算-（一元）\" class=\"headerlink\" title=\"not，非 运算 ~（一元）\"></a>not，非 运算 ~（一元）</h2><p>not运算的定义是把内存中的0和1全部取反。<br>使用not运算时要格外小心，你需要注意整数类型有没有符号。如果not的对象是无符号整数（不能表示负数），那么得到的值就是它与该类型上界的差，因为无符号类型的数是用00到$FFFF依次表示的。<br>下面程序返回65535-100=65435:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">short</span> a=<span class=\"hljs-number\">100</span>;<br>    a=~a;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>,a);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>~的使用技巧：</strong><br>记得 <strong>!=EOF</strong>吗，关于代码”<code>if(scanf(&quot;%d&quot;,n)!=EOF)</code>“,它可以写成”<code>if(~scanf(&quot;%d&quot;,n))</code>“<br>因为scanf如果没有输入值就是返回**_-1_**，对于-1取反，则为0,<strong>0 ==  false</strong><br>这里注意，布尔类型和数字类型的非运算符号不一样，布尔类型是!，数字类型是~。</p>\n<h2 id=\"shr，右移-运算-gt-gt-（二元）\"><a href=\"#shr，右移-运算-gt-gt-（二元）\" class=\"headerlink\" title=\"shr，右移 运算 &gt;&gt;（二元）\"></a>shr，右移 运算 &gt;&gt;（二元）</h2><p>a shr b表示二进制右移b位（去掉末b位）<br>举个栗子：<br>运行这段代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-number\">985</span>;<br>b &gt;&gt;= <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-built_in\">console</span>.log(b);<br></code></pre></td></tr></table></figure>\n<p><strong>控制台会输出：492，原理如下</strong><br><strong>985：1111011001</strong><br><strong>&gt;&gt;1</strong><br><strong>492： 0111101100</strong><br><strong>可以看到，985的二进制想右位移1位，高位用0补齐了；</strong><br>_ <strong>&amp;与&gt;&gt;的运用</strong>_<br>可用来取<strong>整数n</strong>的<strong>二进制数</strong>的第<strong>k</strong>位数<br><strong><em>n&gt;&gt;k&amp;1</em></strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> n = <span class=\"hljs-number\">211</span>;<br><span class=\"hljs-keyword\">var</span> w = n &gt;&gt; <span class=\"hljs-number\">4</span> &amp; <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-built_in\">console</span>.log(w);<br></code></pre></td></tr></table></figure>\n<p><strong>控制台会输出：1，即是211二进制表示的第4位数</strong><br><strong>原理解析：</strong><br><strong>211： 11010011</strong><br><strong>&gt;&gt;4    00001101</strong><br><strong>&amp;1      00000001</strong><br><strong>re10 ：1</strong></p>\n<h2 id=\"shl，左移-运算-lt-lt-（二元）\"><a href=\"#shl，左移-运算-lt-lt-（二元）\" class=\"headerlink\" title=\"shl，左移 运算 &lt;&lt;（二元）\"></a>shl，左移 运算 &lt;&lt;（二元）</h2><p>同理，我们的&lt;&lt;运算符则是向左移动，通常可以用来快速进行2的幂运算<br>这里直接用2的幂运算举例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">2</span>&lt;&lt;<span class=\"hljs-number\">4</span>;<br><span class=\"hljs-built_in\">console</span>.log(a);<br></code></pre></td></tr></table></figure>\n<p><strong>控制台会输出：32，也就是2的4+1次幂，为什么是4+1？</strong><br><strong>原理同&gt;&gt;,下面具体化一下：</strong><br><strong>02：_0000_10</strong><br><strong>&lt;&lt;4</strong><br><strong>32：100000</strong></p>\n<h2 id=\"无符号右移（二元）\"><a href=\"#无符号右移（二元）\" class=\"headerlink\" title=\"无符号右移（二元）\"></a>无符号右移（二元）</h2><p><strong>无符号右移在C中并不存在，在C中对无符号数进行右移便是无符号右移！</strong><br><strong>（在其他支持语言中大多为&gt;&gt;&gt;）</strong><br>无符号右移是将二进制数所有位向右移动指定位数，与右移不同，无符号右移空位永远补0。<br>例如：<code>0b10011 &gt;&gt;&gt; 2 = 0b00100[11]</code>（括号中的数是被裁掉的数）。<br>​</p>\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><p><strong>​</strong></p>\n<h1 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"位运算\"><a href=\"#位运算\" class=\"headerlink\" title=\"位运算\"></a>位运算</h1><h2 id=\"amp-（and-和-运算-二元）\"><a href=\"#amp-（and-和-运算-二元）\" class=\"headerlink\" title=\"&amp;（and,和 运算,二元）\"></a>&amp;（and,和 运算,二元）</h2><p>and运算通常用于二进制的取位操作，例如一个数 and 1的结果就是取二进制的最末位。这可以用来判断一个整数的奇偶，二进制的最末位为0表示该数为偶数，最末位为1表示该数为奇数（Eg：快速奇偶判断）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> n;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n);<br>    n&amp;<span class=\"hljs-number\">1</span>?<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;odd&quot;</span>):<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;even&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>其原理为“相同位的两个数字都为1，则为1(True)；若有一个不为1，则为0(False)”<br>举个栗子：<br><strong>20：10100        20:10100</strong><br><strong>01：00001        04:00100</strong><br><strong>————        ———–</strong><br><strong>re：00000         re:00100</strong><br><strong>10=  0               10= 4</strong></p>\n<h2 id=\"（or-或-运算，二元）\"><a href=\"#（or-或-运算，二元）\" class=\"headerlink\" title=\"|（or,或 运算，二元）\"></a>|（or,或 运算，二元）</h2><p>（相同位只要一个为1即为1）<br>or运算通常用于二进制特定位上的无条件赋值，例如一个数or 1的结果就是把二进制最末位强行变成1。<br>在这里你会发现一个有意思的东西：在某些情况(其实就是<strong>不进位</strong>的情况下)下a+b 和 a|b是等价的<br><strong>153:10011001</strong><br><strong>102:01100110</strong><br><strong>|   =255</strong><br>如果需要把二进制最末位变成0，对这个数or 1之后再减一就可以了，其实际意义就是把这个数强行变成最接近的偶数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">103</span>;<br><span class=\"hljs-keyword\">var</span> c = (a | <span class=\"hljs-number\">1</span>) - <span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">//注意优先级</span><br><span class=\"hljs-built_in\">console</span>.log(c);<br></code></pre></td></tr></table></figure>\n<p><strong>控制台输出：102</strong><br><strong>103：1100111</strong><br><strong>| 1  :  1100111</strong><br><strong>-1   :   1100110</strong></p>\n<h2 id=\"xor，异或-运算-（二元）\"><a href=\"#xor，异或-运算-（二元）\" class=\"headerlink\" title=\"xor，异或 运算 ^（二元）\"></a>xor，异或 运算 ^（二元）</h2><p>按位异或运算, 对等长二进制模式按位或二进制数的每一位执行逻辑按位异或操作，操作的结果是如果某位不同则该位为1, 否则该位为0.（相同位不同则为1，相同则为0）<br><strong>00101</strong><br><strong>11100</strong><br><strong>——-</strong><br><strong>11001</strong></p>\n<blockquote>\n<p>xor运算的逆运算是它本身，也就是说两次异或同一个数最后结果不变，即(a xor b) xor b = a。xor运算可以用于简单的加密，比如我想对我MM说1314520，但怕别人知道，于是双方约定拿我的生日19880516作为密钥。1314520 xor 19880516 = 20665500，我就把20665500告诉MM。MM再次计算20665500 xor 19880516的值，得到1314520。</p>\n</blockquote>\n<p><strong>在不进位的情况下，xor,or的运行结果相同~</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">var a = <span class=\"hljs-number\">2</span>;<br>var b = <span class=\"hljs-number\">153</span> ^ <span class=\"hljs-number\">102</span>;<br>console.<span class=\"hljs-built_in\">log</span>(b);<br><span class=\"hljs-comment\">//输出225</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"not，非-运算-（一元）\"><a href=\"#not，非-运算-（一元）\" class=\"headerlink\" title=\"not，非 运算 ~（一元）\"></a>not，非 运算 ~（一元）</h2><p>not运算的定义是把内存中的0和1全部取反。<br>使用not运算时要格外小心，你需要注意整数类型有没有符号。如果not的对象是无符号整数（不能表示负数），那么得到的值就是它与该类型上界的差，因为无符号类型的数是用00到$FFFF依次表示的。<br>下面程序返回65535-100=65435:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">short</span> a=<span class=\"hljs-number\">100</span>;<br>    a=~a;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>,a);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>~的使用技巧：</strong><br>记得 <strong>!=EOF</strong>吗，关于代码”<code>if(scanf(&quot;%d&quot;,n)!=EOF)</code>“,它可以写成”<code>if(~scanf(&quot;%d&quot;,n))</code>“<br>因为scanf如果没有输入值就是返回**_-1_**，对于-1取反，则为0,<strong>0 ==  false</strong><br>这里注意，布尔类型和数字类型的非运算符号不一样，布尔类型是!，数字类型是~。</p>\n<h2 id=\"shr，右移-运算-gt-gt-（二元）\"><a href=\"#shr，右移-运算-gt-gt-（二元）\" class=\"headerlink\" title=\"shr，右移 运算 &gt;&gt;（二元）\"></a>shr，右移 运算 &gt;&gt;（二元）</h2><p>a shr b表示二进制右移b位（去掉末b位）<br>举个栗子：<br>运行这段代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-number\">985</span>;<br>b &gt;&gt;= <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-built_in\">console</span>.log(b);<br></code></pre></td></tr></table></figure>\n<p><strong>控制台会输出：492，原理如下</strong><br><strong>985：1111011001</strong><br><strong>&gt;&gt;1</strong><br><strong>492： 0111101100</strong><br><strong>可以看到，985的二进制想右位移1位，高位用0补齐了；</strong><br>_ <strong>&amp;与&gt;&gt;的运用</strong>_<br>可用来取<strong>整数n</strong>的<strong>二进制数</strong>的第<strong>k</strong>位数<br><strong><em>n&gt;&gt;k&amp;1</em></strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> n = <span class=\"hljs-number\">211</span>;<br><span class=\"hljs-keyword\">var</span> w = n &gt;&gt; <span class=\"hljs-number\">4</span> &amp; <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-built_in\">console</span>.log(w);<br></code></pre></td></tr></table></figure>\n<p><strong>控制台会输出：1，即是211二进制表示的第4位数</strong><br><strong>原理解析：</strong><br><strong>211： 11010011</strong><br><strong>&gt;&gt;4    00001101</strong><br><strong>&amp;1      00000001</strong><br><strong>re10 ：1</strong></p>\n<h2 id=\"shl，左移-运算-lt-lt-（二元）\"><a href=\"#shl，左移-运算-lt-lt-（二元）\" class=\"headerlink\" title=\"shl，左移 运算 &lt;&lt;（二元）\"></a>shl，左移 运算 &lt;&lt;（二元）</h2><p>同理，我们的&lt;&lt;运算符则是向左移动，通常可以用来快速进行2的幂运算<br>这里直接用2的幂运算举例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">2</span>&lt;&lt;<span class=\"hljs-number\">4</span>;<br><span class=\"hljs-built_in\">console</span>.log(a);<br></code></pre></td></tr></table></figure>\n<p><strong>控制台会输出：32，也就是2的4+1次幂，为什么是4+1？</strong><br><strong>原理同&gt;&gt;,下面具体化一下：</strong><br><strong>02：_0000_10</strong><br><strong>&lt;&lt;4</strong><br><strong>32：100000</strong></p>\n<h2 id=\"无符号右移（二元）\"><a href=\"#无符号右移（二元）\" class=\"headerlink\" title=\"无符号右移（二元）\"></a>无符号右移（二元）</h2><p><strong>无符号右移在C中并不存在，在C中对无符号数进行右移便是无符号右移！</strong><br><strong>（在其他支持语言中大多为&gt;&gt;&gt;）</strong><br>无符号右移是将二进制数所有位向右移动指定位数，与右移不同，无符号右移空位永远补0。<br>例如：<code>0b10011 &gt;&gt;&gt; 2 = 0b00100[11]</code>（括号中的数是被裁掉的数）。<br>​</p>\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><p><strong>​</strong></p>\n<h1 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h1>"},{"title":"基本控制结构","date":"2021-11-19T18:08:13.000Z","_content":"By [探姬](https://blog.probius.xyz)\n\n---\n\n### 顺序结构\n顺序结构是最简单的控制结构，也是程序默认的执行流程。在此结构中，程序将按照书写的先后顺序自上而下依次执行。一般情况下，若程序中不包含选择结构、循环结构和跳转语句，则此程序为顺序结构。\n### 选择结构\n根据判定条件的结果，选择相应执行语句的控制结构称为选择结构。\n#### 使用条件运算符实现选择结构\n利用条件运算符 ? 可以实现一个简单的选择结构，其基本形式为：\n`条件表达式 ? 表达式1 : 表达式2 `\n此方式需根据条件表达式的判断结果，选择表达式 1 或者表达式 2。其具体意义是：若条件表达式的布尔值为 `TRUE` ，则返回` 表达式1 `的值，否则返回` 表达式2` 的值。\n#### 使用 if 语句实现选择结构\nif 是典型的用于实现选择结构的语句，例如 if(X==1) i++; 当满足条件 X==1 时，执行语句 i++。\nif 语句一般分为简单的 if...else 语句、嵌套的 if 语句和 if...else if 语句三类。\n\n- **简单的 if...else 语句** 的基本结构为：\n```cpp\nif(判定条件){\n    判定条件为 TRUE 时的执行语句\n}\nelse{\n    判定条件为 FALSE 时的执行语句\n}\n```\n和使用条件运算符实现选择结构的方式类似。首先进入判定条件，若判定条件的布尔值为 TRUE 则执行 if 花括号内的语句，不执行 else 花括号内的语句；若判定条件的布尔值为 FALSE 则执行 else 花括号内的语句，不执行 if 花括号内的语句。\n\n- **嵌套的 if 语句** 的基本结构为：\n```cpp\nif(判定条件 1){\n    if(判定条件 2){\n        判定条件 1 和判定条件 2 均为 TRUE 时的执行语句\n    }\n    else{\n        判定条件 1 为 TRUE 且判定条件 2 为 FALSE 时的执行语句\n    }\n}\nelse{\n    if(判定条件 3){\n        判定条件 1 为 FALSE 且判定条件 3 为 TRUE 时的执行语句\n    }\n    else{\n        判定条件 1 和判定条件 3 均为 FALSE 时的执行语句\n    }\n}\n```\n**嵌套的 if 语句只是把简单的**`** if...else**`** 语句中的执行语句换成了 **`**if...else **`**语句。当判定条件 1 的布尔值为**`** TRUE **`**时，进入判定条件 2；当判定条件 1 的布尔值为 **`**FALSE**`** 时，进入判定条件 3。**\n\n- **if...else if 语句** 的基本结构为：\n```cpp\nif(判定条件1){\n满足判定条件 1 时执行的语句\n}\nelse if(判定条件2){\n满足判定条件 2 时执行的语句\n}\nelse{\n既不满足判定条件 1，也不满足判定条件 2 时的执行语句\n}\n```\n#### 使用 switch 语句实现选择结构\n`switch` 语句比较特殊，其目的是检查常量表达式中的值，其基本结构为：\n```cpp\nswitch(表达式){\n      case 值1:\n          代码块1\n          break;\n      case 值2:\n          代码块2\n          break;\n      ...\n      default:\n          默认执行的代码块\n  }\n```\n当 `switch` 表达式的值和 `case` 语句选择的值相同时，从此 `case` 位置开始向下执行，\n直到遇到 break 语句或 `switch` 语句块结束；如果没有匹配的` case `语句则执行 default 块的默认代码。\n### 循环结构\n允许多次执行某一条语句或某个语句组的控制结构称为循环语句，在 C++ 中有 **while** 语句、**do...while** 语句、**for** 语句三种循环控制语句。\n#### 使用 while 语句实现循环结构\n`while `语句的执行过程是先判断，再执行。其基本结构为：\n```cpp\nwhile(条件){\n    代码块\n}\n```\n执行 `while` 语句时，首先判断` while `后面的条件是否成立( `TRUE `or `FALSE` )。若成立，则执行循环内的代码，直到条件不成立；若不成立，则执行` while` 语句后的其他语句。\n#### 使用 do...while 语句实现循环结构\n`do...while` 语句的执行过程是先执行，再判断。其基本结构为：\n```cpp\ndo{\n    代码块\n}while(条件);\n```\n#### 使用 for 语句实现循环结构\n`for` 语句允许指定循环的增量。其基本结构为：\n```cpp\nfor(循环变量初始化;循环条件;循环增量)\n{\n    代码块\n}\n```\n使用 `for` 语句实现循环结构的第一步就是初始化循环变量，然后判定循环条件，如果布尔值为 `TRUE` 则执行代码块中的语句，直到条件判定的布尔值为 `FALSE `时终止循环；否则，循环结束。\n#### 拓展\n\n1. 与 if 嵌套语句类似，循环结构也可以进行 **循环嵌套**。循环结构为：\n\n**for 嵌套**\n```cpp\nfor(循环变量初始化1; 循环条件1; 循环增量1)\n{\n    for(循环变量初始化2; 循环条件2; 循环增量2){\n        代码块2\n    }\n    代码块1\n}\n```\n**while 嵌套**\n```cpp\nwhile(条件1){\n    while(条件2){\n        代码块2\n    }\n    代码块1\n}\n```\n**do-while 循环**\n```cpp\ndo{\n    代码块1\n      do{\n        代码块2\n    }while(条件2);\n}while(条件1);\n```\n注意：尽量避免设计层次过多的循环嵌套。\n\n1. 循环结构和选择结构可以互相嵌套，例如在 for 语句中嵌套 if 语句：\n```cpp\nfor(循环变量初始化;循环条件;循环增量)\n{\n    ...\n    if(判定条件){\n    判定条件为 TRUE 时的执行语句\n    }\n    else{\n    判定条件为 FALSE 时的执行语句\n    }\n}\n```\n\n1. 判定条件永恒为 TRUE 的循环称为 **死循环**。例如：\n```cpp\nint i=1\nwhile(i==1){\n    cout<<\"1\"<<endl;\n}\n```\n由于判定条件 i==1 的布尔值永恒为 TRUE，所以程序将无限循环输出字符串 \"1\"。值得注意的是，程序中应不含死循环，除非有特殊需求。\n### 其他控制语句\n#### continue 与 break 语句的区别\ncontinue：结束本次循环，所在循环体并未结束。\nbreak：结束整个循环体，所在循环体已结束。\n#### goto 语句的使用\ngoto 语句允许把控制无条件转移到同一函数内的标记语句。但在任何的编程语言中，都不建议使用 goto 语句，因为它使得程序的控制流难以跟踪。\ngoto 语句的语法：\n```cpp\ngoto label;\n...\nlabel: statement;\n```\n举个例子（：\n```cpp\nint main(){\n    int i=3;\n    if (i==3){\n        goto yes;\n    }\n    else{\n        cout<<i<<endl;\n    }\n    yes:cout<<\"acc\"<<endl; \n    return 0;\n}\n```\n","source":"_posts/基本控制结构.md","raw":"---\ntitle: 基本控制结构\ndate: 2021-11-20 02:08:13\ntags: algorithm \ncategories: 编程语言\n---\nBy [探姬](https://blog.probius.xyz)\n\n---\n\n### 顺序结构\n顺序结构是最简单的控制结构，也是程序默认的执行流程。在此结构中，程序将按照书写的先后顺序自上而下依次执行。一般情况下，若程序中不包含选择结构、循环结构和跳转语句，则此程序为顺序结构。\n### 选择结构\n根据判定条件的结果，选择相应执行语句的控制结构称为选择结构。\n#### 使用条件运算符实现选择结构\n利用条件运算符 ? 可以实现一个简单的选择结构，其基本形式为：\n`条件表达式 ? 表达式1 : 表达式2 `\n此方式需根据条件表达式的判断结果，选择表达式 1 或者表达式 2。其具体意义是：若条件表达式的布尔值为 `TRUE` ，则返回` 表达式1 `的值，否则返回` 表达式2` 的值。\n#### 使用 if 语句实现选择结构\nif 是典型的用于实现选择结构的语句，例如 if(X==1) i++; 当满足条件 X==1 时，执行语句 i++。\nif 语句一般分为简单的 if...else 语句、嵌套的 if 语句和 if...else if 语句三类。\n\n- **简单的 if...else 语句** 的基本结构为：\n```cpp\nif(判定条件){\n    判定条件为 TRUE 时的执行语句\n}\nelse{\n    判定条件为 FALSE 时的执行语句\n}\n```\n和使用条件运算符实现选择结构的方式类似。首先进入判定条件，若判定条件的布尔值为 TRUE 则执行 if 花括号内的语句，不执行 else 花括号内的语句；若判定条件的布尔值为 FALSE 则执行 else 花括号内的语句，不执行 if 花括号内的语句。\n\n- **嵌套的 if 语句** 的基本结构为：\n```cpp\nif(判定条件 1){\n    if(判定条件 2){\n        判定条件 1 和判定条件 2 均为 TRUE 时的执行语句\n    }\n    else{\n        判定条件 1 为 TRUE 且判定条件 2 为 FALSE 时的执行语句\n    }\n}\nelse{\n    if(判定条件 3){\n        判定条件 1 为 FALSE 且判定条件 3 为 TRUE 时的执行语句\n    }\n    else{\n        判定条件 1 和判定条件 3 均为 FALSE 时的执行语句\n    }\n}\n```\n**嵌套的 if 语句只是把简单的**`** if...else**`** 语句中的执行语句换成了 **`**if...else **`**语句。当判定条件 1 的布尔值为**`** TRUE **`**时，进入判定条件 2；当判定条件 1 的布尔值为 **`**FALSE**`** 时，进入判定条件 3。**\n\n- **if...else if 语句** 的基本结构为：\n```cpp\nif(判定条件1){\n满足判定条件 1 时执行的语句\n}\nelse if(判定条件2){\n满足判定条件 2 时执行的语句\n}\nelse{\n既不满足判定条件 1，也不满足判定条件 2 时的执行语句\n}\n```\n#### 使用 switch 语句实现选择结构\n`switch` 语句比较特殊，其目的是检查常量表达式中的值，其基本结构为：\n```cpp\nswitch(表达式){\n      case 值1:\n          代码块1\n          break;\n      case 值2:\n          代码块2\n          break;\n      ...\n      default:\n          默认执行的代码块\n  }\n```\n当 `switch` 表达式的值和 `case` 语句选择的值相同时，从此 `case` 位置开始向下执行，\n直到遇到 break 语句或 `switch` 语句块结束；如果没有匹配的` case `语句则执行 default 块的默认代码。\n### 循环结构\n允许多次执行某一条语句或某个语句组的控制结构称为循环语句，在 C++ 中有 **while** 语句、**do...while** 语句、**for** 语句三种循环控制语句。\n#### 使用 while 语句实现循环结构\n`while `语句的执行过程是先判断，再执行。其基本结构为：\n```cpp\nwhile(条件){\n    代码块\n}\n```\n执行 `while` 语句时，首先判断` while `后面的条件是否成立( `TRUE `or `FALSE` )。若成立，则执行循环内的代码，直到条件不成立；若不成立，则执行` while` 语句后的其他语句。\n#### 使用 do...while 语句实现循环结构\n`do...while` 语句的执行过程是先执行，再判断。其基本结构为：\n```cpp\ndo{\n    代码块\n}while(条件);\n```\n#### 使用 for 语句实现循环结构\n`for` 语句允许指定循环的增量。其基本结构为：\n```cpp\nfor(循环变量初始化;循环条件;循环增量)\n{\n    代码块\n}\n```\n使用 `for` 语句实现循环结构的第一步就是初始化循环变量，然后判定循环条件，如果布尔值为 `TRUE` 则执行代码块中的语句，直到条件判定的布尔值为 `FALSE `时终止循环；否则，循环结束。\n#### 拓展\n\n1. 与 if 嵌套语句类似，循环结构也可以进行 **循环嵌套**。循环结构为：\n\n**for 嵌套**\n```cpp\nfor(循环变量初始化1; 循环条件1; 循环增量1)\n{\n    for(循环变量初始化2; 循环条件2; 循环增量2){\n        代码块2\n    }\n    代码块1\n}\n```\n**while 嵌套**\n```cpp\nwhile(条件1){\n    while(条件2){\n        代码块2\n    }\n    代码块1\n}\n```\n**do-while 循环**\n```cpp\ndo{\n    代码块1\n      do{\n        代码块2\n    }while(条件2);\n}while(条件1);\n```\n注意：尽量避免设计层次过多的循环嵌套。\n\n1. 循环结构和选择结构可以互相嵌套，例如在 for 语句中嵌套 if 语句：\n```cpp\nfor(循环变量初始化;循环条件;循环增量)\n{\n    ...\n    if(判定条件){\n    判定条件为 TRUE 时的执行语句\n    }\n    else{\n    判定条件为 FALSE 时的执行语句\n    }\n}\n```\n\n1. 判定条件永恒为 TRUE 的循环称为 **死循环**。例如：\n```cpp\nint i=1\nwhile(i==1){\n    cout<<\"1\"<<endl;\n}\n```\n由于判定条件 i==1 的布尔值永恒为 TRUE，所以程序将无限循环输出字符串 \"1\"。值得注意的是，程序中应不含死循环，除非有特殊需求。\n### 其他控制语句\n#### continue 与 break 语句的区别\ncontinue：结束本次循环，所在循环体并未结束。\nbreak：结束整个循环体，所在循环体已结束。\n#### goto 语句的使用\ngoto 语句允许把控制无条件转移到同一函数内的标记语句。但在任何的编程语言中，都不建议使用 goto 语句，因为它使得程序的控制流难以跟踪。\ngoto 语句的语法：\n```cpp\ngoto label;\n...\nlabel: statement;\n```\n举个例子（：\n```cpp\nint main(){\n    int i=3;\n    if (i==3){\n        goto yes;\n    }\n    else{\n        cout<<i<<endl;\n    }\n    yes:cout<<\"acc\"<<endl; \n    return 0;\n}\n```\n","slug":"基本控制结构","published":1,"updated":"2021-12-19T06:36:13.323Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxcz8ry3000af8v00h2f5qo5","content":"<p>By <a href=\"https://blog.probius.xyz/\">探姬</a></p>\n<hr>\n<h3 id=\"顺序结构\"><a href=\"#顺序结构\" class=\"headerlink\" title=\"顺序结构\"></a>顺序结构</h3><p>顺序结构是最简单的控制结构，也是程序默认的执行流程。在此结构中，程序将按照书写的先后顺序自上而下依次执行。一般情况下，若程序中不包含选择结构、循环结构和跳转语句，则此程序为顺序结构。</p>\n<h3 id=\"选择结构\"><a href=\"#选择结构\" class=\"headerlink\" title=\"选择结构\"></a>选择结构</h3><p>根据判定条件的结果，选择相应执行语句的控制结构称为选择结构。</p>\n<h4 id=\"使用条件运算符实现选择结构\"><a href=\"#使用条件运算符实现选择结构\" class=\"headerlink\" title=\"使用条件运算符实现选择结构\"></a>使用条件运算符实现选择结构</h4><p>利用条件运算符 ? 可以实现一个简单的选择结构，其基本形式为：<br><code>条件表达式 ? 表达式1 : 表达式2 </code><br>此方式需根据条件表达式的判断结果，选择表达式 1 或者表达式 2。其具体意义是：若条件表达式的布尔值为 <code>TRUE</code> ，则返回<code>表达式1</code>的值，否则返回<code> 表达式2</code> 的值。</p>\n<h4 id=\"使用-if-语句实现选择结构\"><a href=\"#使用-if-语句实现选择结构\" class=\"headerlink\" title=\"使用 if 语句实现选择结构\"></a>使用 if 语句实现选择结构</h4><p>if 是典型的用于实现选择结构的语句，例如 if(X==1) i++; 当满足条件 X==1 时，执行语句 i++。<br>if 语句一般分为简单的 if…else 语句、嵌套的 if 语句和 if…else if 语句三类。</p>\n<ul>\n<li><p><strong>简单的 if…else 语句</strong> 的基本结构为：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">if</span>(判定条件)&#123;<br>    判定条件为 TRUE 时的执行语句<br>&#125;<br><span class=\"hljs-keyword\">else</span>&#123;<br>    判定条件为 FALSE 时的执行语句<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>和使用条件运算符实现选择结构的方式类似。首先进入判定条件，若判定条件的布尔值为 TRUE 则执行 if 花括号内的语句，不执行 else 花括号内的语句；若判定条件的布尔值为 FALSE 则执行 else 花括号内的语句，不执行 if 花括号内的语句。</p>\n</li>\n<li><p><strong>嵌套的 if 语句</strong> 的基本结构为：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">if</span>(判定条件 <span class=\"hljs-number\">1</span>)&#123;<br>    <span class=\"hljs-keyword\">if</span>(判定条件 <span class=\"hljs-number\">2</span>)&#123;<br>        判定条件 <span class=\"hljs-number\">1</span> 和判定条件 <span class=\"hljs-number\">2</span> 均为 TRUE 时的执行语句<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span>&#123;<br>        判定条件 <span class=\"hljs-number\">1</span> 为 TRUE 且判定条件 <span class=\"hljs-number\">2</span> 为 FALSE 时的执行语句<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">else</span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(判定条件 <span class=\"hljs-number\">3</span>)&#123;<br>        判定条件 <span class=\"hljs-number\">1</span> 为 FALSE 且判定条件 <span class=\"hljs-number\">3</span> 为 TRUE 时的执行语句<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span>&#123;<br>        判定条件 <span class=\"hljs-number\">1</span> 和判定条件 <span class=\"hljs-number\">3</span> 均为 FALSE 时的执行语句<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>嵌套的 if 语句只是把简单的</strong><code>** if...else**</code>** 语句中的执行语句换成了 **<code>**if...else **</code><strong>语句。当判定条件 1 的布尔值为</strong><code>** TRUE **</code><strong>时，进入判定条件 2；当判定条件 1 的布尔值为 <strong><code>**FALSE**</code></strong> 时，进入判定条件 3。</strong></p>\n<ul>\n<li><strong>if…else if 语句</strong> 的基本结构为：<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">if</span>(判定条件<span class=\"hljs-number\">1</span>)&#123;<br>满足判定条件 <span class=\"hljs-number\">1</span> 时执行的语句<br>&#125;<br><span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(判定条件<span class=\"hljs-number\">2</span>)&#123;<br>满足判定条件 <span class=\"hljs-number\">2</span> 时执行的语句<br>&#125;<br><span class=\"hljs-keyword\">else</span>&#123;<br>既不满足判定条件 <span class=\"hljs-number\">1</span>，也不满足判定条件 <span class=\"hljs-number\">2</span> 时的执行语句<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"使用-switch-语句实现选择结构\"><a href=\"#使用-switch-语句实现选择结构\" class=\"headerlink\" title=\"使用 switch 语句实现选择结构\"></a>使用 switch 语句实现选择结构</h4><code>switch</code> 语句比较特殊，其目的是检查常量表达式中的值，其基本结构为：<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-built_in\"><span class=\"hljs-keyword\">switch</span></span>(表达式)&#123;<br>      <span class=\"hljs-keyword\">case</span> 值<span class=\"hljs-number\">1</span>:<br>          代码块<span class=\"hljs-number\">1</span><br>          <span class=\"hljs-keyword\">break</span>;<br>      <span class=\"hljs-keyword\">case</span> 值<span class=\"hljs-number\">2</span>:<br>          代码块<span class=\"hljs-number\">2</span><br>          <span class=\"hljs-keyword\">break</span>;<br>      ...<br>      <span class=\"hljs-keyword\">default</span>:<br>          默认执行的代码块<br>  &#125;<br></code></pre></td></tr></table></figure>\n当 <code>switch</code> 表达式的值和 <code>case</code> 语句选择的值相同时，从此 <code>case</code> 位置开始向下执行，<br>直到遇到 break 语句或 <code>switch</code> 语句块结束；如果没有匹配的<code>case</code>语句则执行 default 块的默认代码。<h3 id=\"循环结构\"><a href=\"#循环结构\" class=\"headerlink\" title=\"循环结构\"></a>循环结构</h3>允许多次执行某一条语句或某个语句组的控制结构称为循环语句，在 C++ 中有 <strong>while</strong> 语句、<strong>do…while</strong> 语句、<strong>for</strong> 语句三种循环控制语句。<h4 id=\"使用-while-语句实现循环结构\"><a href=\"#使用-while-语句实现循环结构\" class=\"headerlink\" title=\"使用 while 语句实现循环结构\"></a>使用 while 语句实现循环结构</h4><code>while </code>语句的执行过程是先判断，再执行。其基本结构为：<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">while</span>(条件)&#123;<br>    代码块<br>&#125;<br></code></pre></td></tr></table></figure>\n执行 <code>while</code> 语句时，首先判断<code>while</code>后面的条件是否成立( <code>TRUE </code>or <code>FALSE</code> )。若成立，则执行循环内的代码，直到条件不成立；若不成立，则执行<code> while</code> 语句后的其他语句。<h4 id=\"使用-do…while-语句实现循环结构\"><a href=\"#使用-do…while-语句实现循环结构\" class=\"headerlink\" title=\"使用 do…while 语句实现循环结构\"></a>使用 do…while 语句实现循环结构</h4><code>do...while</code> 语句的执行过程是先执行，再判断。其基本结构为：<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">do</span>&#123;<br>    代码块<br>&#125;<span class=\"hljs-keyword\">while</span>(条件);<br></code></pre></td></tr></table></figure>\n<h4 id=\"使用-for-语句实现循环结构\"><a href=\"#使用-for-语句实现循环结构\" class=\"headerlink\" title=\"使用 for 语句实现循环结构\"></a>使用 for 语句实现循环结构</h4><code>for</code> 语句允许指定循环的增量。其基本结构为：<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">for</span>(循环变量初始化;循环条件;循环增量)<br>&#123;<br>    代码块<br>&#125;<br></code></pre></td></tr></table></figure>\n使用 <code>for</code> 语句实现循环结构的第一步就是初始化循环变量，然后判定循环条件，如果布尔值为 <code>TRUE</code> 则执行代码块中的语句，直到条件判定的布尔值为 <code>FALSE </code>时终止循环；否则，循环结束。<h4 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h4></li>\n</ul>\n<ol>\n<li>与 if 嵌套语句类似，循环结构也可以进行 <strong>循环嵌套</strong>。循环结构为：</li>\n</ol>\n<p><strong>for 嵌套</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">for</span>(循环变量初始化<span class=\"hljs-number\">1</span>; 循环条件<span class=\"hljs-number\">1</span>; 循环增量<span class=\"hljs-number\">1</span>)<br>&#123;<br>    <span class=\"hljs-keyword\">for</span>(循环变量初始化<span class=\"hljs-number\">2</span>; 循环条件<span class=\"hljs-number\">2</span>; 循环增量<span class=\"hljs-number\">2</span>)&#123;<br>        代码块<span class=\"hljs-number\">2</span><br>    &#125;<br>    代码块<span class=\"hljs-number\">1</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>while 嵌套</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">while</span>(条件<span class=\"hljs-number\">1</span>)&#123;<br>    <span class=\"hljs-keyword\">while</span>(条件<span class=\"hljs-number\">2</span>)&#123;<br>        代码块<span class=\"hljs-number\">2</span><br>    &#125;<br>    代码块<span class=\"hljs-number\">1</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>do-while 循环</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">do</span>&#123;<br>    代码块<span class=\"hljs-number\">1</span><br>      <span class=\"hljs-keyword\">do</span>&#123;<br>        代码块<span class=\"hljs-number\">2</span><br>    &#125;<span class=\"hljs-keyword\">while</span>(条件<span class=\"hljs-number\">2</span>);<br>&#125;<span class=\"hljs-keyword\">while</span>(条件<span class=\"hljs-number\">1</span>);<br></code></pre></td></tr></table></figure>\n<p>注意：尽量避免设计层次过多的循环嵌套。</p>\n<ol>\n<li><p>循环结构和选择结构可以互相嵌套，例如在 for 语句中嵌套 if 语句：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">for</span>(循环变量初始化;循环条件;循环增量)<br>&#123;<br>    ...<br>    <span class=\"hljs-keyword\">if</span>(判定条件)&#123;<br>    判定条件为 TRUE 时的执行语句<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span>&#123;<br>    判定条件为 FALSE 时的执行语句<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>判定条件永恒为 TRUE 的循环称为 <strong>死循环</strong>。例如：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span><br><span class=\"hljs-keyword\">while</span>(i==<span class=\"hljs-number\">1</span>)&#123;<br>    cout&lt;&lt;<span class=\"hljs-string\">&quot;1&quot;</span>&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>由于判定条件 i==1 的布尔值永恒为 TRUE，所以程序将无限循环输出字符串 “1”。值得注意的是，程序中应不含死循环，除非有特殊需求。</p>\n<h3 id=\"其他控制语句\"><a href=\"#其他控制语句\" class=\"headerlink\" title=\"其他控制语句\"></a>其他控制语句</h3><h4 id=\"continue-与-break-语句的区别\"><a href=\"#continue-与-break-语句的区别\" class=\"headerlink\" title=\"continue 与 break 语句的区别\"></a>continue 与 break 语句的区别</h4><p>continue：结束本次循环，所在循环体并未结束。<br>break：结束整个循环体，所在循环体已结束。</p>\n<h4 id=\"goto-语句的使用\"><a href=\"#goto-语句的使用\" class=\"headerlink\" title=\"goto 语句的使用\"></a>goto 语句的使用</h4><p>goto 语句允许把控制无条件转移到同一函数内的标记语句。但在任何的编程语言中，都不建议使用 goto 语句，因为它使得程序的控制流难以跟踪。<br>goto 语句的语法：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">goto</span> label;<br>...<br>label: statement;<br></code></pre></td></tr></table></figure>\n<p>举个例子（：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">3</span>;<br>    <span class=\"hljs-keyword\">if</span> (i==<span class=\"hljs-number\">3</span>)&#123;<br>        <span class=\"hljs-keyword\">goto</span> yes;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span>&#123;<br>        cout&lt;&lt;i&lt;&lt;endl;<br>    &#125;<br>    yes:cout&lt;&lt;<span class=\"hljs-string\">&quot;acc&quot;</span>&lt;&lt;endl; <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>By <a href=\"https://blog.probius.xyz/\">探姬</a></p>\n<hr>\n<h3 id=\"顺序结构\"><a href=\"#顺序结构\" class=\"headerlink\" title=\"顺序结构\"></a>顺序结构</h3><p>顺序结构是最简单的控制结构，也是程序默认的执行流程。在此结构中，程序将按照书写的先后顺序自上而下依次执行。一般情况下，若程序中不包含选择结构、循环结构和跳转语句，则此程序为顺序结构。</p>\n<h3 id=\"选择结构\"><a href=\"#选择结构\" class=\"headerlink\" title=\"选择结构\"></a>选择结构</h3><p>根据判定条件的结果，选择相应执行语句的控制结构称为选择结构。</p>\n<h4 id=\"使用条件运算符实现选择结构\"><a href=\"#使用条件运算符实现选择结构\" class=\"headerlink\" title=\"使用条件运算符实现选择结构\"></a>使用条件运算符实现选择结构</h4><p>利用条件运算符 ? 可以实现一个简单的选择结构，其基本形式为：<br><code>条件表达式 ? 表达式1 : 表达式2 </code><br>此方式需根据条件表达式的判断结果，选择表达式 1 或者表达式 2。其具体意义是：若条件表达式的布尔值为 <code>TRUE</code> ，则返回<code>表达式1</code>的值，否则返回<code> 表达式2</code> 的值。</p>\n<h4 id=\"使用-if-语句实现选择结构\"><a href=\"#使用-if-语句实现选择结构\" class=\"headerlink\" title=\"使用 if 语句实现选择结构\"></a>使用 if 语句实现选择结构</h4><p>if 是典型的用于实现选择结构的语句，例如 if(X==1) i++; 当满足条件 X==1 时，执行语句 i++。<br>if 语句一般分为简单的 if…else 语句、嵌套的 if 语句和 if…else if 语句三类。</p>\n<ul>\n<li><p><strong>简单的 if…else 语句</strong> 的基本结构为：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">if</span>(判定条件)&#123;<br>    判定条件为 TRUE 时的执行语句<br>&#125;<br><span class=\"hljs-keyword\">else</span>&#123;<br>    判定条件为 FALSE 时的执行语句<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>和使用条件运算符实现选择结构的方式类似。首先进入判定条件，若判定条件的布尔值为 TRUE 则执行 if 花括号内的语句，不执行 else 花括号内的语句；若判定条件的布尔值为 FALSE 则执行 else 花括号内的语句，不执行 if 花括号内的语句。</p>\n</li>\n<li><p><strong>嵌套的 if 语句</strong> 的基本结构为：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">if</span>(判定条件 <span class=\"hljs-number\">1</span>)&#123;<br>    <span class=\"hljs-keyword\">if</span>(判定条件 <span class=\"hljs-number\">2</span>)&#123;<br>        判定条件 <span class=\"hljs-number\">1</span> 和判定条件 <span class=\"hljs-number\">2</span> 均为 TRUE 时的执行语句<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span>&#123;<br>        判定条件 <span class=\"hljs-number\">1</span> 为 TRUE 且判定条件 <span class=\"hljs-number\">2</span> 为 FALSE 时的执行语句<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">else</span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(判定条件 <span class=\"hljs-number\">3</span>)&#123;<br>        判定条件 <span class=\"hljs-number\">1</span> 为 FALSE 且判定条件 <span class=\"hljs-number\">3</span> 为 TRUE 时的执行语句<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span>&#123;<br>        判定条件 <span class=\"hljs-number\">1</span> 和判定条件 <span class=\"hljs-number\">3</span> 均为 FALSE 时的执行语句<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>嵌套的 if 语句只是把简单的</strong><code>** if...else**</code>** 语句中的执行语句换成了 **<code>**if...else **</code><strong>语句。当判定条件 1 的布尔值为</strong><code>** TRUE **</code><strong>时，进入判定条件 2；当判定条件 1 的布尔值为 <strong><code>**FALSE**</code></strong> 时，进入判定条件 3。</strong></p>\n<ul>\n<li><strong>if…else if 语句</strong> 的基本结构为：<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">if</span>(判定条件<span class=\"hljs-number\">1</span>)&#123;<br>满足判定条件 <span class=\"hljs-number\">1</span> 时执行的语句<br>&#125;<br><span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(判定条件<span class=\"hljs-number\">2</span>)&#123;<br>满足判定条件 <span class=\"hljs-number\">2</span> 时执行的语句<br>&#125;<br><span class=\"hljs-keyword\">else</span>&#123;<br>既不满足判定条件 <span class=\"hljs-number\">1</span>，也不满足判定条件 <span class=\"hljs-number\">2</span> 时的执行语句<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"使用-switch-语句实现选择结构\"><a href=\"#使用-switch-语句实现选择结构\" class=\"headerlink\" title=\"使用 switch 语句实现选择结构\"></a>使用 switch 语句实现选择结构</h4><code>switch</code> 语句比较特殊，其目的是检查常量表达式中的值，其基本结构为：<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-built_in\"><span class=\"hljs-keyword\">switch</span></span>(表达式)&#123;<br>      <span class=\"hljs-keyword\">case</span> 值<span class=\"hljs-number\">1</span>:<br>          代码块<span class=\"hljs-number\">1</span><br>          <span class=\"hljs-keyword\">break</span>;<br>      <span class=\"hljs-keyword\">case</span> 值<span class=\"hljs-number\">2</span>:<br>          代码块<span class=\"hljs-number\">2</span><br>          <span class=\"hljs-keyword\">break</span>;<br>      ...<br>      <span class=\"hljs-keyword\">default</span>:<br>          默认执行的代码块<br>  &#125;<br></code></pre></td></tr></table></figure>\n当 <code>switch</code> 表达式的值和 <code>case</code> 语句选择的值相同时，从此 <code>case</code> 位置开始向下执行，<br>直到遇到 break 语句或 <code>switch</code> 语句块结束；如果没有匹配的<code>case</code>语句则执行 default 块的默认代码。<h3 id=\"循环结构\"><a href=\"#循环结构\" class=\"headerlink\" title=\"循环结构\"></a>循环结构</h3>允许多次执行某一条语句或某个语句组的控制结构称为循环语句，在 C++ 中有 <strong>while</strong> 语句、<strong>do…while</strong> 语句、<strong>for</strong> 语句三种循环控制语句。<h4 id=\"使用-while-语句实现循环结构\"><a href=\"#使用-while-语句实现循环结构\" class=\"headerlink\" title=\"使用 while 语句实现循环结构\"></a>使用 while 语句实现循环结构</h4><code>while </code>语句的执行过程是先判断，再执行。其基本结构为：<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">while</span>(条件)&#123;<br>    代码块<br>&#125;<br></code></pre></td></tr></table></figure>\n执行 <code>while</code> 语句时，首先判断<code>while</code>后面的条件是否成立( <code>TRUE </code>or <code>FALSE</code> )。若成立，则执行循环内的代码，直到条件不成立；若不成立，则执行<code> while</code> 语句后的其他语句。<h4 id=\"使用-do…while-语句实现循环结构\"><a href=\"#使用-do…while-语句实现循环结构\" class=\"headerlink\" title=\"使用 do…while 语句实现循环结构\"></a>使用 do…while 语句实现循环结构</h4><code>do...while</code> 语句的执行过程是先执行，再判断。其基本结构为：<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">do</span>&#123;<br>    代码块<br>&#125;<span class=\"hljs-keyword\">while</span>(条件);<br></code></pre></td></tr></table></figure>\n<h4 id=\"使用-for-语句实现循环结构\"><a href=\"#使用-for-语句实现循环结构\" class=\"headerlink\" title=\"使用 for 语句实现循环结构\"></a>使用 for 语句实现循环结构</h4><code>for</code> 语句允许指定循环的增量。其基本结构为：<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">for</span>(循环变量初始化;循环条件;循环增量)<br>&#123;<br>    代码块<br>&#125;<br></code></pre></td></tr></table></figure>\n使用 <code>for</code> 语句实现循环结构的第一步就是初始化循环变量，然后判定循环条件，如果布尔值为 <code>TRUE</code> 则执行代码块中的语句，直到条件判定的布尔值为 <code>FALSE </code>时终止循环；否则，循环结束。<h4 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h4></li>\n</ul>\n<ol>\n<li>与 if 嵌套语句类似，循环结构也可以进行 <strong>循环嵌套</strong>。循环结构为：</li>\n</ol>\n<p><strong>for 嵌套</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">for</span>(循环变量初始化<span class=\"hljs-number\">1</span>; 循环条件<span class=\"hljs-number\">1</span>; 循环增量<span class=\"hljs-number\">1</span>)<br>&#123;<br>    <span class=\"hljs-keyword\">for</span>(循环变量初始化<span class=\"hljs-number\">2</span>; 循环条件<span class=\"hljs-number\">2</span>; 循环增量<span class=\"hljs-number\">2</span>)&#123;<br>        代码块<span class=\"hljs-number\">2</span><br>    &#125;<br>    代码块<span class=\"hljs-number\">1</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>while 嵌套</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">while</span>(条件<span class=\"hljs-number\">1</span>)&#123;<br>    <span class=\"hljs-keyword\">while</span>(条件<span class=\"hljs-number\">2</span>)&#123;<br>        代码块<span class=\"hljs-number\">2</span><br>    &#125;<br>    代码块<span class=\"hljs-number\">1</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>do-while 循环</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">do</span>&#123;<br>    代码块<span class=\"hljs-number\">1</span><br>      <span class=\"hljs-keyword\">do</span>&#123;<br>        代码块<span class=\"hljs-number\">2</span><br>    &#125;<span class=\"hljs-keyword\">while</span>(条件<span class=\"hljs-number\">2</span>);<br>&#125;<span class=\"hljs-keyword\">while</span>(条件<span class=\"hljs-number\">1</span>);<br></code></pre></td></tr></table></figure>\n<p>注意：尽量避免设计层次过多的循环嵌套。</p>\n<ol>\n<li><p>循环结构和选择结构可以互相嵌套，例如在 for 语句中嵌套 if 语句：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">for</span>(循环变量初始化;循环条件;循环增量)<br>&#123;<br>    ...<br>    <span class=\"hljs-keyword\">if</span>(判定条件)&#123;<br>    判定条件为 TRUE 时的执行语句<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span>&#123;<br>    判定条件为 FALSE 时的执行语句<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>判定条件永恒为 TRUE 的循环称为 <strong>死循环</strong>。例如：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span><br><span class=\"hljs-keyword\">while</span>(i==<span class=\"hljs-number\">1</span>)&#123;<br>    cout&lt;&lt;<span class=\"hljs-string\">&quot;1&quot;</span>&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>由于判定条件 i==1 的布尔值永恒为 TRUE，所以程序将无限循环输出字符串 “1”。值得注意的是，程序中应不含死循环，除非有特殊需求。</p>\n<h3 id=\"其他控制语句\"><a href=\"#其他控制语句\" class=\"headerlink\" title=\"其他控制语句\"></a>其他控制语句</h3><h4 id=\"continue-与-break-语句的区别\"><a href=\"#continue-与-break-语句的区别\" class=\"headerlink\" title=\"continue 与 break 语句的区别\"></a>continue 与 break 语句的区别</h4><p>continue：结束本次循环，所在循环体并未结束。<br>break：结束整个循环体，所在循环体已结束。</p>\n<h4 id=\"goto-语句的使用\"><a href=\"#goto-语句的使用\" class=\"headerlink\" title=\"goto 语句的使用\"></a>goto 语句的使用</h4><p>goto 语句允许把控制无条件转移到同一函数内的标记语句。但在任何的编程语言中，都不建议使用 goto 语句，因为它使得程序的控制流难以跟踪。<br>goto 语句的语法：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">goto</span> label;<br>...<br>label: statement;<br></code></pre></td></tr></table></figure>\n<p>举个例子（：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">3</span>;<br>    <span class=\"hljs-keyword\">if</span> (i==<span class=\"hljs-number\">3</span>)&#123;<br>        <span class=\"hljs-keyword\">goto</span> yes;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span>&#123;<br>        cout&lt;&lt;i&lt;&lt;endl;<br>    &#125;<br>    yes:cout&lt;&lt;<span class=\"hljs-string\">&quot;acc&quot;</span>&lt;&lt;endl; <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"快速幂","date":"2021-11-20T18:15:35.000Z","_content":"首先贴一下链接：[https://www.acwing.com/problem/content/91/](https://www.acwing.com/problem/content/91/)  \n---\n### 前置知识:[位运算](/2021/11/20/bit-operation/)\n## 看题\n> 求 a 的 b 次方对 p 取模的值。三个整数 a,b,p ,在同一行用空格隔开\n> 输入样例\n> 3 2 7\n> 输出样例\n> 2\n\n再发一次来链接：[https://www.acwing.com/problem/content/91/](https://www.acwing.com/problem/content/91/)\n因为C/C++一秒能算的数约为107~8次，而题目最大为109所以按照一般思路慢慢乘的话，必定超时，所以使用快速幂是不错的选择（\n大体的思路——\n比如，要求3的7次方，7的二进制表示为**111**，**位数为3**，那么可以做如下拆分：\n**37= 32^0 * 32^1* 32^2** \n**(👆其实这个看不出规律，我们看看下面)**\n同理，我们来试试3^28,28的二进制表示为11100，位数为5，那么应该这样拆分：\n**3^28**=** 32^2 *  32^3  *  32^4     //这里0和1位对应的值为0，不乘**\n所以，要求a的b次幂，那么假设b的二进制表示有**n位**可以这样：\n**ab=(a2^0*当前位的数)*......*(32^n-1*当前位的数)**\n那么再来看y总的代码：\n```cpp\n#include <iostream>\nusing namespace std;\nint main()\n{\n    int a, b, p;\n    cin>>a>>b>>p;\n    int res = 1%p;//防止一个特殊数字0\n    while (b)//当b的二进制最后一位也为0的时候循环终止\n    {\n        if(b&1)//判断b的二进制最低位是否为1，是0的话不乘\n            res = res * 1ll * a%p;//*1ll防止数据溢出\n        a =a * 1ll * a%p;//%p防止数太大\n        b>>=1;//这里将b的二进制右移一位，这样的操作会进行20次对应2^0~2^19\n    }\n    cout << res << endl;\n    return 0;\n}\n\n```\n对代码片段：\n```cpp\nif(b&1)//判断b的二进制最低位是否为1，是0的话不乘\n            res = res * 1ll * a%p;//*1ll防止数据溢出\n        a =a * 1ll * a%p;//%p防止数太大\n```\n这里**警示**一下：不要简写`res = res * 1ll * a%p`;为`res *=  1ll * a%p;`\n**这样会导致数据溢出，用此方法*1ll不能转化类型。**\n的一个**补充**：这边两次求模不影响最终结果（因为题目要求求模），可以自己用数据推导一下下。\n这里引用一个解释\n> 本题逻辑核心！！\n> 说明:以下a(n)为a^(2^n)\n>     1.对于(a^b)%p式子的展开\n>         a^b=1*a(x1)*a(x2)*a(x3).....\n>         a^b%p=( (1*a(x1)*a(x2)%p) * (a(x3)%p) ) %p\n>         1*a(x1)*a(x2)%p = ( (1*a(x1)%p) * (a(x2)%p) )%p\n>         1*a(x1)%p = ( (1%p) * (a(x1)%p) )%p\n>         所以res初始化值为1%p\n>         算法即是从下向上实现 \n>     2.理解a = a *a % p\n>         迭代a： ( res * (a(xn)%p) )%p 其中的a(xn)%p = a(xn-1)*a(xn-1)%p\n> ​\n\n\n有人要的C：\n```c\n#include <stdio.h>\nint main()\n{\n    int a, b, p;\n    scanf(\"%d %d %d\",&a,&b,&p);\n    int res = 1%p;//防止一个特殊数字0\n    while (b)//当b的二进制最后一位也为0的时候循环终止\n    {\n        if(b&1)//判断b的二进制最低位是否为1，是0的话不乘\n            res = res * 1ll * a%p;//*1ll防止数据溢出\n        a =a * 1ll * a%p;//%p防止数太大\n        b>>=1;//这里将b的二进制右移一位，这样的操作会进行20次对应2^0~2^19\n    }\n    printf(\"%d\",res);\n    return 0;\n}\n```\n\n---\n\n使用递归的版本：\n```cpp\n#include<iostream>\nusing namespace std;\n#define ull unsigned long long\null quick_pow(ull a,ull b,ull p)\n{\n    if(b==0) return 1%p;\n    a%=p;\n    ull res=quick_pow(a,b>>1,p);\n    if(b&1) return res*res%p*a%p;\n    return res*res%p;\n}\nint main()\n{\n    int a,b,p;\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    cin>>a>>b>>p;\n    cout<<quick_pow(a,b,p)<<endl;\n    return 0;\n}\n\n```\n","source":"_posts/快速幂.md","raw":"---\ntitle: 快速幂\ndate: 2021-11-21 02:15:35\ntags: algorithm \ncategories: 编程语言\n---\n首先贴一下链接：[https://www.acwing.com/problem/content/91/](https://www.acwing.com/problem/content/91/)  \n---\n### 前置知识:[位运算](/2021/11/20/bit-operation/)\n## 看题\n> 求 a 的 b 次方对 p 取模的值。三个整数 a,b,p ,在同一行用空格隔开\n> 输入样例\n> 3 2 7\n> 输出样例\n> 2\n\n再发一次来链接：[https://www.acwing.com/problem/content/91/](https://www.acwing.com/problem/content/91/)\n因为C/C++一秒能算的数约为107~8次，而题目最大为109所以按照一般思路慢慢乘的话，必定超时，所以使用快速幂是不错的选择（\n大体的思路——\n比如，要求3的7次方，7的二进制表示为**111**，**位数为3**，那么可以做如下拆分：\n**37= 32^0 * 32^1* 32^2** \n**(👆其实这个看不出规律，我们看看下面)**\n同理，我们来试试3^28,28的二进制表示为11100，位数为5，那么应该这样拆分：\n**3^28**=** 32^2 *  32^3  *  32^4     //这里0和1位对应的值为0，不乘**\n所以，要求a的b次幂，那么假设b的二进制表示有**n位**可以这样：\n**ab=(a2^0*当前位的数)*......*(32^n-1*当前位的数)**\n那么再来看y总的代码：\n```cpp\n#include <iostream>\nusing namespace std;\nint main()\n{\n    int a, b, p;\n    cin>>a>>b>>p;\n    int res = 1%p;//防止一个特殊数字0\n    while (b)//当b的二进制最后一位也为0的时候循环终止\n    {\n        if(b&1)//判断b的二进制最低位是否为1，是0的话不乘\n            res = res * 1ll * a%p;//*1ll防止数据溢出\n        a =a * 1ll * a%p;//%p防止数太大\n        b>>=1;//这里将b的二进制右移一位，这样的操作会进行20次对应2^0~2^19\n    }\n    cout << res << endl;\n    return 0;\n}\n\n```\n对代码片段：\n```cpp\nif(b&1)//判断b的二进制最低位是否为1，是0的话不乘\n            res = res * 1ll * a%p;//*1ll防止数据溢出\n        a =a * 1ll * a%p;//%p防止数太大\n```\n这里**警示**一下：不要简写`res = res * 1ll * a%p`;为`res *=  1ll * a%p;`\n**这样会导致数据溢出，用此方法*1ll不能转化类型。**\n的一个**补充**：这边两次求模不影响最终结果（因为题目要求求模），可以自己用数据推导一下下。\n这里引用一个解释\n> 本题逻辑核心！！\n> 说明:以下a(n)为a^(2^n)\n>     1.对于(a^b)%p式子的展开\n>         a^b=1*a(x1)*a(x2)*a(x3).....\n>         a^b%p=( (1*a(x1)*a(x2)%p) * (a(x3)%p) ) %p\n>         1*a(x1)*a(x2)%p = ( (1*a(x1)%p) * (a(x2)%p) )%p\n>         1*a(x1)%p = ( (1%p) * (a(x1)%p) )%p\n>         所以res初始化值为1%p\n>         算法即是从下向上实现 \n>     2.理解a = a *a % p\n>         迭代a： ( res * (a(xn)%p) )%p 其中的a(xn)%p = a(xn-1)*a(xn-1)%p\n> ​\n\n\n有人要的C：\n```c\n#include <stdio.h>\nint main()\n{\n    int a, b, p;\n    scanf(\"%d %d %d\",&a,&b,&p);\n    int res = 1%p;//防止一个特殊数字0\n    while (b)//当b的二进制最后一位也为0的时候循环终止\n    {\n        if(b&1)//判断b的二进制最低位是否为1，是0的话不乘\n            res = res * 1ll * a%p;//*1ll防止数据溢出\n        a =a * 1ll * a%p;//%p防止数太大\n        b>>=1;//这里将b的二进制右移一位，这样的操作会进行20次对应2^0~2^19\n    }\n    printf(\"%d\",res);\n    return 0;\n}\n```\n\n---\n\n使用递归的版本：\n```cpp\n#include<iostream>\nusing namespace std;\n#define ull unsigned long long\null quick_pow(ull a,ull b,ull p)\n{\n    if(b==0) return 1%p;\n    a%=p;\n    ull res=quick_pow(a,b>>1,p);\n    if(b&1) return res*res%p*a%p;\n    return res*res%p;\n}\nint main()\n{\n    int a,b,p;\n    cin.tie(0);\n    ios::sync_with_stdio(false);\n    cin>>a>>b>>p;\n    cout<<quick_pow(a,b,p)<<endl;\n    return 0;\n}\n\n```\n","slug":"快速幂","published":1,"updated":"2021-12-19T06:36:13.324Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxcz8ry4000ef8v0h2665u5x","content":"<h2 id=\"首先贴一下链接：https-www-acwing-com-problem-content-91\"><a href=\"#首先贴一下链接：https-www-acwing-com-problem-content-91\" class=\"headerlink\" title=\"首先贴一下链接：https://www.acwing.com/problem/content/91/  \"></a>首先贴一下链接：<a href=\"https://www.acwing.com/problem/content/91/\">https://www.acwing.com/problem/content/91/</a>  </h2><h3 id=\"前置知识-位运算\"><a href=\"#前置知识-位运算\" class=\"headerlink\" title=\"前置知识:位运算\"></a>前置知识:<a href=\"/2021/11/20/bit-operation/\">位运算</a></h3><h2 id=\"看题\"><a href=\"#看题\" class=\"headerlink\" title=\"看题\"></a>看题</h2><blockquote>\n<p>求 a 的 b 次方对 p 取模的值。三个整数 a,b,p ,在同一行用空格隔开<br>输入样例<br>3 2 7<br>输出样例<br>2</p>\n</blockquote>\n<p>再发一次来链接：<a href=\"https://www.acwing.com/problem/content/91/\">https://www.acwing.com/problem/content/91/</a><br>因为C/C++一秒能算的数约为107~8次，而题目最大为109所以按照一般思路慢慢乘的话，必定超时，所以使用快速幂是不错的选择（<br>大体的思路——<br>比如，要求3的7次方，7的二进制表示为<strong>111</strong>，<strong>位数为3</strong>，那么可以做如下拆分：<br><em><em>37= 32^0 * 32^1</em> 32^2</em>*<br><strong>(👆其实这个看不出规律，我们看看下面)</strong><br>同理，我们来试试3^28,28的二进制表示为11100，位数为5，那么应该这样拆分：<br><strong>3^28</strong>=** 32^2 *  32^3  *  32^4     //这里0和1位对应的值为0，不乘**<br>所以，要求a的b次幂，那么假设b的二进制表示有<strong>n位</strong>可以这样：<br><strong>ab=(a2^0<em>当前位的数)</em>……<em>(32^n-1</em>当前位的数)</strong><br>那么再来看y总的代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> a, b, p;<br>    cin&gt;&gt;a&gt;&gt;b&gt;&gt;p;<br>    <span class=\"hljs-keyword\">int</span> res = <span class=\"hljs-number\">1</span>%p;<span class=\"hljs-comment\">//防止一个特殊数字0</span><br>    <span class=\"hljs-keyword\">while</span> (b)<span class=\"hljs-comment\">//当b的二进制最后一位也为0的时候循环终止</span><br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(b&amp;<span class=\"hljs-number\">1</span>)<span class=\"hljs-comment\">//判断b的二进制最低位是否为1，是0的话不乘</span><br>            res = res * <span class=\"hljs-number\">1ll</span> * a%p;<span class=\"hljs-comment\">//*1ll防止数据溢出</span><br>        a =a * <span class=\"hljs-number\">1ll</span> * a%p;<span class=\"hljs-comment\">//%p防止数太大</span><br>        b&gt;&gt;=<span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">//这里将b的二进制右移一位，这样的操作会进行20次对应2^0~2^19</span><br>    &#125;<br>    cout &lt;&lt; res &lt;&lt; endl;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<p>对代码片段：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">if</span>(b&amp;<span class=\"hljs-number\">1</span>)<span class=\"hljs-comment\">//判断b的二进制最低位是否为1，是0的话不乘</span><br>            res = res * <span class=\"hljs-number\">1ll</span> * a%p;<span class=\"hljs-comment\">//*1ll防止数据溢出</span><br>        a =a * <span class=\"hljs-number\">1ll</span> * a%p;<span class=\"hljs-comment\">//%p防止数太大</span><br></code></pre></td></tr></table></figure>\n<p>这里<strong>警示</strong>一下：不要简写<code>res = res * 1ll * a%p</code>;为<code>res *=  1ll * a%p;</code><br><strong>这样会导致数据溢出，用此方法*1ll不能转化类型。</strong><br>的一个<strong>补充</strong>：这边两次求模不影响最终结果（因为题目要求求模），可以自己用数据推导一下下。<br>这里引用一个解释</p>\n<blockquote>\n<p>本题逻辑核心！！<br>说明:以下a(n)为a^(2^n)<br>    1.对于(a^b)%p式子的展开<br>        a^b=1*a(x1)<em>a(x2)<em>a(x3)…..<br>        a^b%p=( (1</em>a(x1)<em>a(x2)%p) * (a(x3)%p) ) %p<br>        1</em>a(x1)<em>a(x2)%p = ( (1</em>a(x1)%p) * (a(x2)%p) )%p<br>        1</em>a(x1)%p = ( (1%p) * (a(x1)%p) )%p<br>        所以res初始化值为1%p<br>        算法即是从下向上实现<br>    2.理解a = a *a % p<br>        迭代a： ( res * (a(xn)%p) )%p 其中的a(xn)%p = a(xn-1)*a(xn-1)%p<br>​</p>\n</blockquote>\n<p>有人要的C：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> a, b, p;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d %d %d&quot;</span>,&amp;a,&amp;b,&amp;p);<br>    <span class=\"hljs-keyword\">int</span> res = <span class=\"hljs-number\">1</span>%p;<span class=\"hljs-comment\">//防止一个特殊数字0</span><br>    <span class=\"hljs-keyword\">while</span> (b)<span class=\"hljs-comment\">//当b的二进制最后一位也为0的时候循环终止</span><br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(b&amp;<span class=\"hljs-number\">1</span>)<span class=\"hljs-comment\">//判断b的二进制最低位是否为1，是0的话不乘</span><br>            res = res * <span class=\"hljs-number\">1ll</span> * a%p;<span class=\"hljs-comment\">//*1ll防止数据溢出</span><br>        a =a * <span class=\"hljs-number\">1ll</span> * a%p;<span class=\"hljs-comment\">//%p防止数太大</span><br>        b&gt;&gt;=<span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">//这里将b的二进制右移一位，这样的操作会进行20次对应2^0~2^19</span><br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,res);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<p>使用递归的版本：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> ull unsigned long long</span><br><span class=\"hljs-function\">ull <span class=\"hljs-title\">quick_pow</span><span class=\"hljs-params\">(ull a,ull b,ull p)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(b==<span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>%p;<br>    a%=p;<br>    ull res=<span class=\"hljs-built_in\">quick_pow</span>(a,b&gt;&gt;<span class=\"hljs-number\">1</span>,p);<br>    <span class=\"hljs-keyword\">if</span>(b&amp;<span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> res*res%p*a%p;<br>    <span class=\"hljs-keyword\">return</span> res*res%p;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> a,b,p;<br>    cin.<span class=\"hljs-built_in\">tie</span>(<span class=\"hljs-number\">0</span>);<br>    ios::<span class=\"hljs-built_in\">sync_with_stdio</span>(<span class=\"hljs-literal\">false</span>);<br>    cin&gt;&gt;a&gt;&gt;b&gt;&gt;p;<br>    cout&lt;&lt;<span class=\"hljs-built_in\">quick_pow</span>(a,b,p)&lt;&lt;endl;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"首先贴一下链接：https-www-acwing-com-problem-content-91\"><a href=\"#首先贴一下链接：https-www-acwing-com-problem-content-91\" class=\"headerlink\" title=\"首先贴一下链接：https://www.acwing.com/problem/content/91/  \"></a>首先贴一下链接：<a href=\"https://www.acwing.com/problem/content/91/\">https://www.acwing.com/problem/content/91/</a>  </h2><h3 id=\"前置知识-位运算\"><a href=\"#前置知识-位运算\" class=\"headerlink\" title=\"前置知识:位运算\"></a>前置知识:<a href=\"/2021/11/20/bit-operation/\">位运算</a></h3><h2 id=\"看题\"><a href=\"#看题\" class=\"headerlink\" title=\"看题\"></a>看题</h2><blockquote>\n<p>求 a 的 b 次方对 p 取模的值。三个整数 a,b,p ,在同一行用空格隔开<br>输入样例<br>3 2 7<br>输出样例<br>2</p>\n</blockquote>\n<p>再发一次来链接：<a href=\"https://www.acwing.com/problem/content/91/\">https://www.acwing.com/problem/content/91/</a><br>因为C/C++一秒能算的数约为107~8次，而题目最大为109所以按照一般思路慢慢乘的话，必定超时，所以使用快速幂是不错的选择（<br>大体的思路——<br>比如，要求3的7次方，7的二进制表示为<strong>111</strong>，<strong>位数为3</strong>，那么可以做如下拆分：<br><em><em>37= 32^0 * 32^1</em> 32^2</em>*<br><strong>(👆其实这个看不出规律，我们看看下面)</strong><br>同理，我们来试试3^28,28的二进制表示为11100，位数为5，那么应该这样拆分：<br><strong>3^28</strong>=** 32^2 *  32^3  *  32^4     //这里0和1位对应的值为0，不乘**<br>所以，要求a的b次幂，那么假设b的二进制表示有<strong>n位</strong>可以这样：<br><strong>ab=(a2^0<em>当前位的数)</em>……<em>(32^n-1</em>当前位的数)</strong><br>那么再来看y总的代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> a, b, p;<br>    cin&gt;&gt;a&gt;&gt;b&gt;&gt;p;<br>    <span class=\"hljs-keyword\">int</span> res = <span class=\"hljs-number\">1</span>%p;<span class=\"hljs-comment\">//防止一个特殊数字0</span><br>    <span class=\"hljs-keyword\">while</span> (b)<span class=\"hljs-comment\">//当b的二进制最后一位也为0的时候循环终止</span><br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(b&amp;<span class=\"hljs-number\">1</span>)<span class=\"hljs-comment\">//判断b的二进制最低位是否为1，是0的话不乘</span><br>            res = res * <span class=\"hljs-number\">1ll</span> * a%p;<span class=\"hljs-comment\">//*1ll防止数据溢出</span><br>        a =a * <span class=\"hljs-number\">1ll</span> * a%p;<span class=\"hljs-comment\">//%p防止数太大</span><br>        b&gt;&gt;=<span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">//这里将b的二进制右移一位，这样的操作会进行20次对应2^0~2^19</span><br>    &#125;<br>    cout &lt;&lt; res &lt;&lt; endl;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<p>对代码片段：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">if</span>(b&amp;<span class=\"hljs-number\">1</span>)<span class=\"hljs-comment\">//判断b的二进制最低位是否为1，是0的话不乘</span><br>            res = res * <span class=\"hljs-number\">1ll</span> * a%p;<span class=\"hljs-comment\">//*1ll防止数据溢出</span><br>        a =a * <span class=\"hljs-number\">1ll</span> * a%p;<span class=\"hljs-comment\">//%p防止数太大</span><br></code></pre></td></tr></table></figure>\n<p>这里<strong>警示</strong>一下：不要简写<code>res = res * 1ll * a%p</code>;为<code>res *=  1ll * a%p;</code><br><strong>这样会导致数据溢出，用此方法*1ll不能转化类型。</strong><br>的一个<strong>补充</strong>：这边两次求模不影响最终结果（因为题目要求求模），可以自己用数据推导一下下。<br>这里引用一个解释</p>\n<blockquote>\n<p>本题逻辑核心！！<br>说明:以下a(n)为a^(2^n)<br>    1.对于(a^b)%p式子的展开<br>        a^b=1*a(x1)<em>a(x2)<em>a(x3)…..<br>        a^b%p=( (1</em>a(x1)<em>a(x2)%p) * (a(x3)%p) ) %p<br>        1</em>a(x1)<em>a(x2)%p = ( (1</em>a(x1)%p) * (a(x2)%p) )%p<br>        1</em>a(x1)%p = ( (1%p) * (a(x1)%p) )%p<br>        所以res初始化值为1%p<br>        算法即是从下向上实现<br>    2.理解a = a *a % p<br>        迭代a： ( res * (a(xn)%p) )%p 其中的a(xn)%p = a(xn-1)*a(xn-1)%p<br>​</p>\n</blockquote>\n<p>有人要的C：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> a, b, p;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d %d %d&quot;</span>,&amp;a,&amp;b,&amp;p);<br>    <span class=\"hljs-keyword\">int</span> res = <span class=\"hljs-number\">1</span>%p;<span class=\"hljs-comment\">//防止一个特殊数字0</span><br>    <span class=\"hljs-keyword\">while</span> (b)<span class=\"hljs-comment\">//当b的二进制最后一位也为0的时候循环终止</span><br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(b&amp;<span class=\"hljs-number\">1</span>)<span class=\"hljs-comment\">//判断b的二进制最低位是否为1，是0的话不乘</span><br>            res = res * <span class=\"hljs-number\">1ll</span> * a%p;<span class=\"hljs-comment\">//*1ll防止数据溢出</span><br>        a =a * <span class=\"hljs-number\">1ll</span> * a%p;<span class=\"hljs-comment\">//%p防止数太大</span><br>        b&gt;&gt;=<span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">//这里将b的二进制右移一位，这样的操作会进行20次对应2^0~2^19</span><br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,res);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<p>使用递归的版本：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> ull unsigned long long</span><br><span class=\"hljs-function\">ull <span class=\"hljs-title\">quick_pow</span><span class=\"hljs-params\">(ull a,ull b,ull p)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(b==<span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>%p;<br>    a%=p;<br>    ull res=<span class=\"hljs-built_in\">quick_pow</span>(a,b&gt;&gt;<span class=\"hljs-number\">1</span>,p);<br>    <span class=\"hljs-keyword\">if</span>(b&amp;<span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> res*res%p*a%p;<br>    <span class=\"hljs-keyword\">return</span> res*res%p;<br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> a,b,p;<br>    cin.<span class=\"hljs-built_in\">tie</span>(<span class=\"hljs-number\">0</span>);<br>    ios::<span class=\"hljs-built_in\">sync_with_stdio</span>(<span class=\"hljs-literal\">false</span>);<br>    cin&gt;&gt;a&gt;&gt;b&gt;&gt;p;<br>    cout&lt;&lt;<span class=\"hljs-built_in\">quick_pow</span>(a,b,p)&lt;&lt;endl;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n"},{"title":"浅谈浮点","date":"2021-11-19T18:04:53.000Z","_content":"> Q: 为什么浮点运算有误差？\n> ​\n\n> A: 因为你不可能让有限集和无限集一一映射的……\n\n\n---\n\n在看文章之前先看看万恶之源：\n**题目描述**\n给你一个简单的四则运算表达式，包含两个实数和一个运算符，请编程计算出结果\n**输入**\n表达式的格式为：s1 op s2， s1和s2是两个实数，op表示的是运算符(+,-,*,/)，也可能是其他字符。注意运算符两侧各有一个空格。\n**输出**\n如果运算符合法，输出表达式的值；**若运算符不合法或进行除法运算时除数是0**，**则输出\"Wrong input!**\"。最后结果小数点后保留两位。\n**样例输入 Copy**\n1.0 + 1.0\n**样例输出 Copy**\n**2.00**\n当你开开心心写完，并且用\nif(s2 == 0)\n完成“**若运算符不合法或进行除法运算时除数是0则输出\"Wrong input!**”的要求\n一交......——啪，一巴掌拍下来一个“**答案错误**”\n惊不惊喜，意不意外？\n当然oj很负责任的提醒你，使用“ `fabs(b) <= 1e-10`  ”来判断非法除数\n...面对莫名其妙的报错和提示，这一套连招，让你懵的猝不及防\n...咳咳，所以，咱这篇文章好好来扯一扯这“浮点数”\n\n---\n\n## 先看现象\n#### 条件判断超预期\n```java\nSystem.out.println( 1f == 0.9999999f );   // 打印：false\nSystem.out.println( 1f == 0.99999999f );  // 打印：true    纳尼？\n```\n#### 数据转换超预期\n```java\nfloat f = 1.1f;\ndouble d = (double) f;\nSystem.out.println(f);  // 打印：1.1\nSystem.out.println(d);  // 打印：1.100000023841858  纳尼？\n```\n#### 基本运算超预期\n```java\nSystem.out.println( 0.2 + 0.7 );  \n// 打印：0.8999999999999999   纳尼？\n```\n#### 数据自增超预期\n```java\nfloat f1 = 8455263f;\nfor (int i = 0; i < 10; i++) {\n    System.out.println(f1);\n    f1++;\n}\n// 打印：8455263.0\n// 打印：8455264.0\n// 打印：8455265.0\n// 打印：8455266.0\n// 打印：8455267.0\n// 打印：8455268.0\n// 打印：8455269.0\n// 打印：8455270.0\n// 打印：8455271.0\n// 打印：8455272.0\n\nfloat f2 = 84552631f;\nfor (int i = 0; i < 10; i++) {\n    System.out.println(f2);\n    f2++;\n}\n//    打印：8.4552632E7   纳尼？不是 +1了吗？\n//    打印：8.4552632E7   纳尼？不是 +1了吗？\n//    打印：8.4552632E7   纳尼？不是 +1了吗？\n//    打印：8.4552632E7   纳尼？不是 +1了吗？\n//    打印：8.4552632E7   纳尼？不是 +1了吗？\n//    打印：8.4552632E7   纳尼？不是 +1了吗？\n//    打印：8.4552632E7   纳尼？不是 +1了吗？\n//    打印：8.4552632E7   纳尼？不是 +1了吗？\n//    打印：8.4552632E7   纳尼？不是 +1了吗？\n//    打印：8.4552632E7   纳尼？不是 +1了吗？\n```\n## 原因出在哪里？\n我们就以第一个典型现象为例来分析一下：\n`System.out.println( 1f == 0.99999999f );`\n直接用代码去比较`1`和`0.99999999`，居然打印出`true`！\n这说明了什么？这说明了计算机压根**区分不出来**这两个数。这是为什么呢？\n我们不妨来简单思考一下：\n> 我们知道输入的这两个浮点数只是我们人类肉眼所看到的具体数值，是我们通常所理解的十进制数，但是计算机底层在计算时可不是按照十进制来计算的，学过基本计组原理的都知道，计算机底层最终都是基于像`010100100100110011011`这种`0、1`二进制来完成的。\n\n所以为了搞懂实际情况，我们应该将这两个十进制浮点数**转化到二进制空间**来看一看。\n**十进制浮点数转二进制** 怎么转、怎么计算，我想这应该属于基础计算机进制转换常识，在 **《计算机组成原理》** 类似的课上肯定学过了，咱就不在此赘述了，直接给出结果\n（把它转换到`IEEE 754 Single precision 32-bit`，也就float类型对应的精度）\n```java\n1.0（十进制）\n    ↓\n00111111 10000000 00000000 00000000（二进制）\n    ↓\n0x3F800000（十六进制）\n---------------------------------------------\n0.99999999（十进制）\n    ↓\n00111111 10000000 00000000 00000000（二进制）\n    ↓\n0x3F800000（十六进制）\n```\n**果不其然**，这两个十进制浮点数的底层二进制表示是一毛一样的，怪不得`==`的判断结果返回`true`(\n但是`1f == 0.9999999f`返回的结果是符合预期的，打印`false`，我们也把它们转换到二进制模式下看看情况：\n```java\n1.0（十进制）\n    ↓\n00111111 10000000 00000000 00000000（二进制）\n    ↓\n0x3F800000（十六进制）\n-----------------------------------------------\n0.9999999（十进制）\n    ↓\n00111111 01111111 11111111 11111110（二进制）\n    ↓\n0x3F7FFFFE（十六进制）\n```\n哦，很明显，它俩的二进制数字表示确实不一样，这是理所应当的结果。\n那么为什么`0.99999999`的底层二进制表示竟然是：`00111111 10000000 00000000 00000000`呢？\n这不明明是浮点数`1.0`的二进制表示吗？\n这就要谈一下浮点数的精度问题了。\n## 浮点数的精度问题！\n学过 **《计算机组成原理》** 这门课的小伙伴应该都知道，浮点数在计算机中的存储方式遵循**IEEE 754 浮点数计数标准**，可以用科学计数法表示为：\n ![image.png](https://cdn.nlark.com/yuque/0/2021/png/21803058/1634052108498-bfcbaa1f-0c49-4215-a227-37d5c360192c.png#clientId=u8b3795bf-1b0c-4&from=paste&height=44&id=uc6d37584&margin=%5Bobject%20Object%5D&name=image.png&originHeight=42&originWidth=145&originalType=binary&ratio=1&size=1068&status=done&style=none&taskId=u6346e733-e6fe-4c8e-bc7d-528d8f01f31&width=152.49159240722656)\n只要给出：`**符号（S）**、**阶码部分（E）**、**尾数部分（M）**` 这三个维度的信息，一个浮点数的表示就完全确定下来了，所以`float`和`double`这两种浮点数在内存中的存储结构如下所示：\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/21803058/1634052159688-244db766-1e00-45e5-bab7-e106dfdb1a46.png#clientId=u8b3795bf-1b0c-4&from=paste&height=295&id=u2eb81aaf&margin=%5Bobject%20Object%5D&name=image.png&originHeight=424&originWidth=855&originalType=binary&ratio=1&size=109910&status=done&style=none&taskId=u635967f1-8010-4199-a9b8-96e6741d560&width=595.4999694824219)\n#### 1、符号部分（S）\n`0-正` ` 1-负`\n#### 2、阶码部分（E）（指数部分）：\n\n- 对于`float`型浮点数，指数部分8位，考虑可正可负，因此可以表示的指数范围为`-127 ~ 128`\n- 对于`double`型浮点数，指数部分11位，考虑可正可负，因此可以表示的指数范围为`-1023 ~ 1024`\n#### 3、尾数部分（M）：\n浮点数的精度是由尾数的位数来决定的：\n\n- 对于`float`型浮点数，尾数部分`23`位，换算成十进制就是` 2^23=8388608`，所以十进制精度只有`6 ~ 7`位；\n- 对于`double`型浮点数，尾数部分`52`位，换算成十进制就是 `2^52 = 4503599627370496`，所以十进制精度只有`15 ~ 16`位\n\n所以对于上面的数值`0.99999999f`，很明显已经超过了`float`型浮点数据的精度范围，出问题也是在所难免的。\n## 进制转换计算案例\n上面说的是IEEE标准规定的内容，属于理论规约。那一个小数到底要怎么换算成二进制呢？我们得拿**实际例子**来解释。\n### 先来个简单的例子\n比如：**把十进制小数0.875转换成二进制，具体怎么操作？**\n可以分几大步走：\n**1、以小数点为界，拆分**\n**2、整数部分转换**\n整数转二进制我想大家应该都熟悉，使用：**除2取余法** 即可。而这里的0.875整数部分为0，无需操作。\n**3、小数部分转换**\n小数部分的转换不同于整数部分，采用的是 **“乘2取整法”** ，图示一下就明白了：\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/21803058/1634052709260-475c4ad1-dbb8-4984-921c-61206cfcf882.png#clientId=u8b3795bf-1b0c-4&from=paste&height=255&id=u43a13574&margin=%5Bobject%20Object%5D&name=image.png&originHeight=509&originWidth=863&originalType=binary&ratio=1&size=260220&status=done&style=none&taskId=ua63c4846-23b6-4c37-a848-9012485232f&width=431.5)\n\n**4、合并结果**\n整数部分 + 小数部分，最终得到二进制结果为0.111。\n所以该结果按照上一节所述的**尾数 + 阶码**的计算机计数方式，则可以表示为：\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/21803058/1634052721645-e3c814b2-3158-42bd-8360-855ab97d553a.png#clientId=u8b3795bf-1b0c-4&from=paste&height=115&id=u72f81752&margin=%5Bobject%20Object%5D&name=image.png&originHeight=229&originWidth=615&originalType=binary&ratio=1&size=28736&status=done&style=none&taskId=u33b13787-9ba5-4628-81d4-0cf7d69dc84&width=307.5)\n\n所以对应可得：\n\n- **符号位**：0\n- **阶码（E）部分**：若以float为例，应为 127 +（-1）= 126，因此二进制表示为：01111110\n- **尾数部分（M）**：若以float为例，应为23位，因此尾部补齐后为11000000000000000000000。\n\n因此最终的总结果为（以32位精度float表示）：\n00111111011000000000000000000000\n### 再来个复杂点例子\n再比如：**把十进制小数6.36转换成二进制，具体怎么操作？**\n但凡能用图示，我就不想写文字，所以用一张图就可以解释得明明白白：\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/21803058/1634052394464-bb81f88f-a43b-4d3b-8ad9-4bb95843d17d.png#clientId=u8b3795bf-1b0c-4&from=paste&id=ufbf99b5c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=578&originWidth=720&originalType=url&ratio=1&size=243586&status=done&style=none&taskId=u55c8182f-bd48-4d2f-90fc-e34e78f9784)\n\n整数部分 + 小数部分，因此最终得到的结果二进制结果为110.01011100...。\n还是按照上一节所述的**尾数 + 阶码**的计算机计数方式，则可以表示为：\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/21803058/1634052890028-0203b28a-27e8-4311-90ad-17b547a4cb7b.png#clientId=u8b3795bf-1b0c-4&from=paste&height=107&id=u827605bc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=214&originWidth=827&originalType=binary&ratio=1&size=33294&status=done&style=none&taskId=u0643d8ec-2f94-426d-a09a-0cbc1e82dd7&width=413.5)\n\n所以对应可得：\n\n- **符号位**：0\n- **阶码（E）部分**：若以float为例，应为 127 +（2）= 129，因此二进制表示为：10000001\n- **尾数部分（M）**：1001011100...，其实它本身无限不循环，但若以float型精度来截取23位，则可以表示为10010111000010100011111\n\n因此最终的总结果为（以32位精度float表示）：\n01000000110010111000010100011111\n所以像这种无限位数的尾数情况，用计算机存储产生截取是必然的，必定会有一定的**精度损失**！所以这也从根本上解释了为什么float或者double这种类型数据使用时的风险性，因此必须要结合实际业务理性考量。\n## 精度问题如何解决\n所以如果涉及**商品金额**、**交易值**、**货币计算**等这种对精度要求很高的场景该怎么办呢？\n### 用字符串或者数组解决多位数问题\n校招刷过算法题的小伙伴们应该都知道，用字符串或者数组表示大数是一个典型的解题思路。\n比如经典面试题：**编写两个任意位数大数的加法、减法、乘法等运算**。\n这时候我们我们可以用字符串或者数组来表示这种大数，然后按照四则运算的规则来手动模拟出具体计算过程，中间还需要考虑各种诸如：**进位**、**借位**、**符号**等等问题的处理，确实十分复杂，本文不做赘述。\n\n---\n\n## 附\n### 答案\n```c\n#include<stdio.h>\n#include<math.h>\nint main()\n{\n   double a=0.0;\n   double b=0.0;\n   char operation=0;\n\n   scanf(\"%lf %c %lf\",&a,&operation,&b);\n   \n   switch(operation)\n   {\n      case '+':\n           printf(\"%.2lf\\n\",a+b);\n          break;\n          \n      case '-':\n           printf(\"%.2lf\\n\",a-b);\n           break;\n           \n      case '*':\n           printf(\"%.2lf\\n\",a*b);\n           break;\n        \n      case '/':\n           if(fabs(b) <= 1e-10)\n             printf(\"Wrong input!\");\n           else\n             printf(\"%.2lf\\n\",a/b);\n           break;\n      \n      default:\n          printf(\"Wrong input!\");\n          break;          \n    }\n    return 0;\n}\n```\n### 以前的解释\n> 如果你确实就是想判断 y 是不是 0，那么是可以直接写 y != 0 的。如果这个 y 有别的作用，比如作为除数参与其他运算，由于 C 语言不支持无限精度计算，一个极小的非零数和零一样可能导致异常的结果，因此需要排除这种情况。（知乎）\n\n>  用浮点方式表示实数时，实数的小数部分在十进制转二进制时会出现无限循环，只能截断，所以就不准确了，是对这个实数的近似。  \n> ​\n\n> 那么，当这个数的精度无限大后，它对于编译器来说，就等价为\"0\"了\n\n\n","source":"_posts/浅谈浮点.md","raw":"---\ntitle: 浅谈浮点\ndate: 2021-11-20 02:04:53\ntags: algorithm \ncategories: 编程语言\n---\n> Q: 为什么浮点运算有误差？\n> ​\n\n> A: 因为你不可能让有限集和无限集一一映射的……\n\n\n---\n\n在看文章之前先看看万恶之源：\n**题目描述**\n给你一个简单的四则运算表达式，包含两个实数和一个运算符，请编程计算出结果\n**输入**\n表达式的格式为：s1 op s2， s1和s2是两个实数，op表示的是运算符(+,-,*,/)，也可能是其他字符。注意运算符两侧各有一个空格。\n**输出**\n如果运算符合法，输出表达式的值；**若运算符不合法或进行除法运算时除数是0**，**则输出\"Wrong input!**\"。最后结果小数点后保留两位。\n**样例输入 Copy**\n1.0 + 1.0\n**样例输出 Copy**\n**2.00**\n当你开开心心写完，并且用\nif(s2 == 0)\n完成“**若运算符不合法或进行除法运算时除数是0则输出\"Wrong input!**”的要求\n一交......——啪，一巴掌拍下来一个“**答案错误**”\n惊不惊喜，意不意外？\n当然oj很负责任的提醒你，使用“ `fabs(b) <= 1e-10`  ”来判断非法除数\n...面对莫名其妙的报错和提示，这一套连招，让你懵的猝不及防\n...咳咳，所以，咱这篇文章好好来扯一扯这“浮点数”\n\n---\n\n## 先看现象\n#### 条件判断超预期\n```java\nSystem.out.println( 1f == 0.9999999f );   // 打印：false\nSystem.out.println( 1f == 0.99999999f );  // 打印：true    纳尼？\n```\n#### 数据转换超预期\n```java\nfloat f = 1.1f;\ndouble d = (double) f;\nSystem.out.println(f);  // 打印：1.1\nSystem.out.println(d);  // 打印：1.100000023841858  纳尼？\n```\n#### 基本运算超预期\n```java\nSystem.out.println( 0.2 + 0.7 );  \n// 打印：0.8999999999999999   纳尼？\n```\n#### 数据自增超预期\n```java\nfloat f1 = 8455263f;\nfor (int i = 0; i < 10; i++) {\n    System.out.println(f1);\n    f1++;\n}\n// 打印：8455263.0\n// 打印：8455264.0\n// 打印：8455265.0\n// 打印：8455266.0\n// 打印：8455267.0\n// 打印：8455268.0\n// 打印：8455269.0\n// 打印：8455270.0\n// 打印：8455271.0\n// 打印：8455272.0\n\nfloat f2 = 84552631f;\nfor (int i = 0; i < 10; i++) {\n    System.out.println(f2);\n    f2++;\n}\n//    打印：8.4552632E7   纳尼？不是 +1了吗？\n//    打印：8.4552632E7   纳尼？不是 +1了吗？\n//    打印：8.4552632E7   纳尼？不是 +1了吗？\n//    打印：8.4552632E7   纳尼？不是 +1了吗？\n//    打印：8.4552632E7   纳尼？不是 +1了吗？\n//    打印：8.4552632E7   纳尼？不是 +1了吗？\n//    打印：8.4552632E7   纳尼？不是 +1了吗？\n//    打印：8.4552632E7   纳尼？不是 +1了吗？\n//    打印：8.4552632E7   纳尼？不是 +1了吗？\n//    打印：8.4552632E7   纳尼？不是 +1了吗？\n```\n## 原因出在哪里？\n我们就以第一个典型现象为例来分析一下：\n`System.out.println( 1f == 0.99999999f );`\n直接用代码去比较`1`和`0.99999999`，居然打印出`true`！\n这说明了什么？这说明了计算机压根**区分不出来**这两个数。这是为什么呢？\n我们不妨来简单思考一下：\n> 我们知道输入的这两个浮点数只是我们人类肉眼所看到的具体数值，是我们通常所理解的十进制数，但是计算机底层在计算时可不是按照十进制来计算的，学过基本计组原理的都知道，计算机底层最终都是基于像`010100100100110011011`这种`0、1`二进制来完成的。\n\n所以为了搞懂实际情况，我们应该将这两个十进制浮点数**转化到二进制空间**来看一看。\n**十进制浮点数转二进制** 怎么转、怎么计算，我想这应该属于基础计算机进制转换常识，在 **《计算机组成原理》** 类似的课上肯定学过了，咱就不在此赘述了，直接给出结果\n（把它转换到`IEEE 754 Single precision 32-bit`，也就float类型对应的精度）\n```java\n1.0（十进制）\n    ↓\n00111111 10000000 00000000 00000000（二进制）\n    ↓\n0x3F800000（十六进制）\n---------------------------------------------\n0.99999999（十进制）\n    ↓\n00111111 10000000 00000000 00000000（二进制）\n    ↓\n0x3F800000（十六进制）\n```\n**果不其然**，这两个十进制浮点数的底层二进制表示是一毛一样的，怪不得`==`的判断结果返回`true`(\n但是`1f == 0.9999999f`返回的结果是符合预期的，打印`false`，我们也把它们转换到二进制模式下看看情况：\n```java\n1.0（十进制）\n    ↓\n00111111 10000000 00000000 00000000（二进制）\n    ↓\n0x3F800000（十六进制）\n-----------------------------------------------\n0.9999999（十进制）\n    ↓\n00111111 01111111 11111111 11111110（二进制）\n    ↓\n0x3F7FFFFE（十六进制）\n```\n哦，很明显，它俩的二进制数字表示确实不一样，这是理所应当的结果。\n那么为什么`0.99999999`的底层二进制表示竟然是：`00111111 10000000 00000000 00000000`呢？\n这不明明是浮点数`1.0`的二进制表示吗？\n这就要谈一下浮点数的精度问题了。\n## 浮点数的精度问题！\n学过 **《计算机组成原理》** 这门课的小伙伴应该都知道，浮点数在计算机中的存储方式遵循**IEEE 754 浮点数计数标准**，可以用科学计数法表示为：\n ![image.png](https://cdn.nlark.com/yuque/0/2021/png/21803058/1634052108498-bfcbaa1f-0c49-4215-a227-37d5c360192c.png#clientId=u8b3795bf-1b0c-4&from=paste&height=44&id=uc6d37584&margin=%5Bobject%20Object%5D&name=image.png&originHeight=42&originWidth=145&originalType=binary&ratio=1&size=1068&status=done&style=none&taskId=u6346e733-e6fe-4c8e-bc7d-528d8f01f31&width=152.49159240722656)\n只要给出：`**符号（S）**、**阶码部分（E）**、**尾数部分（M）**` 这三个维度的信息，一个浮点数的表示就完全确定下来了，所以`float`和`double`这两种浮点数在内存中的存储结构如下所示：\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/21803058/1634052159688-244db766-1e00-45e5-bab7-e106dfdb1a46.png#clientId=u8b3795bf-1b0c-4&from=paste&height=295&id=u2eb81aaf&margin=%5Bobject%20Object%5D&name=image.png&originHeight=424&originWidth=855&originalType=binary&ratio=1&size=109910&status=done&style=none&taskId=u635967f1-8010-4199-a9b8-96e6741d560&width=595.4999694824219)\n#### 1、符号部分（S）\n`0-正` ` 1-负`\n#### 2、阶码部分（E）（指数部分）：\n\n- 对于`float`型浮点数，指数部分8位，考虑可正可负，因此可以表示的指数范围为`-127 ~ 128`\n- 对于`double`型浮点数，指数部分11位，考虑可正可负，因此可以表示的指数范围为`-1023 ~ 1024`\n#### 3、尾数部分（M）：\n浮点数的精度是由尾数的位数来决定的：\n\n- 对于`float`型浮点数，尾数部分`23`位，换算成十进制就是` 2^23=8388608`，所以十进制精度只有`6 ~ 7`位；\n- 对于`double`型浮点数，尾数部分`52`位，换算成十进制就是 `2^52 = 4503599627370496`，所以十进制精度只有`15 ~ 16`位\n\n所以对于上面的数值`0.99999999f`，很明显已经超过了`float`型浮点数据的精度范围，出问题也是在所难免的。\n## 进制转换计算案例\n上面说的是IEEE标准规定的内容，属于理论规约。那一个小数到底要怎么换算成二进制呢？我们得拿**实际例子**来解释。\n### 先来个简单的例子\n比如：**把十进制小数0.875转换成二进制，具体怎么操作？**\n可以分几大步走：\n**1、以小数点为界，拆分**\n**2、整数部分转换**\n整数转二进制我想大家应该都熟悉，使用：**除2取余法** 即可。而这里的0.875整数部分为0，无需操作。\n**3、小数部分转换**\n小数部分的转换不同于整数部分，采用的是 **“乘2取整法”** ，图示一下就明白了：\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/21803058/1634052709260-475c4ad1-dbb8-4984-921c-61206cfcf882.png#clientId=u8b3795bf-1b0c-4&from=paste&height=255&id=u43a13574&margin=%5Bobject%20Object%5D&name=image.png&originHeight=509&originWidth=863&originalType=binary&ratio=1&size=260220&status=done&style=none&taskId=ua63c4846-23b6-4c37-a848-9012485232f&width=431.5)\n\n**4、合并结果**\n整数部分 + 小数部分，最终得到二进制结果为0.111。\n所以该结果按照上一节所述的**尾数 + 阶码**的计算机计数方式，则可以表示为：\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/21803058/1634052721645-e3c814b2-3158-42bd-8360-855ab97d553a.png#clientId=u8b3795bf-1b0c-4&from=paste&height=115&id=u72f81752&margin=%5Bobject%20Object%5D&name=image.png&originHeight=229&originWidth=615&originalType=binary&ratio=1&size=28736&status=done&style=none&taskId=u33b13787-9ba5-4628-81d4-0cf7d69dc84&width=307.5)\n\n所以对应可得：\n\n- **符号位**：0\n- **阶码（E）部分**：若以float为例，应为 127 +（-1）= 126，因此二进制表示为：01111110\n- **尾数部分（M）**：若以float为例，应为23位，因此尾部补齐后为11000000000000000000000。\n\n因此最终的总结果为（以32位精度float表示）：\n00111111011000000000000000000000\n### 再来个复杂点例子\n再比如：**把十进制小数6.36转换成二进制，具体怎么操作？**\n但凡能用图示，我就不想写文字，所以用一张图就可以解释得明明白白：\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/21803058/1634052394464-bb81f88f-a43b-4d3b-8ad9-4bb95843d17d.png#clientId=u8b3795bf-1b0c-4&from=paste&id=ufbf99b5c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=578&originWidth=720&originalType=url&ratio=1&size=243586&status=done&style=none&taskId=u55c8182f-bd48-4d2f-90fc-e34e78f9784)\n\n整数部分 + 小数部分，因此最终得到的结果二进制结果为110.01011100...。\n还是按照上一节所述的**尾数 + 阶码**的计算机计数方式，则可以表示为：\n\n![image.png](https://cdn.nlark.com/yuque/0/2021/png/21803058/1634052890028-0203b28a-27e8-4311-90ad-17b547a4cb7b.png#clientId=u8b3795bf-1b0c-4&from=paste&height=107&id=u827605bc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=214&originWidth=827&originalType=binary&ratio=1&size=33294&status=done&style=none&taskId=u0643d8ec-2f94-426d-a09a-0cbc1e82dd7&width=413.5)\n\n所以对应可得：\n\n- **符号位**：0\n- **阶码（E）部分**：若以float为例，应为 127 +（2）= 129，因此二进制表示为：10000001\n- **尾数部分（M）**：1001011100...，其实它本身无限不循环，但若以float型精度来截取23位，则可以表示为10010111000010100011111\n\n因此最终的总结果为（以32位精度float表示）：\n01000000110010111000010100011111\n所以像这种无限位数的尾数情况，用计算机存储产生截取是必然的，必定会有一定的**精度损失**！所以这也从根本上解释了为什么float或者double这种类型数据使用时的风险性，因此必须要结合实际业务理性考量。\n## 精度问题如何解决\n所以如果涉及**商品金额**、**交易值**、**货币计算**等这种对精度要求很高的场景该怎么办呢？\n### 用字符串或者数组解决多位数问题\n校招刷过算法题的小伙伴们应该都知道，用字符串或者数组表示大数是一个典型的解题思路。\n比如经典面试题：**编写两个任意位数大数的加法、减法、乘法等运算**。\n这时候我们我们可以用字符串或者数组来表示这种大数，然后按照四则运算的规则来手动模拟出具体计算过程，中间还需要考虑各种诸如：**进位**、**借位**、**符号**等等问题的处理，确实十分复杂，本文不做赘述。\n\n---\n\n## 附\n### 答案\n```c\n#include<stdio.h>\n#include<math.h>\nint main()\n{\n   double a=0.0;\n   double b=0.0;\n   char operation=0;\n\n   scanf(\"%lf %c %lf\",&a,&operation,&b);\n   \n   switch(operation)\n   {\n      case '+':\n           printf(\"%.2lf\\n\",a+b);\n          break;\n          \n      case '-':\n           printf(\"%.2lf\\n\",a-b);\n           break;\n           \n      case '*':\n           printf(\"%.2lf\\n\",a*b);\n           break;\n        \n      case '/':\n           if(fabs(b) <= 1e-10)\n             printf(\"Wrong input!\");\n           else\n             printf(\"%.2lf\\n\",a/b);\n           break;\n      \n      default:\n          printf(\"Wrong input!\");\n          break;          \n    }\n    return 0;\n}\n```\n### 以前的解释\n> 如果你确实就是想判断 y 是不是 0，那么是可以直接写 y != 0 的。如果这个 y 有别的作用，比如作为除数参与其他运算，由于 C 语言不支持无限精度计算，一个极小的非零数和零一样可能导致异常的结果，因此需要排除这种情况。（知乎）\n\n>  用浮点方式表示实数时，实数的小数部分在十进制转二进制时会出现无限循环，只能截断，所以就不准确了，是对这个实数的近似。  \n> ​\n\n> 那么，当这个数的精度无限大后，它对于编译器来说，就等价为\"0\"了\n\n\n","slug":"浅谈浮点","published":1,"updated":"2021-12-19T06:36:13.325Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxcz8ryf0010f8v09jj8gni4","content":"<blockquote>\n<p>Q: 为什么浮点运算有误差？<br>​</p>\n</blockquote>\n<blockquote>\n<p>A: 因为你不可能让有限集和无限集一一映射的……</p>\n</blockquote>\n<hr>\n<p>在看文章之前先看看万恶之源：<br><strong>题目描述</strong><br>给你一个简单的四则运算表达式，包含两个实数和一个运算符，请编程计算出结果<br><strong>输入</strong><br>表达式的格式为：s1 op s2， s1和s2是两个实数，op表示的是运算符(+,-,*,/)，也可能是其他字符。注意运算符两侧各有一个空格。<br><strong>输出</strong><br>如果运算符合法，输出表达式的值；<strong>若运算符不合法或进行除法运算时除数是0</strong>，<strong>则输出”Wrong input!</strong>“。最后结果小数点后保留两位。<br><strong>样例输入 Copy</strong><br>1.0 + 1.0<br><strong>样例输出 Copy</strong><br><strong>2.00</strong><br>当你开开心心写完，并且用<br>if(s2 == 0)<br>完成“<strong>若运算符不合法或进行除法运算时除数是0则输出”Wrong input!<strong>”的要求<br>一交……——啪，一巴掌拍下来一个“</strong>答案错误</strong>”<br>惊不惊喜，意不意外？<br>当然oj很负责任的提醒你，使用“ <code>fabs(b) &lt;= 1e-10</code>  ”来判断非法除数<br>…面对莫名其妙的报错和提示，这一套连招，让你懵的猝不及防<br>…咳咳，所以，咱这篇文章好好来扯一扯这“浮点数”</p>\n<hr>\n<h2 id=\"先看现象\"><a href=\"#先看现象\" class=\"headerlink\" title=\"先看现象\"></a>先看现象</h2><h4 id=\"条件判断超预期\"><a href=\"#条件判断超预期\" class=\"headerlink\" title=\"条件判断超预期\"></a>条件判断超预期</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">System.out.println( <span class=\"hljs-number\">1f</span> == <span class=\"hljs-number\">0.9999999f</span> );   <span class=\"hljs-comment\">// 打印：false</span><br>System.out.println( <span class=\"hljs-number\">1f</span> == <span class=\"hljs-number\">0.99999999f</span> );  <span class=\"hljs-comment\">// 打印：true    纳尼？</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"数据转换超预期\"><a href=\"#数据转换超预期\" class=\"headerlink\" title=\"数据转换超预期\"></a>数据转换超预期</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">float</span> f = <span class=\"hljs-number\">1.1f</span>;<br><span class=\"hljs-keyword\">double</span> d = (<span class=\"hljs-keyword\">double</span>) f;<br>System.out.println(f);  <span class=\"hljs-comment\">// 打印：1.1</span><br>System.out.println(d);  <span class=\"hljs-comment\">// 打印：1.100000023841858  纳尼？</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"基本运算超预期\"><a href=\"#基本运算超预期\" class=\"headerlink\" title=\"基本运算超预期\"></a>基本运算超预期</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">System.out.println( <span class=\"hljs-number\">0.2</span> + <span class=\"hljs-number\">0.7</span> );  <br><span class=\"hljs-comment\">// 打印：0.8999999999999999   纳尼？</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"数据自增超预期\"><a href=\"#数据自增超预期\" class=\"headerlink\" title=\"数据自增超预期\"></a>数据自增超预期</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">float</span> f1 = <span class=\"hljs-number\">8455263f</span>;<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;<br>    System.out.println(f1);<br>    f1++;<br>&#125;<br><span class=\"hljs-comment\">// 打印：8455263.0</span><br><span class=\"hljs-comment\">// 打印：8455264.0</span><br><span class=\"hljs-comment\">// 打印：8455265.0</span><br><span class=\"hljs-comment\">// 打印：8455266.0</span><br><span class=\"hljs-comment\">// 打印：8455267.0</span><br><span class=\"hljs-comment\">// 打印：8455268.0</span><br><span class=\"hljs-comment\">// 打印：8455269.0</span><br><span class=\"hljs-comment\">// 打印：8455270.0</span><br><span class=\"hljs-comment\">// 打印：8455271.0</span><br><span class=\"hljs-comment\">// 打印：8455272.0</span><br><br><span class=\"hljs-keyword\">float</span> f2 = <span class=\"hljs-number\">84552631f</span>;<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;<br>    System.out.println(f2);<br>    f2++;<br>&#125;<br><span class=\"hljs-comment\">//    打印：8.4552632E7   纳尼？不是 +1了吗？</span><br><span class=\"hljs-comment\">//    打印：8.4552632E7   纳尼？不是 +1了吗？</span><br><span class=\"hljs-comment\">//    打印：8.4552632E7   纳尼？不是 +1了吗？</span><br><span class=\"hljs-comment\">//    打印：8.4552632E7   纳尼？不是 +1了吗？</span><br><span class=\"hljs-comment\">//    打印：8.4552632E7   纳尼？不是 +1了吗？</span><br><span class=\"hljs-comment\">//    打印：8.4552632E7   纳尼？不是 +1了吗？</span><br><span class=\"hljs-comment\">//    打印：8.4552632E7   纳尼？不是 +1了吗？</span><br><span class=\"hljs-comment\">//    打印：8.4552632E7   纳尼？不是 +1了吗？</span><br><span class=\"hljs-comment\">//    打印：8.4552632E7   纳尼？不是 +1了吗？</span><br><span class=\"hljs-comment\">//    打印：8.4552632E7   纳尼？不是 +1了吗？</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"原因出在哪里？\"><a href=\"#原因出在哪里？\" class=\"headerlink\" title=\"原因出在哪里？\"></a>原因出在哪里？</h2><p>我们就以第一个典型现象为例来分析一下：<br><code>System.out.println( 1f == 0.99999999f );</code><br>直接用代码去比较<code>1</code>和<code>0.99999999</code>，居然打印出<code>true</code>！<br>这说明了什么？这说明了计算机压根<strong>区分不出来</strong>这两个数。这是为什么呢？<br>我们不妨来简单思考一下：</p>\n<blockquote>\n<p>我们知道输入的这两个浮点数只是我们人类肉眼所看到的具体数值，是我们通常所理解的十进制数，但是计算机底层在计算时可不是按照十进制来计算的，学过基本计组原理的都知道，计算机底层最终都是基于像<code>010100100100110011011</code>这种<code>0、1</code>二进制来完成的。</p>\n</blockquote>\n<p>所以为了搞懂实际情况，我们应该将这两个十进制浮点数<strong>转化到二进制空间</strong>来看一看。<br><strong>十进制浮点数转二进制</strong> 怎么转、怎么计算，我想这应该属于基础计算机进制转换常识，在 <strong>《计算机组成原理》</strong> 类似的课上肯定学过了，咱就不在此赘述了，直接给出结果<br>（把它转换到<code>IEEE 754 Single precision 32-bit</code>，也就float类型对应的精度）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-number\">1.0</span>（十进制）<br>    ↓<br><span class=\"hljs-number\">00111111</span> <span class=\"hljs-number\">10000000</span> <span class=\"hljs-number\">00000000</span> <span class=\"hljs-number\">00000000</span>（二进制）<br>    ↓<br><span class=\"hljs-number\">0x3F800000</span>（十六进制）<br>---------------------------------------------<br><span class=\"hljs-number\">0.99999999</span>（十进制）<br>    ↓<br><span class=\"hljs-number\">00111111</span> <span class=\"hljs-number\">10000000</span> <span class=\"hljs-number\">00000000</span> <span class=\"hljs-number\">00000000</span>（二进制）<br>    ↓<br><span class=\"hljs-number\">0x3F800000</span>（十六进制）<br></code></pre></td></tr></table></figure>\n<p><strong>果不其然</strong>，这两个十进制浮点数的底层二进制表示是一毛一样的，怪不得<code>==</code>的判断结果返回<code>true</code>(<br>但是<code>1f == 0.9999999f</code>返回的结果是符合预期的，打印<code>false</code>，我们也把它们转换到二进制模式下看看情况：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-number\">1.0</span>（十进制）<br>    ↓<br><span class=\"hljs-number\">00111111</span> <span class=\"hljs-number\">10000000</span> <span class=\"hljs-number\">00000000</span> <span class=\"hljs-number\">00000000</span>（二进制）<br>    ↓<br><span class=\"hljs-number\">0x3F800000</span>（十六进制）<br>-----------------------------------------------<br><span class=\"hljs-number\">0.9999999</span>（十进制）<br>    ↓<br><span class=\"hljs-number\">00111111</span> <span class=\"hljs-number\">01111111</span> <span class=\"hljs-number\">11111111</span> <span class=\"hljs-number\">11111110</span>（二进制）<br>    ↓<br><span class=\"hljs-number\">0x3F7FFFFE</span>（十六进制）<br></code></pre></td></tr></table></figure>\n<p>哦，很明显，它俩的二进制数字表示确实不一样，这是理所应当的结果。<br>那么为什么<code>0.99999999</code>的底层二进制表示竟然是：<code>00111111 10000000 00000000 00000000</code>呢？<br>这不明明是浮点数<code>1.0</code>的二进制表示吗？<br>这就要谈一下浮点数的精度问题了。</p>\n<h2 id=\"浮点数的精度问题！\"><a href=\"#浮点数的精度问题！\" class=\"headerlink\" title=\"浮点数的精度问题！\"></a>浮点数的精度问题！</h2><p>学过 <strong>《计算机组成原理》</strong> 这门课的小伙伴应该都知道，浮点数在计算机中的存储方式遵循<strong>IEEE 754 浮点数计数标准</strong>，可以用科学计数法表示为：<br> <img src=\"https://cdn.nlark.com/yuque/0/2021/png/21803058/1634052108498-bfcbaa1f-0c49-4215-a227-37d5c360192c.png#clientId=u8b3795bf-1b0c-4&from=paste&height=44&id=uc6d37584&margin=%5Bobject%20Object%5D&name=image.png&originHeight=42&originWidth=145&originalType=binary&ratio=1&size=1068&status=done&style=none&taskId=u6346e733-e6fe-4c8e-bc7d-528d8f01f31&width=152.49159240722656\" alt=\"image.png\"><br>只要给出：<code>**符号（S）**、**阶码部分（E）**、**尾数部分（M）**</code> 这三个维度的信息，一个浮点数的表示就完全确定下来了，所以<code>float</code>和<code>double</code>这两种浮点数在内存中的存储结构如下所示：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/21803058/1634052159688-244db766-1e00-45e5-bab7-e106dfdb1a46.png#clientId=u8b3795bf-1b0c-4&from=paste&height=295&id=u2eb81aaf&margin=%5Bobject%20Object%5D&name=image.png&originHeight=424&originWidth=855&originalType=binary&ratio=1&size=109910&status=done&style=none&taskId=u635967f1-8010-4199-a9b8-96e6741d560&width=595.4999694824219\" alt=\"image.png\"></p>\n<h4 id=\"1、符号部分（S）\"><a href=\"#1、符号部分（S）\" class=\"headerlink\" title=\"1、符号部分（S）\"></a>1、符号部分（S）</h4><p><code>0-正</code> <code> 1-负</code></p>\n<h4 id=\"2、阶码部分（E）（指数部分）：\"><a href=\"#2、阶码部分（E）（指数部分）：\" class=\"headerlink\" title=\"2、阶码部分（E）（指数部分）：\"></a>2、阶码部分（E）（指数部分）：</h4><ul>\n<li><p>对于<code>float</code>型浮点数，指数部分8位，考虑可正可负，因此可以表示的指数范围为<code>-127 ~ 128</code></p>\n</li>\n<li><p>对于<code>double</code>型浮点数，指数部分11位，考虑可正可负，因此可以表示的指数范围为<code>-1023 ~ 1024</code></p>\n<h4 id=\"3、尾数部分（M）：\"><a href=\"#3、尾数部分（M）：\" class=\"headerlink\" title=\"3、尾数部分（M）：\"></a>3、尾数部分（M）：</h4><p>浮点数的精度是由尾数的位数来决定的：</p>\n</li>\n<li><p>对于<code>float</code>型浮点数，尾数部分<code>23</code>位，换算成十进制就是<code> 2^23=8388608</code>，所以十进制精度只有<code>6 ~ 7</code>位；</p>\n</li>\n<li><p>对于<code>double</code>型浮点数，尾数部分<code>52</code>位，换算成十进制就是 <code>2^52 = 4503599627370496</code>，所以十进制精度只有<code>15 ~ 16</code>位</p>\n</li>\n</ul>\n<p>所以对于上面的数值<code>0.99999999f</code>，很明显已经超过了<code>float</code>型浮点数据的精度范围，出问题也是在所难免的。</p>\n<h2 id=\"进制转换计算案例\"><a href=\"#进制转换计算案例\" class=\"headerlink\" title=\"进制转换计算案例\"></a>进制转换计算案例</h2><p>上面说的是IEEE标准规定的内容，属于理论规约。那一个小数到底要怎么换算成二进制呢？我们得拿<strong>实际例子</strong>来解释。</p>\n<h3 id=\"先来个简单的例子\"><a href=\"#先来个简单的例子\" class=\"headerlink\" title=\"先来个简单的例子\"></a>先来个简单的例子</h3><p>比如：<strong>把十进制小数0.875转换成二进制，具体怎么操作？</strong><br>可以分几大步走：<br><strong>1、以小数点为界，拆分</strong><br><strong>2、整数部分转换</strong><br>整数转二进制我想大家应该都熟悉，使用：<strong>除2取余法</strong> 即可。而这里的0.875整数部分为0，无需操作。<br><strong>3、小数部分转换</strong><br>小数部分的转换不同于整数部分，采用的是 <strong>“乘2取整法”</strong> ，图示一下就明白了：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/21803058/1634052709260-475c4ad1-dbb8-4984-921c-61206cfcf882.png#clientId=u8b3795bf-1b0c-4&from=paste&height=255&id=u43a13574&margin=%5Bobject%20Object%5D&name=image.png&originHeight=509&originWidth=863&originalType=binary&ratio=1&size=260220&status=done&style=none&taskId=ua63c4846-23b6-4c37-a848-9012485232f&width=431.5\" alt=\"image.png\"></p>\n<p><strong>4、合并结果</strong><br>整数部分 + 小数部分，最终得到二进制结果为0.111。<br>所以该结果按照上一节所述的<strong>尾数 + 阶码</strong>的计算机计数方式，则可以表示为：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/21803058/1634052721645-e3c814b2-3158-42bd-8360-855ab97d553a.png#clientId=u8b3795bf-1b0c-4&from=paste&height=115&id=u72f81752&margin=%5Bobject%20Object%5D&name=image.png&originHeight=229&originWidth=615&originalType=binary&ratio=1&size=28736&status=done&style=none&taskId=u33b13787-9ba5-4628-81d4-0cf7d69dc84&width=307.5\" alt=\"image.png\"></p>\n<p>所以对应可得：</p>\n<ul>\n<li><strong>符号位</strong>：0</li>\n<li><strong>阶码（E）部分</strong>：若以float为例，应为 127 +（-1）= 126，因此二进制表示为：01111110</li>\n<li><strong>尾数部分（M）</strong>：若以float为例，应为23位，因此尾部补齐后为11000000000000000000000。</li>\n</ul>\n<p>因此最终的总结果为（以32位精度float表示）：<br>00111111011000000000000000000000</p>\n<h3 id=\"再来个复杂点例子\"><a href=\"#再来个复杂点例子\" class=\"headerlink\" title=\"再来个复杂点例子\"></a>再来个复杂点例子</h3><p>再比如：<strong>把十进制小数6.36转换成二进制，具体怎么操作？</strong><br>但凡能用图示，我就不想写文字，所以用一张图就可以解释得明明白白：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/21803058/1634052394464-bb81f88f-a43b-4d3b-8ad9-4bb95843d17d.png#clientId=u8b3795bf-1b0c-4&from=paste&id=ufbf99b5c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=578&originWidth=720&originalType=url&ratio=1&size=243586&status=done&style=none&taskId=u55c8182f-bd48-4d2f-90fc-e34e78f9784\" alt=\"image.png\"></p>\n<p>整数部分 + 小数部分，因此最终得到的结果二进制结果为110.01011100…。<br>还是按照上一节所述的<strong>尾数 + 阶码</strong>的计算机计数方式，则可以表示为：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/21803058/1634052890028-0203b28a-27e8-4311-90ad-17b547a4cb7b.png#clientId=u8b3795bf-1b0c-4&from=paste&height=107&id=u827605bc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=214&originWidth=827&originalType=binary&ratio=1&size=33294&status=done&style=none&taskId=u0643d8ec-2f94-426d-a09a-0cbc1e82dd7&width=413.5\" alt=\"image.png\"></p>\n<p>所以对应可得：</p>\n<ul>\n<li><strong>符号位</strong>：0</li>\n<li><strong>阶码（E）部分</strong>：若以float为例，应为 127 +（2）= 129，因此二进制表示为：10000001</li>\n<li><strong>尾数部分（M）</strong>：1001011100…，其实它本身无限不循环，但若以float型精度来截取23位，则可以表示为10010111000010100011111</li>\n</ul>\n<p>因此最终的总结果为（以32位精度float表示）：<br>01000000110010111000010100011111<br>所以像这种无限位数的尾数情况，用计算机存储产生截取是必然的，必定会有一定的<strong>精度损失</strong>！所以这也从根本上解释了为什么float或者double这种类型数据使用时的风险性，因此必须要结合实际业务理性考量。</p>\n<h2 id=\"精度问题如何解决\"><a href=\"#精度问题如何解决\" class=\"headerlink\" title=\"精度问题如何解决\"></a>精度问题如何解决</h2><p>所以如果涉及<strong>商品金额</strong>、<strong>交易值</strong>、<strong>货币计算</strong>等这种对精度要求很高的场景该怎么办呢？</p>\n<h3 id=\"用字符串或者数组解决多位数问题\"><a href=\"#用字符串或者数组解决多位数问题\" class=\"headerlink\" title=\"用字符串或者数组解决多位数问题\"></a>用字符串或者数组解决多位数问题</h3><p>校招刷过算法题的小伙伴们应该都知道，用字符串或者数组表示大数是一个典型的解题思路。<br>比如经典面试题：<strong>编写两个任意位数大数的加法、减法、乘法等运算</strong>。<br>这时候我们我们可以用字符串或者数组来表示这种大数，然后按照四则运算的规则来手动模拟出具体计算过程，中间还需要考虑各种诸如：<strong>进位</strong>、<strong>借位</strong>、<strong>符号</strong>等等问题的处理，确实十分复杂，本文不做赘述。</p>\n<hr>\n<h2 id=\"附\"><a href=\"#附\" class=\"headerlink\" title=\"附\"></a>附</h2><h3 id=\"答案\"><a href=\"#答案\" class=\"headerlink\" title=\"答案\"></a>答案</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;math.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>   <span class=\"hljs-keyword\">double</span> a=<span class=\"hljs-number\">0.0</span>;<br>   <span class=\"hljs-keyword\">double</span> b=<span class=\"hljs-number\">0.0</span>;<br>   <span class=\"hljs-keyword\">char</span> operation=<span class=\"hljs-number\">0</span>;<br><br>   <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%lf %c %lf&quot;</span>,&amp;a,&amp;operation,&amp;b);<br>   <br>   <span class=\"hljs-keyword\">switch</span>(operation)<br>   &#123;<br>      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;+&#x27;</span>:<br>           <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%.2lf\\n&quot;</span>,a+b);<br>          <span class=\"hljs-keyword\">break</span>;<br>          <br>      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;-&#x27;</span>:<br>           <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%.2lf\\n&quot;</span>,a-b);<br>           <span class=\"hljs-keyword\">break</span>;<br>           <br>      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;*&#x27;</span>:<br>           <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%.2lf\\n&quot;</span>,a*b);<br>           <span class=\"hljs-keyword\">break</span>;<br>        <br>      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;/&#x27;</span>:<br>           <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">fabs</span>(b) &lt;= <span class=\"hljs-number\">1e-10</span>)<br>             <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Wrong input!&quot;</span>);<br>           <span class=\"hljs-keyword\">else</span><br>             <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%.2lf\\n&quot;</span>,a/b);<br>           <span class=\"hljs-keyword\">break</span>;<br>      <br>      <span class=\"hljs-keyword\">default</span>:<br>          <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Wrong input!&quot;</span>);<br>          <span class=\"hljs-keyword\">break</span>;          <br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"以前的解释\"><a href=\"#以前的解释\" class=\"headerlink\" title=\"以前的解释\"></a>以前的解释</h3><blockquote>\n<p>如果你确实就是想判断 y 是不是 0，那么是可以直接写 y != 0 的。如果这个 y 有别的作用，比如作为除数参与其他运算，由于 C 语言不支持无限精度计算，一个极小的非零数和零一样可能导致异常的结果，因此需要排除这种情况。（知乎）</p>\n</blockquote>\n<blockquote>\n<p> 用浮点方式表示实数时，实数的小数部分在十进制转二进制时会出现无限循环，只能截断，所以就不准确了，是对这个实数的近似。<br>​</p>\n</blockquote>\n<blockquote>\n<p>那么，当这个数的精度无限大后，它对于编译器来说，就等价为”0”了</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Q: 为什么浮点运算有误差？<br>​</p>\n</blockquote>\n<blockquote>\n<p>A: 因为你不可能让有限集和无限集一一映射的……</p>\n</blockquote>\n<hr>\n<p>在看文章之前先看看万恶之源：<br><strong>题目描述</strong><br>给你一个简单的四则运算表达式，包含两个实数和一个运算符，请编程计算出结果<br><strong>输入</strong><br>表达式的格式为：s1 op s2， s1和s2是两个实数，op表示的是运算符(+,-,*,/)，也可能是其他字符。注意运算符两侧各有一个空格。<br><strong>输出</strong><br>如果运算符合法，输出表达式的值；<strong>若运算符不合法或进行除法运算时除数是0</strong>，<strong>则输出”Wrong input!</strong>“。最后结果小数点后保留两位。<br><strong>样例输入 Copy</strong><br>1.0 + 1.0<br><strong>样例输出 Copy</strong><br><strong>2.00</strong><br>当你开开心心写完，并且用<br>if(s2 == 0)<br>完成“<strong>若运算符不合法或进行除法运算时除数是0则输出”Wrong input!<strong>”的要求<br>一交……——啪，一巴掌拍下来一个“</strong>答案错误</strong>”<br>惊不惊喜，意不意外？<br>当然oj很负责任的提醒你，使用“ <code>fabs(b) &lt;= 1e-10</code>  ”来判断非法除数<br>…面对莫名其妙的报错和提示，这一套连招，让你懵的猝不及防<br>…咳咳，所以，咱这篇文章好好来扯一扯这“浮点数”</p>\n<hr>\n<h2 id=\"先看现象\"><a href=\"#先看现象\" class=\"headerlink\" title=\"先看现象\"></a>先看现象</h2><h4 id=\"条件判断超预期\"><a href=\"#条件判断超预期\" class=\"headerlink\" title=\"条件判断超预期\"></a>条件判断超预期</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">System.out.println( <span class=\"hljs-number\">1f</span> == <span class=\"hljs-number\">0.9999999f</span> );   <span class=\"hljs-comment\">// 打印：false</span><br>System.out.println( <span class=\"hljs-number\">1f</span> == <span class=\"hljs-number\">0.99999999f</span> );  <span class=\"hljs-comment\">// 打印：true    纳尼？</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"数据转换超预期\"><a href=\"#数据转换超预期\" class=\"headerlink\" title=\"数据转换超预期\"></a>数据转换超预期</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">float</span> f = <span class=\"hljs-number\">1.1f</span>;<br><span class=\"hljs-keyword\">double</span> d = (<span class=\"hljs-keyword\">double</span>) f;<br>System.out.println(f);  <span class=\"hljs-comment\">// 打印：1.1</span><br>System.out.println(d);  <span class=\"hljs-comment\">// 打印：1.100000023841858  纳尼？</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"基本运算超预期\"><a href=\"#基本运算超预期\" class=\"headerlink\" title=\"基本运算超预期\"></a>基本运算超预期</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">System.out.println( <span class=\"hljs-number\">0.2</span> + <span class=\"hljs-number\">0.7</span> );  <br><span class=\"hljs-comment\">// 打印：0.8999999999999999   纳尼？</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"数据自增超预期\"><a href=\"#数据自增超预期\" class=\"headerlink\" title=\"数据自增超预期\"></a>数据自增超预期</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">float</span> f1 = <span class=\"hljs-number\">8455263f</span>;<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;<br>    System.out.println(f1);<br>    f1++;<br>&#125;<br><span class=\"hljs-comment\">// 打印：8455263.0</span><br><span class=\"hljs-comment\">// 打印：8455264.0</span><br><span class=\"hljs-comment\">// 打印：8455265.0</span><br><span class=\"hljs-comment\">// 打印：8455266.0</span><br><span class=\"hljs-comment\">// 打印：8455267.0</span><br><span class=\"hljs-comment\">// 打印：8455268.0</span><br><span class=\"hljs-comment\">// 打印：8455269.0</span><br><span class=\"hljs-comment\">// 打印：8455270.0</span><br><span class=\"hljs-comment\">// 打印：8455271.0</span><br><span class=\"hljs-comment\">// 打印：8455272.0</span><br><br><span class=\"hljs-keyword\">float</span> f2 = <span class=\"hljs-number\">84552631f</span>;<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;<br>    System.out.println(f2);<br>    f2++;<br>&#125;<br><span class=\"hljs-comment\">//    打印：8.4552632E7   纳尼？不是 +1了吗？</span><br><span class=\"hljs-comment\">//    打印：8.4552632E7   纳尼？不是 +1了吗？</span><br><span class=\"hljs-comment\">//    打印：8.4552632E7   纳尼？不是 +1了吗？</span><br><span class=\"hljs-comment\">//    打印：8.4552632E7   纳尼？不是 +1了吗？</span><br><span class=\"hljs-comment\">//    打印：8.4552632E7   纳尼？不是 +1了吗？</span><br><span class=\"hljs-comment\">//    打印：8.4552632E7   纳尼？不是 +1了吗？</span><br><span class=\"hljs-comment\">//    打印：8.4552632E7   纳尼？不是 +1了吗？</span><br><span class=\"hljs-comment\">//    打印：8.4552632E7   纳尼？不是 +1了吗？</span><br><span class=\"hljs-comment\">//    打印：8.4552632E7   纳尼？不是 +1了吗？</span><br><span class=\"hljs-comment\">//    打印：8.4552632E7   纳尼？不是 +1了吗？</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"原因出在哪里？\"><a href=\"#原因出在哪里？\" class=\"headerlink\" title=\"原因出在哪里？\"></a>原因出在哪里？</h2><p>我们就以第一个典型现象为例来分析一下：<br><code>System.out.println( 1f == 0.99999999f );</code><br>直接用代码去比较<code>1</code>和<code>0.99999999</code>，居然打印出<code>true</code>！<br>这说明了什么？这说明了计算机压根<strong>区分不出来</strong>这两个数。这是为什么呢？<br>我们不妨来简单思考一下：</p>\n<blockquote>\n<p>我们知道输入的这两个浮点数只是我们人类肉眼所看到的具体数值，是我们通常所理解的十进制数，但是计算机底层在计算时可不是按照十进制来计算的，学过基本计组原理的都知道，计算机底层最终都是基于像<code>010100100100110011011</code>这种<code>0、1</code>二进制来完成的。</p>\n</blockquote>\n<p>所以为了搞懂实际情况，我们应该将这两个十进制浮点数<strong>转化到二进制空间</strong>来看一看。<br><strong>十进制浮点数转二进制</strong> 怎么转、怎么计算，我想这应该属于基础计算机进制转换常识，在 <strong>《计算机组成原理》</strong> 类似的课上肯定学过了，咱就不在此赘述了，直接给出结果<br>（把它转换到<code>IEEE 754 Single precision 32-bit</code>，也就float类型对应的精度）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-number\">1.0</span>（十进制）<br>    ↓<br><span class=\"hljs-number\">00111111</span> <span class=\"hljs-number\">10000000</span> <span class=\"hljs-number\">00000000</span> <span class=\"hljs-number\">00000000</span>（二进制）<br>    ↓<br><span class=\"hljs-number\">0x3F800000</span>（十六进制）<br>---------------------------------------------<br><span class=\"hljs-number\">0.99999999</span>（十进制）<br>    ↓<br><span class=\"hljs-number\">00111111</span> <span class=\"hljs-number\">10000000</span> <span class=\"hljs-number\">00000000</span> <span class=\"hljs-number\">00000000</span>（二进制）<br>    ↓<br><span class=\"hljs-number\">0x3F800000</span>（十六进制）<br></code></pre></td></tr></table></figure>\n<p><strong>果不其然</strong>，这两个十进制浮点数的底层二进制表示是一毛一样的，怪不得<code>==</code>的判断结果返回<code>true</code>(<br>但是<code>1f == 0.9999999f</code>返回的结果是符合预期的，打印<code>false</code>，我们也把它们转换到二进制模式下看看情况：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-number\">1.0</span>（十进制）<br>    ↓<br><span class=\"hljs-number\">00111111</span> <span class=\"hljs-number\">10000000</span> <span class=\"hljs-number\">00000000</span> <span class=\"hljs-number\">00000000</span>（二进制）<br>    ↓<br><span class=\"hljs-number\">0x3F800000</span>（十六进制）<br>-----------------------------------------------<br><span class=\"hljs-number\">0.9999999</span>（十进制）<br>    ↓<br><span class=\"hljs-number\">00111111</span> <span class=\"hljs-number\">01111111</span> <span class=\"hljs-number\">11111111</span> <span class=\"hljs-number\">11111110</span>（二进制）<br>    ↓<br><span class=\"hljs-number\">0x3F7FFFFE</span>（十六进制）<br></code></pre></td></tr></table></figure>\n<p>哦，很明显，它俩的二进制数字表示确实不一样，这是理所应当的结果。<br>那么为什么<code>0.99999999</code>的底层二进制表示竟然是：<code>00111111 10000000 00000000 00000000</code>呢？<br>这不明明是浮点数<code>1.0</code>的二进制表示吗？<br>这就要谈一下浮点数的精度问题了。</p>\n<h2 id=\"浮点数的精度问题！\"><a href=\"#浮点数的精度问题！\" class=\"headerlink\" title=\"浮点数的精度问题！\"></a>浮点数的精度问题！</h2><p>学过 <strong>《计算机组成原理》</strong> 这门课的小伙伴应该都知道，浮点数在计算机中的存储方式遵循<strong>IEEE 754 浮点数计数标准</strong>，可以用科学计数法表示为：<br> <img src=\"https://cdn.nlark.com/yuque/0/2021/png/21803058/1634052108498-bfcbaa1f-0c49-4215-a227-37d5c360192c.png#clientId=u8b3795bf-1b0c-4&from=paste&height=44&id=uc6d37584&margin=%5Bobject%20Object%5D&name=image.png&originHeight=42&originWidth=145&originalType=binary&ratio=1&size=1068&status=done&style=none&taskId=u6346e733-e6fe-4c8e-bc7d-528d8f01f31&width=152.49159240722656\" alt=\"image.png\"><br>只要给出：<code>**符号（S）**、**阶码部分（E）**、**尾数部分（M）**</code> 这三个维度的信息，一个浮点数的表示就完全确定下来了，所以<code>float</code>和<code>double</code>这两种浮点数在内存中的存储结构如下所示：<br><img src=\"https://cdn.nlark.com/yuque/0/2021/png/21803058/1634052159688-244db766-1e00-45e5-bab7-e106dfdb1a46.png#clientId=u8b3795bf-1b0c-4&from=paste&height=295&id=u2eb81aaf&margin=%5Bobject%20Object%5D&name=image.png&originHeight=424&originWidth=855&originalType=binary&ratio=1&size=109910&status=done&style=none&taskId=u635967f1-8010-4199-a9b8-96e6741d560&width=595.4999694824219\" alt=\"image.png\"></p>\n<h4 id=\"1、符号部分（S）\"><a href=\"#1、符号部分（S）\" class=\"headerlink\" title=\"1、符号部分（S）\"></a>1、符号部分（S）</h4><p><code>0-正</code> <code> 1-负</code></p>\n<h4 id=\"2、阶码部分（E）（指数部分）：\"><a href=\"#2、阶码部分（E）（指数部分）：\" class=\"headerlink\" title=\"2、阶码部分（E）（指数部分）：\"></a>2、阶码部分（E）（指数部分）：</h4><ul>\n<li><p>对于<code>float</code>型浮点数，指数部分8位，考虑可正可负，因此可以表示的指数范围为<code>-127 ~ 128</code></p>\n</li>\n<li><p>对于<code>double</code>型浮点数，指数部分11位，考虑可正可负，因此可以表示的指数范围为<code>-1023 ~ 1024</code></p>\n<h4 id=\"3、尾数部分（M）：\"><a href=\"#3、尾数部分（M）：\" class=\"headerlink\" title=\"3、尾数部分（M）：\"></a>3、尾数部分（M）：</h4><p>浮点数的精度是由尾数的位数来决定的：</p>\n</li>\n<li><p>对于<code>float</code>型浮点数，尾数部分<code>23</code>位，换算成十进制就是<code> 2^23=8388608</code>，所以十进制精度只有<code>6 ~ 7</code>位；</p>\n</li>\n<li><p>对于<code>double</code>型浮点数，尾数部分<code>52</code>位，换算成十进制就是 <code>2^52 = 4503599627370496</code>，所以十进制精度只有<code>15 ~ 16</code>位</p>\n</li>\n</ul>\n<p>所以对于上面的数值<code>0.99999999f</code>，很明显已经超过了<code>float</code>型浮点数据的精度范围，出问题也是在所难免的。</p>\n<h2 id=\"进制转换计算案例\"><a href=\"#进制转换计算案例\" class=\"headerlink\" title=\"进制转换计算案例\"></a>进制转换计算案例</h2><p>上面说的是IEEE标准规定的内容，属于理论规约。那一个小数到底要怎么换算成二进制呢？我们得拿<strong>实际例子</strong>来解释。</p>\n<h3 id=\"先来个简单的例子\"><a href=\"#先来个简单的例子\" class=\"headerlink\" title=\"先来个简单的例子\"></a>先来个简单的例子</h3><p>比如：<strong>把十进制小数0.875转换成二进制，具体怎么操作？</strong><br>可以分几大步走：<br><strong>1、以小数点为界，拆分</strong><br><strong>2、整数部分转换</strong><br>整数转二进制我想大家应该都熟悉，使用：<strong>除2取余法</strong> 即可。而这里的0.875整数部分为0，无需操作。<br><strong>3、小数部分转换</strong><br>小数部分的转换不同于整数部分，采用的是 <strong>“乘2取整法”</strong> ，图示一下就明白了：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/21803058/1634052709260-475c4ad1-dbb8-4984-921c-61206cfcf882.png#clientId=u8b3795bf-1b0c-4&from=paste&height=255&id=u43a13574&margin=%5Bobject%20Object%5D&name=image.png&originHeight=509&originWidth=863&originalType=binary&ratio=1&size=260220&status=done&style=none&taskId=ua63c4846-23b6-4c37-a848-9012485232f&width=431.5\" alt=\"image.png\"></p>\n<p><strong>4、合并结果</strong><br>整数部分 + 小数部分，最终得到二进制结果为0.111。<br>所以该结果按照上一节所述的<strong>尾数 + 阶码</strong>的计算机计数方式，则可以表示为：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/21803058/1634052721645-e3c814b2-3158-42bd-8360-855ab97d553a.png#clientId=u8b3795bf-1b0c-4&from=paste&height=115&id=u72f81752&margin=%5Bobject%20Object%5D&name=image.png&originHeight=229&originWidth=615&originalType=binary&ratio=1&size=28736&status=done&style=none&taskId=u33b13787-9ba5-4628-81d4-0cf7d69dc84&width=307.5\" alt=\"image.png\"></p>\n<p>所以对应可得：</p>\n<ul>\n<li><strong>符号位</strong>：0</li>\n<li><strong>阶码（E）部分</strong>：若以float为例，应为 127 +（-1）= 126，因此二进制表示为：01111110</li>\n<li><strong>尾数部分（M）</strong>：若以float为例，应为23位，因此尾部补齐后为11000000000000000000000。</li>\n</ul>\n<p>因此最终的总结果为（以32位精度float表示）：<br>00111111011000000000000000000000</p>\n<h3 id=\"再来个复杂点例子\"><a href=\"#再来个复杂点例子\" class=\"headerlink\" title=\"再来个复杂点例子\"></a>再来个复杂点例子</h3><p>再比如：<strong>把十进制小数6.36转换成二进制，具体怎么操作？</strong><br>但凡能用图示，我就不想写文字，所以用一张图就可以解释得明明白白：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/21803058/1634052394464-bb81f88f-a43b-4d3b-8ad9-4bb95843d17d.png#clientId=u8b3795bf-1b0c-4&from=paste&id=ufbf99b5c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=578&originWidth=720&originalType=url&ratio=1&size=243586&status=done&style=none&taskId=u55c8182f-bd48-4d2f-90fc-e34e78f9784\" alt=\"image.png\"></p>\n<p>整数部分 + 小数部分，因此最终得到的结果二进制结果为110.01011100…。<br>还是按照上一节所述的<strong>尾数 + 阶码</strong>的计算机计数方式，则可以表示为：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/21803058/1634052890028-0203b28a-27e8-4311-90ad-17b547a4cb7b.png#clientId=u8b3795bf-1b0c-4&from=paste&height=107&id=u827605bc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=214&originWidth=827&originalType=binary&ratio=1&size=33294&status=done&style=none&taskId=u0643d8ec-2f94-426d-a09a-0cbc1e82dd7&width=413.5\" alt=\"image.png\"></p>\n<p>所以对应可得：</p>\n<ul>\n<li><strong>符号位</strong>：0</li>\n<li><strong>阶码（E）部分</strong>：若以float为例，应为 127 +（2）= 129，因此二进制表示为：10000001</li>\n<li><strong>尾数部分（M）</strong>：1001011100…，其实它本身无限不循环，但若以float型精度来截取23位，则可以表示为10010111000010100011111</li>\n</ul>\n<p>因此最终的总结果为（以32位精度float表示）：<br>01000000110010111000010100011111<br>所以像这种无限位数的尾数情况，用计算机存储产生截取是必然的，必定会有一定的<strong>精度损失</strong>！所以这也从根本上解释了为什么float或者double这种类型数据使用时的风险性，因此必须要结合实际业务理性考量。</p>\n<h2 id=\"精度问题如何解决\"><a href=\"#精度问题如何解决\" class=\"headerlink\" title=\"精度问题如何解决\"></a>精度问题如何解决</h2><p>所以如果涉及<strong>商品金额</strong>、<strong>交易值</strong>、<strong>货币计算</strong>等这种对精度要求很高的场景该怎么办呢？</p>\n<h3 id=\"用字符串或者数组解决多位数问题\"><a href=\"#用字符串或者数组解决多位数问题\" class=\"headerlink\" title=\"用字符串或者数组解决多位数问题\"></a>用字符串或者数组解决多位数问题</h3><p>校招刷过算法题的小伙伴们应该都知道，用字符串或者数组表示大数是一个典型的解题思路。<br>比如经典面试题：<strong>编写两个任意位数大数的加法、减法、乘法等运算</strong>。<br>这时候我们我们可以用字符串或者数组来表示这种大数，然后按照四则运算的规则来手动模拟出具体计算过程，中间还需要考虑各种诸如：<strong>进位</strong>、<strong>借位</strong>、<strong>符号</strong>等等问题的处理，确实十分复杂，本文不做赘述。</p>\n<hr>\n<h2 id=\"附\"><a href=\"#附\" class=\"headerlink\" title=\"附\"></a>附</h2><h3 id=\"答案\"><a href=\"#答案\" class=\"headerlink\" title=\"答案\"></a>答案</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;math.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>   <span class=\"hljs-keyword\">double</span> a=<span class=\"hljs-number\">0.0</span>;<br>   <span class=\"hljs-keyword\">double</span> b=<span class=\"hljs-number\">0.0</span>;<br>   <span class=\"hljs-keyword\">char</span> operation=<span class=\"hljs-number\">0</span>;<br><br>   <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%lf %c %lf&quot;</span>,&amp;a,&amp;operation,&amp;b);<br>   <br>   <span class=\"hljs-keyword\">switch</span>(operation)<br>   &#123;<br>      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;+&#x27;</span>:<br>           <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%.2lf\\n&quot;</span>,a+b);<br>          <span class=\"hljs-keyword\">break</span>;<br>          <br>      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;-&#x27;</span>:<br>           <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%.2lf\\n&quot;</span>,a-b);<br>           <span class=\"hljs-keyword\">break</span>;<br>           <br>      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;*&#x27;</span>:<br>           <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%.2lf\\n&quot;</span>,a*b);<br>           <span class=\"hljs-keyword\">break</span>;<br>        <br>      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;/&#x27;</span>:<br>           <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">fabs</span>(b) &lt;= <span class=\"hljs-number\">1e-10</span>)<br>             <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Wrong input!&quot;</span>);<br>           <span class=\"hljs-keyword\">else</span><br>             <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%.2lf\\n&quot;</span>,a/b);<br>           <span class=\"hljs-keyword\">break</span>;<br>      <br>      <span class=\"hljs-keyword\">default</span>:<br>          <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Wrong input!&quot;</span>);<br>          <span class=\"hljs-keyword\">break</span>;          <br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"以前的解释\"><a href=\"#以前的解释\" class=\"headerlink\" title=\"以前的解释\"></a>以前的解释</h3><blockquote>\n<p>如果你确实就是想判断 y 是不是 0，那么是可以直接写 y != 0 的。如果这个 y 有别的作用，比如作为除数参与其他运算，由于 C 语言不支持无限精度计算，一个极小的非零数和零一样可能导致异常的结果，因此需要排除这种情况。（知乎）</p>\n</blockquote>\n<blockquote>\n<p> 用浮点方式表示实数时，实数的小数部分在十进制转二进制时会出现无限循环，只能截断，所以就不准确了，是对这个实数的近似。<br>​</p>\n</blockquote>\n<blockquote>\n<p>那么，当这个数的精度无限大后，它对于编译器来说，就等价为”0”了</p>\n</blockquote>\n"},{"title":"腾讯云函数环境配置指南","date":"2021-11-20T17:16:52.000Z","_content":"在使用云函数时你要知道，在线编辑环境和部署后环境是两个独立而互不干扰的两个容器，即使IDE中能跑起来，在部署之后，那就是另一回事了。\n(下图示为IDE)\n![](https://cdn.jsdelivr.net/gh/ProbiusOfficial/My_pic@main/2021%E5%B9%B4-11%E6%9C%88-21-%E6%97%A512-%E6%97%B649%E5%88%861637470169496.png)\n（至少可以跑，具体功能没法实现罢了）\n但是你完成部署后：\n![](https://cdn.jsdelivr.net/gh/ProbiusOfficial/My_pic@main/2021%E5%B9%B4-11%E6%9C%88-21-%E6%97%A512-%E6%97%B655%E5%88%861637470510561.png)\n(咳咳，这个可读性真的让人头疼呢~)\n许多包在部署环境中并不附带，所以需要**手动打包上传**，当然上面还有一个入口报错，这个我最后会提一下（\n\n\n\n**使用requirements.txt（依赖管理工具）**\n\n- 使用 pip freeze > requirements.txt 生成本地环境下所有依赖的 requirements.txt 文件。\n- 在 IDE 的终端中执行 pip install -r requirements.txt -t . 即可根据 requirements.txt 的配置安装依赖包。\n\n（然而IDE终端很大程度上会抽风（，笔者本人建议在本地打好包之后再上传\n![](https://cdn.jsdelivr.net/gh/ProbiusOfficial/My_pic@main/2021%E5%B9%B4-11%E6%9C%88-21-%E6%97%A512-%E6%97%B654%E5%88%861637470490535.png)\n\n![](https://cdn.jsdelivr.net/gh/ProbiusOfficial/My_pic@main/2021%E5%B9%B4-11%E6%9C%88-21-%E6%97%A512-%E6%97%B655%E5%88%861637470528372.png)\n最后将库直接整合到云函数的文件夹，完成封装：\n(直接丢到云函数根目录就好啦~)\n![](https://cdn.jsdelivr.net/gh/ProbiusOfficial/My_pic@main/2021%E5%B9%B4-11%E6%9C%88-21-%E6%97%A512-%E6%97%B655%E5%88%861637470536699.png)\n当然上述操作完成后，您可能仍然无法正常执行：\n![](https://cdn.jsdelivr.net/gh/ProbiusOfficial/My_pic@main/2021%E5%B9%B4-11%E6%9C%88-21-%E6%97%A512-%E6%97%B655%E5%88%861637470544026.png)\n这是因为没有正确定义入口文件，\n> 执行方法表明了调用云函数时需要从哪个文件中的哪个函数开始执行。\n> 一段式格式为\"[文件名]\"，Golang 环境时使用，例如 \"main\";\n> ​\n\n> 两段式格式为\"[文件名].[函数名]\"，Python，Node.js，PHP 环境时使用，例如 \"index.main_handler\";\n> ​\n\n> 三段式格式为\"[package].[class]::[method]\",JAVA 环境时使用，例如 \"example.Hello::mainHandler\";\n> ​\n\n> 非固定段式格式，只针对Custom Runtime运行环境开放使用，根据自定义语言实现来设定执行方法\n> ​\n\n> 两段式的执行方法，前一段指向代码包中不包含后缀的文件名，后一段指向文件中的入口函数名。\n> 需要确保代码包中的文件名后缀与语言环境匹配，如 Python 环境为 .py 文件，Node.js 环境为 .js 文件。 更多执行方法相关说明，请见[执行方法详情说明](https://cloud.tencent.com/document/product/583/9210#.E6.89.A7.E8.A1.8C.E6.96.B9.E6.B3.95)\n\n这里提醒读者，除非您对云函数的执行机理十分熟悉，否则建议走默认入口：\ndef main_handler(event, context):\n参考这样的结构：\n```java\ndef main_handler(event, context):\n    function_1()\n    function_2()\n    function_3()\n    ...\n```\n完成上述操作，再次执行您的函数，如果代码没有问题（，那么：\n![](https://cdn.jsdelivr.net/gh/ProbiusOfficial/My_pic@main/2021%E5%B9%B4-11%E6%9C%88-21-%E6%97%A512-%E6%97%B655%E5%88%861637470552744.png)\n（成功了，但没有完全成功——后记：\n云函数貌似不支持chromedriver？\n","source":"_posts/腾讯云函数环境配置指南.md","raw":"---\ntitle: 腾讯云函数环境配置指南\ndate: 2021-11-21 01:16:52\ntags: 云函数\ncategories: 腾讯云\n---\n在使用云函数时你要知道，在线编辑环境和部署后环境是两个独立而互不干扰的两个容器，即使IDE中能跑起来，在部署之后，那就是另一回事了。\n(下图示为IDE)\n![](https://cdn.jsdelivr.net/gh/ProbiusOfficial/My_pic@main/2021%E5%B9%B4-11%E6%9C%88-21-%E6%97%A512-%E6%97%B649%E5%88%861637470169496.png)\n（至少可以跑，具体功能没法实现罢了）\n但是你完成部署后：\n![](https://cdn.jsdelivr.net/gh/ProbiusOfficial/My_pic@main/2021%E5%B9%B4-11%E6%9C%88-21-%E6%97%A512-%E6%97%B655%E5%88%861637470510561.png)\n(咳咳，这个可读性真的让人头疼呢~)\n许多包在部署环境中并不附带，所以需要**手动打包上传**，当然上面还有一个入口报错，这个我最后会提一下（\n\n\n\n**使用requirements.txt（依赖管理工具）**\n\n- 使用 pip freeze > requirements.txt 生成本地环境下所有依赖的 requirements.txt 文件。\n- 在 IDE 的终端中执行 pip install -r requirements.txt -t . 即可根据 requirements.txt 的配置安装依赖包。\n\n（然而IDE终端很大程度上会抽风（，笔者本人建议在本地打好包之后再上传\n![](https://cdn.jsdelivr.net/gh/ProbiusOfficial/My_pic@main/2021%E5%B9%B4-11%E6%9C%88-21-%E6%97%A512-%E6%97%B654%E5%88%861637470490535.png)\n\n![](https://cdn.jsdelivr.net/gh/ProbiusOfficial/My_pic@main/2021%E5%B9%B4-11%E6%9C%88-21-%E6%97%A512-%E6%97%B655%E5%88%861637470528372.png)\n最后将库直接整合到云函数的文件夹，完成封装：\n(直接丢到云函数根目录就好啦~)\n![](https://cdn.jsdelivr.net/gh/ProbiusOfficial/My_pic@main/2021%E5%B9%B4-11%E6%9C%88-21-%E6%97%A512-%E6%97%B655%E5%88%861637470536699.png)\n当然上述操作完成后，您可能仍然无法正常执行：\n![](https://cdn.jsdelivr.net/gh/ProbiusOfficial/My_pic@main/2021%E5%B9%B4-11%E6%9C%88-21-%E6%97%A512-%E6%97%B655%E5%88%861637470544026.png)\n这是因为没有正确定义入口文件，\n> 执行方法表明了调用云函数时需要从哪个文件中的哪个函数开始执行。\n> 一段式格式为\"[文件名]\"，Golang 环境时使用，例如 \"main\";\n> ​\n\n> 两段式格式为\"[文件名].[函数名]\"，Python，Node.js，PHP 环境时使用，例如 \"index.main_handler\";\n> ​\n\n> 三段式格式为\"[package].[class]::[method]\",JAVA 环境时使用，例如 \"example.Hello::mainHandler\";\n> ​\n\n> 非固定段式格式，只针对Custom Runtime运行环境开放使用，根据自定义语言实现来设定执行方法\n> ​\n\n> 两段式的执行方法，前一段指向代码包中不包含后缀的文件名，后一段指向文件中的入口函数名。\n> 需要确保代码包中的文件名后缀与语言环境匹配，如 Python 环境为 .py 文件，Node.js 环境为 .js 文件。 更多执行方法相关说明，请见[执行方法详情说明](https://cloud.tencent.com/document/product/583/9210#.E6.89.A7.E8.A1.8C.E6.96.B9.E6.B3.95)\n\n这里提醒读者，除非您对云函数的执行机理十分熟悉，否则建议走默认入口：\ndef main_handler(event, context):\n参考这样的结构：\n```java\ndef main_handler(event, context):\n    function_1()\n    function_2()\n    function_3()\n    ...\n```\n完成上述操作，再次执行您的函数，如果代码没有问题（，那么：\n![](https://cdn.jsdelivr.net/gh/ProbiusOfficial/My_pic@main/2021%E5%B9%B4-11%E6%9C%88-21-%E6%97%A512-%E6%97%B655%E5%88%861637470552744.png)\n（成功了，但没有完全成功——后记：\n云函数貌似不支持chromedriver？\n","slug":"腾讯云函数环境配置指南","published":1,"updated":"2021-12-19T06:36:13.325Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxcz8ryg0011f8v06nlcd6gk","content":"<p>在使用云函数时你要知道，在线编辑环境和部署后环境是两个独立而互不干扰的两个容器，即使IDE中能跑起来，在部署之后，那就是另一回事了。<br>(下图示为IDE)<br><img src=\"https://cdn.jsdelivr.net/gh/ProbiusOfficial/My_pic@main/2021%E5%B9%B4-11%E6%9C%88-21-%E6%97%A512-%E6%97%B649%E5%88%861637470169496.png\"><br>（至少可以跑，具体功能没法实现罢了）<br>但是你完成部署后：<br><img src=\"https://cdn.jsdelivr.net/gh/ProbiusOfficial/My_pic@main/2021%E5%B9%B4-11%E6%9C%88-21-%E6%97%A512-%E6%97%B655%E5%88%861637470510561.png\"><br>(咳咳，这个可读性真的让人头疼呢~)<br>许多包在部署环境中并不附带，所以需要<strong>手动打包上传</strong>，当然上面还有一个入口报错，这个我最后会提一下（</p>\n<p><strong>使用requirements.txt（依赖管理工具）</strong></p>\n<ul>\n<li>使用 pip freeze &gt; requirements.txt 生成本地环境下所有依赖的 requirements.txt 文件。</li>\n<li>在 IDE 的终端中执行 pip install -r requirements.txt -t . 即可根据 requirements.txt 的配置安装依赖包。</li>\n</ul>\n<p>（然而IDE终端很大程度上会抽风（，笔者本人建议在本地打好包之后再上传<br><img src=\"https://cdn.jsdelivr.net/gh/ProbiusOfficial/My_pic@main/2021%E5%B9%B4-11%E6%9C%88-21-%E6%97%A512-%E6%97%B654%E5%88%861637470490535.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/ProbiusOfficial/My_pic@main/2021%E5%B9%B4-11%E6%9C%88-21-%E6%97%A512-%E6%97%B655%E5%88%861637470528372.png\"><br>最后将库直接整合到云函数的文件夹，完成封装：<br>(直接丢到云函数根目录就好啦~)<br><img src=\"https://cdn.jsdelivr.net/gh/ProbiusOfficial/My_pic@main/2021%E5%B9%B4-11%E6%9C%88-21-%E6%97%A512-%E6%97%B655%E5%88%861637470536699.png\"><br>当然上述操作完成后，您可能仍然无法正常执行：<br><img src=\"https://cdn.jsdelivr.net/gh/ProbiusOfficial/My_pic@main/2021%E5%B9%B4-11%E6%9C%88-21-%E6%97%A512-%E6%97%B655%E5%88%861637470544026.png\"><br>这是因为没有正确定义入口文件，</p>\n<blockquote>\n<p>执行方法表明了调用云函数时需要从哪个文件中的哪个函数开始执行。<br>一段式格式为”[文件名]”，Golang 环境时使用，例如 “main”;<br>​</p>\n</blockquote>\n<blockquote>\n<p>两段式格式为”[文件名].[函数名]”，Python，Node.js，PHP 环境时使用，例如 “index.main_handler”;<br>​</p>\n</blockquote>\n<blockquote>\n<p>三段式格式为”[package].[class]::[method]”,JAVA 环境时使用，例如 “example.Hello::mainHandler”;<br>​</p>\n</blockquote>\n<blockquote>\n<p>非固定段式格式，只针对Custom Runtime运行环境开放使用，根据自定义语言实现来设定执行方法<br>​</p>\n</blockquote>\n<blockquote>\n<p>两段式的执行方法，前一段指向代码包中不包含后缀的文件名，后一段指向文件中的入口函数名。<br>需要确保代码包中的文件名后缀与语言环境匹配，如 Python 环境为 .py 文件，Node.js 环境为 .js 文件。 更多执行方法相关说明，请见<a href=\"https://cloud.tencent.com/document/product/583/9210#.E6.89.A7.E8.A1.8C.E6.96.B9.E6.B3.95\">执行方法详情说明</a></p>\n</blockquote>\n<p>这里提醒读者，除非您对云函数的执行机理十分熟悉，否则建议走默认入口：<br>def main_handler(event, context):<br>参考这样的结构：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\">def <span class=\"hljs-title\">main_handler</span><span class=\"hljs-params\">(event, context)</span>:</span><br><span class=\"hljs-function\">    <span class=\"hljs-title\">function_1</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">    <span class=\"hljs-title\">function_2</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">    <span class=\"hljs-title\">function_3</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">    ...</span><br></code></pre></td></tr></table></figure>\n<p>完成上述操作，再次执行您的函数，如果代码没有问题（，那么：<br><img src=\"https://cdn.jsdelivr.net/gh/ProbiusOfficial/My_pic@main/2021%E5%B9%B4-11%E6%9C%88-21-%E6%97%A512-%E6%97%B655%E5%88%861637470552744.png\"><br>（成功了，但没有完全成功——后记：<br>云函数貌似不支持chromedriver？</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在使用云函数时你要知道，在线编辑环境和部署后环境是两个独立而互不干扰的两个容器，即使IDE中能跑起来，在部署之后，那就是另一回事了。<br>(下图示为IDE)<br><img src=\"https://cdn.jsdelivr.net/gh/ProbiusOfficial/My_pic@main/2021%E5%B9%B4-11%E6%9C%88-21-%E6%97%A512-%E6%97%B649%E5%88%861637470169496.png\"><br>（至少可以跑，具体功能没法实现罢了）<br>但是你完成部署后：<br><img src=\"https://cdn.jsdelivr.net/gh/ProbiusOfficial/My_pic@main/2021%E5%B9%B4-11%E6%9C%88-21-%E6%97%A512-%E6%97%B655%E5%88%861637470510561.png\"><br>(咳咳，这个可读性真的让人头疼呢~)<br>许多包在部署环境中并不附带，所以需要<strong>手动打包上传</strong>，当然上面还有一个入口报错，这个我最后会提一下（</p>\n<p><strong>使用requirements.txt（依赖管理工具）</strong></p>\n<ul>\n<li>使用 pip freeze &gt; requirements.txt 生成本地环境下所有依赖的 requirements.txt 文件。</li>\n<li>在 IDE 的终端中执行 pip install -r requirements.txt -t . 即可根据 requirements.txt 的配置安装依赖包。</li>\n</ul>\n<p>（然而IDE终端很大程度上会抽风（，笔者本人建议在本地打好包之后再上传<br><img src=\"https://cdn.jsdelivr.net/gh/ProbiusOfficial/My_pic@main/2021%E5%B9%B4-11%E6%9C%88-21-%E6%97%A512-%E6%97%B654%E5%88%861637470490535.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/ProbiusOfficial/My_pic@main/2021%E5%B9%B4-11%E6%9C%88-21-%E6%97%A512-%E6%97%B655%E5%88%861637470528372.png\"><br>最后将库直接整合到云函数的文件夹，完成封装：<br>(直接丢到云函数根目录就好啦~)<br><img src=\"https://cdn.jsdelivr.net/gh/ProbiusOfficial/My_pic@main/2021%E5%B9%B4-11%E6%9C%88-21-%E6%97%A512-%E6%97%B655%E5%88%861637470536699.png\"><br>当然上述操作完成后，您可能仍然无法正常执行：<br><img src=\"https://cdn.jsdelivr.net/gh/ProbiusOfficial/My_pic@main/2021%E5%B9%B4-11%E6%9C%88-21-%E6%97%A512-%E6%97%B655%E5%88%861637470544026.png\"><br>这是因为没有正确定义入口文件，</p>\n<blockquote>\n<p>执行方法表明了调用云函数时需要从哪个文件中的哪个函数开始执行。<br>一段式格式为”[文件名]”，Golang 环境时使用，例如 “main”;<br>​</p>\n</blockquote>\n<blockquote>\n<p>两段式格式为”[文件名].[函数名]”，Python，Node.js，PHP 环境时使用，例如 “index.main_handler”;<br>​</p>\n</blockquote>\n<blockquote>\n<p>三段式格式为”[package].[class]::[method]”,JAVA 环境时使用，例如 “example.Hello::mainHandler”;<br>​</p>\n</blockquote>\n<blockquote>\n<p>非固定段式格式，只针对Custom Runtime运行环境开放使用，根据自定义语言实现来设定执行方法<br>​</p>\n</blockquote>\n<blockquote>\n<p>两段式的执行方法，前一段指向代码包中不包含后缀的文件名，后一段指向文件中的入口函数名。<br>需要确保代码包中的文件名后缀与语言环境匹配，如 Python 环境为 .py 文件，Node.js 环境为 .js 文件。 更多执行方法相关说明，请见<a href=\"https://cloud.tencent.com/document/product/583/9210#.E6.89.A7.E8.A1.8C.E6.96.B9.E6.B3.95\">执行方法详情说明</a></p>\n</blockquote>\n<p>这里提醒读者，除非您对云函数的执行机理十分熟悉，否则建议走默认入口：<br>def main_handler(event, context):<br>参考这样的结构：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\">def <span class=\"hljs-title\">main_handler</span><span class=\"hljs-params\">(event, context)</span>:</span><br><span class=\"hljs-function\">    <span class=\"hljs-title\">function_1</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">    <span class=\"hljs-title\">function_2</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">    <span class=\"hljs-title\">function_3</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\">    ...</span><br></code></pre></td></tr></table></figure>\n<p>完成上述操作，再次执行您的函数，如果代码没有问题（，那么：<br><img src=\"https://cdn.jsdelivr.net/gh/ProbiusOfficial/My_pic@main/2021%E5%B9%B4-11%E6%9C%88-21-%E6%97%A512-%E6%97%B655%E5%88%861637470552744.png\"><br>（成功了，但没有完全成功——后记：<br>云函数貌似不支持chromedriver？</p>\n"},{"title":"河南省宗教知识竞赛刷分思路＆脚本合集","date":"2021-11-20T16:42:28.000Z","_content":"# ZZULI_AC_OF_ZSJS\n河南省大学生中国特色社会主义民族宗教理论知识竞赛  \n（这真实一个让人无比抓狂的比赛呢） \n文章项目地址：https://github.com/ProbiusOfficial\n## 看这里\n题库替换的方法以及有大佬写了油猴脚本里Qwq~  \n感谢@https://github.com/xVue 大佬    \n文件为 zj.user.js  各位按需自取鸭~  \n2021/11/19 更新：scriptcat不运行问题，自动提交改为手动提交，分数提至100分，页面优化  \n[点这里直接拿脚本](https://greasyfork.org/zh-CN/scripts/435679-%E6%B2%B3%E5%8D%97%E5%AE%97%E6%95%99%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86%E7%AB%9E%E8%B5%9B)\n### 关于这份脚本\n该脚本目前没法完成完美答题，因为题库歪了。。。（可以看看下面的方法  \n题库文件是data.js，其他答题逻辑没有问题。  \n如果各位有能力可以自己fork后更改题库文件  \n每一年题库id都会变，但是每年id目前来看肯定是唯一的，当然不清楚后面会不会出现更多的NT  \n- - -\n### 关于另外一种方法\n——我为什么放弃了脚本（雾  \n作者：@TherHello:https://www.therehello.top/ & @探姬  \n不许拿去商用赚钱！！！！！！！  \n#### 页面的提交过程分析如下：\n```\n程序调用 autoSubmit()  \n然后该调用getExamAnswerFn()这个函数，从开始遍历读取你的答案，如果有没有答的题则alert  \n一切无误后被封装在 result_content 中  \n其格式如下：  \n\n'[{\"orderindex\":\"1\",\"topicid\":\"1000042\",\"result\":\"D\"},{\"orderindex\":\"2\",\"topicid\":\"1000038\",\"result\":\"A\"},{\"orderindex\":\"3\",\"topicid\":\"1000006\",\"result\":\"A\"},{\"orderindex\":\"4\",\"topicid\":\"1000115\",\"result\":\"A\"},{\"orderindex\":\"5\",\"topicid\":\"1000142\",\"result\":\"D\"},{\"orderindex\":\"6\",\"topicid\":\"1000011\",\"result\":\"A\"},{\"orderindex\":\"7\",\"topicid\":\"1000145\",\"result\":\"D\"},{\"orderindex\":\"8\",\"topicid\":\"1000105\",\"result\":\"D\"},{\"orderindex\":\"9\",\"topicid\":\"1000139\",\"result\":\"C\"},{\"orderindex\":\"10\",\"topicid\":\"1000096\",\"result\":\"D\"},{\"orderindex\":\"11\",\"topicid\":\"1000116\",\"result\":\"A\"},{\"orderindex\":\"12\",\"topicid\":\"10\n....\n//多选题的样例:  \n{\"orderindex\":\"54\",\"topicid\":\"1000288\",\"result\":\"A,B,D\"}  \n\n再通过var params={paperid:paperid,csmpagerid:csmpagerid,starttime:starttime,result_content:result_content,memberusercode:memberusercode,memberschoolid:memberschoolid,membernickname:membernickname,ssm:getSSM()}构造头信息\n最后通过\n$.post(url,params,function(responseText){\n    ...\n}\n进行提交，\n所以只需要替换掉 result_content 即可。\n```\n\n所以：大致思路，替换提交的时候的题目数据，直接提交一份95分的题目表单。\n\n#### 过程如下：\n1.爬取页面，获得题目ID和题目在本地完成，确保能到95分，再格式化数据，替换提交数据即可。\n数据已经为你准备好了(2021): \n**2021_data.json_95分：(复制它，别换行！)**    \n```json\n'[{\"orderindex\":\"1\",\"topicid\":\"1000042\",\"result\":\"D\"},{\"orderindex\":\"2\",\"topicid\":\"1000038\",\"result\":\"A\"},{\"orderindex\":\"3\",\"topicid\":\"1000006\",\"result\":\"A\"},{\"orderindex\":\"4\",\"topicid\":\"1000115\",\"result\":\"A\"},{\"orderindex\":\"5\",\"topicid\":\"1000142\",\"result\":\"D\"},{\"orderindex\":\"6\",\"topicid\":\"1000011\",\"result\":\"A\"},{\"orderindex\":\"7\",\"topicid\":\"1000145\",\"result\":\"D\"},{\"orderindex\":\"8\",\"topicid\":\"1000105\",\"result\":\"D\"},{\"orderindex\":\"9\",\"topicid\":\"1000139\",\"result\":\"C\"},{\"orderindex\":\"10\",\"topicid\":\"1000096\",\"result\":\"D\"},{\"orderindex\":\"11\",\"topicid\":\"1000116\",\"result\":\"A\"},{\"orderindex\":\"12\",\"topicid\":\"1000101\",\"result\":\"B\"},{\"orderindex\":\"13\",\"topicid\":\"1000047\",\"result\":\"D\"},{\"orderindex\":\"14\",\"topicid\":\"1000039\",\"result\":\"D\"},{\"orderindex\":\"15\",\"topicid\":\"1000090\",\"result\":\"C\"},{\"orderindex\":\"16\",\"topicid\":\"1000023\",\"result\":\"B\"},{\"orderindex\":\"17\",\"topicid\":\"1000120\",\"result\":\"B\"},{\"orderindex\":\"18\",\"topicid\":\"1000118\",\"result\":\"C\"},{\"orderindex\":\"19\",\"topicid\":\"1000053\",\"result\":\"C\"},{\"orderindex\":\"20\",\"topicid\":\"1000084\",\"result\":\"B\"},{\"orderindex\":\"21\",\"topicid\":\"1000159\",\"result\":\"B\"},{\"orderindex\":\"22\",\"topicid\":\"1000095\",\"result\":\"A\"},{\"orderindex\":\"23\",\"topicid\":\"1000085\",\"result\":\"C\"},{\"orderindex\":\"24\",\"topicid\":\"1000079\",\"result\":\"C\"},{\"orderindex\":\"25\",\"topicid\":\"1000097\",\"result\":\"C\"},{\"orderindex\":\"26\",\"topicid\":\"1000044\",\"result\":\"B\"},{\"orderindex\":\"27\",\"topicid\":\"1000014\",\"result\":\"B\"},{\"orderindex\":\"28\",\"topicid\":\"1000036\",\"result\":\"B\"},{\"orderindex\":\"29\",\"topicid\":\"1000160\",\"result\":\"C\"},{\"orderindex\":\"30\",\"topicid\":\"1000086\",\"result\":\"A\"},{\"orderindex\":\"31\",\"topicid\":\"1000092\",\"result\":\"D\"},{\"orderindex\":\"32\",\"topicid\":\"1000156\",\"result\":\"A\"},{\"orderindex\":\"33\",\"topicid\":\"1000109\",\"result\":\"C\"},{\"orderindex\":\"34\",\"topicid\":\"1000077\",\"result\":\"D\"},{\"orderindex\":\"35\",\"topicid\":\"1000157\",\"result\":\"C\"},{\"orderindex\":\"36\",\"topicid\":\"1000007\",\"result\":\"D\"},{\"orderindex\":\"37\",\"topicid\":\"1000058\",\"result\":\"A\"},{\"orderindex\":\"38\",\"topicid\":\"1000102\",\"result\":\"A\"},{\"orderindex\":\"39\",\"topicid\":\"1000049\",\"result\":\"C\"},{\"orderindex\":\"40\",\"topicid\":\"1000099\",\"result\":\"A\"},{\"orderindex\":\"41\",\"topicid\":\"1000113\",\"result\":\"C\"},{\"orderindex\":\"42\",\"topicid\":\"1000153\",\"result\":\"C\"},{\"orderindex\":\"43\",\"topicid\":\"1000117\",\"result\":\"D\"},{\"orderindex\":\"44\",\"topicid\":\"1000155\",\"result\":\"B\"},{\"orderindex\":\"45\",\"topicid\":\"1000161\",\"result\":\"C\"},{\"orderindex\":\"46\",\"topicid\":\"1000123\",\"result\":\"D\"},{\"orderindex\":\"47\",\"topicid\":\"1000013\",\"result\":\"B\"},{\"orderindex\":\"48\",\"topicid\":\"1000080\",\"result\":\"C\"},{\"orderindex\":\"49\",\"topicid\":\"1000111\",\"result\":\"B\"},{\"orderindex\":\"50\",\"topicid\":\"1000005\",\"result\":\"C\"},{\"orderindex\":\"51\",\"topicid\":\"1000204\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"52\",\"topicid\":\"1000298\",\"result\":\"A,B\"},{\"orderindex\":\"53\",\"topicid\":\"1000289\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"54\",\"topicid\":\"1000288\",\"result\":\"A,B,D\"},{\"orderindex\":\"55\",\"topicid\":\"1000219\",\"result\":\"B,C,D\"},{\"orderindex\":\"56\",\"topicid\":\"1000212\",\"result\":\"A,B,C\"},{\"orderindex\":\"57\",\"topicid\":\"1000209\",\"result\":\"A,B,C\"},{\"orderindex\":\"58\",\"topicid\":\"1000216\",\"result\":\"C,D\"},{\"orderindex\":\"59\",\"topicid\":\"1000207\",\"result\":\"A,B,D\"},{\"orderindex\":\"60\",\"topicid\":\"1000221\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"61\",\"topicid\":\"1000294\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"62\",\"topicid\":\"1000198\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"63\",\"topicid\":\"1000213\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"64\",\"topicid\":\"1000283\",\"result\":\"A,B,C\"},{\"orderindex\":\"65\",\"topicid\":\"1000163\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"66\",\"topicid\":\"1000211\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"67\",\"topicid\":\"1000194\",\"result\":\"A,B,D\"},{\"orderindex\":\"68\",\"topicid\":\"1000187\",\"result\":\"A,B\"},{\"orderindex\":\"69\",\"topicid\":\"1000224\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"70\",\"topicid\":\"1000205\",\"result\":\"A,B,D\"},{\"orderindex\":\"71\",\"topicid\":\"1000165\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"72\",\"topicid\":\"1000192\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"73\",\"topicid\":\"1000188\",\"result\":\"A,C,D\"},{\"orderindex\":\"74\",\"topicid\":\"1000182\",\"result\":\"B,D\"},{\"orderindex\":\"75\",\"topicid\":\"1000183\",\"result\":\"A,C\"},{\"orderindex\":\"76\",\"topicid\":\"1000175\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"77\",\"topicid\":\"1000286\",\"result\":\"B,C\"},{\"orderindex\":\"78\",\"topicid\":\"1000199\",\"result\":\"A,B,C\"},{\"orderindex\":\"79\",\"topicid\":\"1000284\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"80\",\"topicid\":\"1000181\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"81\",\"topicid\":\"1000256\",\"result\":\"A\"},{\"orderindex\":\"82\",\"topicid\":\"1000240\",\"result\":\"A\"},{\"orderindex\":\"83\",\"topicid\":\"1000232\",\"result\":\"A\"},{\"orderindex\":\"84\",\"topicid\":\"1000260\",\"result\":\"A\"},{\"orderindex\":\"85\",\"topicid\":\"1000234\",\"result\":\"A\"},{\"orderindex\":\"86\",\"topicid\":\"1000266\",\"result\":\"B\"},{\"orderindex\":\"87\",\"topicid\":\"1000244\",\"result\":\"A\"},{\"orderindex\":\"88\",\"topicid\":\"1000299\",\"result\":\"A\"},{\"orderindex\":\"89\",\"topicid\":\"1000270\",\"result\":\"A\"},{\"orderindex\":\"90\",\"topicid\":\"1000251\",\"result\":\"A\"},{\"orderindex\":\"91\",\"topicid\":\"1000300\",\"result\":\"A\"},{\"orderindex\":\"92\",\"topicid\":\"1000273\",\"result\":\"B\"},{\"orderindex\":\"93\",\"topicid\":\"1000245\",\"result\":\"A\"},{\"orderindex\":\"94\",\"topicid\":\"1000255\",\"result\":\"B\"},{\"orderindex\":\"95\",\"topicid\":\"1000262\",\"result\":\"A\"},{\"orderindex\":\"96\",\"topicid\":\"1000254\",\"result\":\"B\"},{\"orderindex\":\"97\",\"topicid\":\"1000268\",\"result\":\"A\"},{\"orderindex\":\"98\",\"topicid\":\"1000248\",\"result\":\"A\"},{\"orderindex\":\"99\",\"topicid\":\"1000243\",\"result\":\"B\"},{\"orderindex\":\"100\",\"topicid\":\"1000249\",\"result\":\"A\"}]'\n```\n**100分表头**  \n```json\n'[{\"orderindex\":\"1\",\"topicid\":\"1000216\",\"result\":\"C,D\"},{\"orderindex\":\"2\",\"topicid\":\"1000067\",\"result\":\"D\"},{\"orderindex\":\"3\",\"topicid\":\"1000109\",\"result\":\"C\"},{\"orderindex\":\"4\",\"topicid\":\"1000134\",\"result\":\"C\"},{\"orderindex\":\"5\",\"topicid\":\"1000005\",\"result\":\"C\"},{\"orderindex\":\"6\",\"topicid\":\"1000007\",\"result\":\"D\"},{\"orderindex\":\"7\",\"topicid\":\"1000090\",\"result\":\"C\"},{\"orderindex\":\"8\",\"topicid\":\"1000119\",\"result\":\"D\"},{\"orderindex\":\"9\",\"topicid\":\"1000213\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"10\",\"topicid\":\"1000125\",\"result\":\"D\"},{\"orderindex\":\"11\",\"topicid\":\"1000234\",\"result\":\"A\"},{\"orderindex\":\"12\",\"topicid\":\"1000179\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"13\",\"topicid\":\"1000243\",\"result\":\"B\"},{\"orderindex\":\"14\",\"topicid\":\"1000197\",\"result\":\"C,D\"},{\"orderindex\":\"15\",\"topicid\":\"1000224\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"16\",\"topicid\":\"1000047\",\"result\":\"D\"},{\"orderindex\":\"17\",\"topicid\":\"1000096\",\"result\":\"D\"},{\"orderindex\":\"18\",\"topicid\":\"1000106\",\"result\":\"B\"},{\"orderindex\":\"19\",\"topicid\":\"1000155\",\"result\":\"B\"},{\"orderindex\":\"20\",\"topicid\":\"1000017\",\"result\":\"D\"},{\"orderindex\":\"21\",\"topicid\":\"1000154\",\"result\":\"A\"},{\"orderindex\":\"22\",\"topicid\":\"1000020\",\"result\":\"C\"},{\"orderindex\":\"23\",\"topicid\":\"1000173\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"24\",\"topicid\":\"1000168\",\"result\":\"A,B,D\"},{\"orderindex\":\"25\",\"topicid\":\"1000249\",\"result\":\"A\"},{\"orderindex\":\"26\",\"topicid\":\"1000001\",\"result\":\"B\"},{\"orderindex\":\"27\",\"topicid\":\"1000140\",\"result\":\"B\"},{\"orderindex\":\"28\",\"topicid\":\"1000264\",\"result\":\"B\"},{\"orderindex\":\"29\",\"topicid\":\"1000027\",\"result\":\"C\"},{\"orderindex\":\"30\",\"topicid\":\"1000068\",\"result\":\"A\"},{\"orderindex\":\"31\",\"topicid\":\"1000147\",\"result\":\"B\"},{\"orderindex\":\"32\",\"topicid\":\"1000195\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"33\",\"topicid\":\"1000286\",\"result\":\"B,C\"},{\"orderindex\":\"34\",\"topicid\":\"1000229\",\"result\":\"B\"},{\"orderindex\":\"35\",\"topicid\":\"1000143\",\"result\":\"C\"},{\"orderindex\":\"36\",\"topicid\":\"1000118\",\"result\":\"C\"},{\"orderindex\":\"37\",\"topicid\":\"1000019\",\"result\":\"C\"},{\"orderindex\":\"38\",\"topicid\":\"1000057\",\"result\":\"C\"},{\"orderindex\":\"39\",\"topicid\":\"1000176\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"40\",\"topicid\":\"1000267\",\"result\":\"B\"},{\"orderindex\":\"41\",\"topicid\":\"1000123\",\"result\":\"D\"},{\"orderindex\":\"42\",\"topicid\":\"1000269\",\"result\":\"A\"},{\"orderindex\":\"43\",\"topicid\":\"1000203\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"44\",\"topicid\":\"1000107\",\"result\":\"B\"},{\"orderindex\":\"45\",\"topicid\":\"1000220\",\"result\":\"B,C\"},{\"orderindex\":\"46\",\"topicid\":\"1000295\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"47\",\"topicid\":\"1000250\",\"result\":\"B\"},{\"orderindex\":\"48\",\"topicid\":\"1000112\",\"result\":\"D\"},{\"orderindex\":\"49\",\"topicid\":\"1000150\",\"result\":\"D\"},{\"orderindex\":\"50\",\"topicid\":\"1000158\",\"result\":\"D\"},{\"orderindex\":\"51\",\"topicid\":\"1000284\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"52\",\"topicid\":\"1000039\",\"result\":\"D\"},{\"orderindex\":\"53\",\"topicid\":\"1000094\",\"result\":\"B\"},{\"orderindex\":\"54\",\"topicid\":\"1000079\",\"result\":\"C\"},{\"orderindex\":\"55\",\"topicid\":\"1000261\",\"result\":\"A\"},{\"orderindex\":\"56\",\"topicid\":\"1000159\",\"result\":\"B\"},{\"orderindex\":\"57\",\"topicid\":\"1000219\",\"result\":\"B,C,D\"},{\"orderindex\":\"58\",\"topicid\":\"1000012\",\"result\":\"B\"},{\"orderindex\":\"59\",\"topicid\":\"1000258\",\"result\":\"A\"},{\"orderindex\":\"60\",\"topicid\":\"1000161\",\"result\":\"C\"},{\"orderindex\":\"61\",\"topicid\":\"1000127\",\"result\":\"A\"},{\"orderindex\":\"62\",\"topicid\":\"1000288\",\"result\":\"A,B,D\"},{\"orderindex\":\"63\",\"topicid\":\"1000008\",\"result\":\"C\"},{\"orderindex\":\"64\",\"topicid\":\"1000232\",\"result\":\"A\"},{\"orderindex\":\"65\",\"topicid\":\"1000103\",\"result\":\"C\"},{\"orderindex\":\"66\",\"topicid\":\"1000300\",\"result\":\"A\"},{\"orderindex\":\"67\",\"topicid\":\"1000087\",\"result\":\"B\"},{\"orderindex\":\"68\",\"topicid\":\"1000270\",\"result\":\"A\"},{\"orderindex\":\"69\",\"topicid\":\"1000210\",\"result\":\"B,C\"},{\"orderindex\":\"70\",\"topicid\":\"1000231\",\"result\":\"A\"},{\"orderindex\":\"71\",\"topicid\":\"1000209\",\"result\":\"A,B,C\"},{\"orderindex\":\"72\",\"topicid\":\"1000137\",\"result\":\"C\"},{\"orderindex\":\"73\",\"topicid\":\"1000124\",\"result\":\"D\"},{\"orderindex\":\"74\",\"topicid\":\"1000233\",\"result\":\"B\"},{\"orderindex\":\"75\",\"topicid\":\"1000285\",\"result\":\"C,D\"},{\"orderindex\":\"76\",\"topicid\":\"1000100\",\"result\":\"C\"},{\"orderindex\":\"77\",\"topicid\":\"1000225\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"78\",\"topicid\":\"1000251\",\"result\":\"A\"},{\"orderindex\":\"79\",\"topicid\":\"1000199\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"80\",\"topicid\":\"1000297\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"81\",\"topicid\":\"1000245\",\"result\":\"A\"},{\"orderindex\":\"82\",\"topicid\":\"1000289\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"83\",\"topicid\":\"1000095\",\"result\":\"A\"},{\"orderindex\":\"84\",\"topicid\":\"1000247\",\"result\":\"A\"},{\"orderindex\":\"85\",\"topicid\":\"1000222\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"86\",\"topicid\":\"1000075\",\"result\":\"D\"},{\"orderindex\":\"87\",\"topicid\":\"1000133\",\"result\":\"D\"},{\"orderindex\":\"88\",\"topicid\":\"1000115\",\"result\":\"A\"},{\"orderindex\":\"89\",\"topicid\":\"1000042\",\"result\":\"D\"},{\"orderindex\":\"90\",\"topicid\":\"1000282\",\"result\":\"A,B,D\"},{\"orderindex\":\"91\",\"topicid\":\"1000205\",\"result\":\"A,B,D\"},{\"orderindex\":\"92\",\"topicid\":\"1000099\",\"result\":\"A\"},{\"orderindex\":\"93\",\"topicid\":\"1000274\",\"result\":\"B\"},{\"orderindex\":\"94\",\"topicid\":\"1000170\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"95\",\"topicid\":\"1000002\",\"result\":\"A\"},{\"orderindex\":\"96\",\"topicid\":\"1000171\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"97\",\"topicid\":\"1000084\",\"result\":\"B\"},{\"orderindex\":\"98\",\"topicid\":\"1000181\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"99\",\"topicid\":\"1000268\",\"result\":\"A\"},{\"orderindex\":\"100\",\"topicid\":\"1000283\",\"result\":\"A,B,C\"}]'\n```\n2.更改JS文件，绕过答题检测机制  \n\n按下F12，进入控制台，选中 源代码/Sources/资源 标签   \n找到 examination.js 文件  \n![image](https://user-images.githubusercontent.com/41804496/142233436-5e442527-9c4a-43c7-accf-4232c41231b5.png)    \n在里面搜索 autoSubmit(),找到 function autoSubmit()函数，将：    \nvar result_content=getExamAnswerFn();  \n![image](https://user-images.githubusercontent.com/41804496/142237598-52f599e9-5d5a-49bd-a0b4-09766e86a79d.png)\n\n中的getExamAnswerFn()替换为2021_data.json中的数据，注意，一定不要换行！  \n![image](https://user-images.githubusercontent.com/41804496/142237763-1a696d7a-4ddc-44b2-bb40-daaf3feac1d8.png)\n\n按下 Ctrl + s 保存（如果出现黄色小三角，提示没被保存，那么继续往下看）  \n\n3.更改时间数据，提交  \n在控制台中设置 starttime ,让他与你现在的时间相差 15min以上。  \n确认一切无误后，键入  \n autoSubmit()  \n 完成提交。 \n  \n    \n    \n（小三角的解决方法）由于安全性阻止，你的修改不一定会凑效，这个时候需要在工作区打开一个本地文件夹来使用本地替换。 \n\n![image](https://user-images.githubusercontent.com/41804496/142235584-28ae0b2c-7087-48da-b7d1-4b2b1c082d4d.png)  \n\n（可以参考这个文章：https://blog.csdn.net/fjh1997/article/details/107588701\n\n完成保存回到上面继续操作即可。  \n- - -\n### 时间魔法\n\n用控制台延迟时间，F12后进入控制台，控制台中输入min = 40，可重置倒计时，\n```\nmin = xx\n```\n\nmin只是用来控制autoSubmit()函数，min<=0时会执行自动提交\n\n而要注意的是，提交的时候使用的 \"starttime\" 来校验是否过短或者超时答题，请确保提交的时候，starttime 和现在的时间差大于15分钟。\n```\nstarttime = 'xxxx-xx-xx xx:xx:xx'\n```\n\n- - -\n如果你只是想要截图分数+流水：\n\n在控制台(console)中键入 \n```\nalert(\"xxx的得分为xx分，流水号：xxxxxxxx，提交时间xxxx-xx-xx xx:xx:xx\")\n\n```\n\n","source":"_posts/河南省宗教知识竞赛刷分思路＆脚本合集.md","raw":"---\ntitle: 河南省宗教知识竞赛刷分思路＆脚本合集\ndate: 2021-11-21 00:42:28\ntags: 杂项\ncategories: 随手一记\n---\n# ZZULI_AC_OF_ZSJS\n河南省大学生中国特色社会主义民族宗教理论知识竞赛  \n（这真实一个让人无比抓狂的比赛呢） \n文章项目地址：https://github.com/ProbiusOfficial\n## 看这里\n题库替换的方法以及有大佬写了油猴脚本里Qwq~  \n感谢@https://github.com/xVue 大佬    \n文件为 zj.user.js  各位按需自取鸭~  \n2021/11/19 更新：scriptcat不运行问题，自动提交改为手动提交，分数提至100分，页面优化  \n[点这里直接拿脚本](https://greasyfork.org/zh-CN/scripts/435679-%E6%B2%B3%E5%8D%97%E5%AE%97%E6%95%99%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86%E7%AB%9E%E8%B5%9B)\n### 关于这份脚本\n该脚本目前没法完成完美答题，因为题库歪了。。。（可以看看下面的方法  \n题库文件是data.js，其他答题逻辑没有问题。  \n如果各位有能力可以自己fork后更改题库文件  \n每一年题库id都会变，但是每年id目前来看肯定是唯一的，当然不清楚后面会不会出现更多的NT  \n- - -\n### 关于另外一种方法\n——我为什么放弃了脚本（雾  \n作者：@TherHello:https://www.therehello.top/ & @探姬  \n不许拿去商用赚钱！！！！！！！  \n#### 页面的提交过程分析如下：\n```\n程序调用 autoSubmit()  \n然后该调用getExamAnswerFn()这个函数，从开始遍历读取你的答案，如果有没有答的题则alert  \n一切无误后被封装在 result_content 中  \n其格式如下：  \n\n'[{\"orderindex\":\"1\",\"topicid\":\"1000042\",\"result\":\"D\"},{\"orderindex\":\"2\",\"topicid\":\"1000038\",\"result\":\"A\"},{\"orderindex\":\"3\",\"topicid\":\"1000006\",\"result\":\"A\"},{\"orderindex\":\"4\",\"topicid\":\"1000115\",\"result\":\"A\"},{\"orderindex\":\"5\",\"topicid\":\"1000142\",\"result\":\"D\"},{\"orderindex\":\"6\",\"topicid\":\"1000011\",\"result\":\"A\"},{\"orderindex\":\"7\",\"topicid\":\"1000145\",\"result\":\"D\"},{\"orderindex\":\"8\",\"topicid\":\"1000105\",\"result\":\"D\"},{\"orderindex\":\"9\",\"topicid\":\"1000139\",\"result\":\"C\"},{\"orderindex\":\"10\",\"topicid\":\"1000096\",\"result\":\"D\"},{\"orderindex\":\"11\",\"topicid\":\"1000116\",\"result\":\"A\"},{\"orderindex\":\"12\",\"topicid\":\"10\n....\n//多选题的样例:  \n{\"orderindex\":\"54\",\"topicid\":\"1000288\",\"result\":\"A,B,D\"}  \n\n再通过var params={paperid:paperid,csmpagerid:csmpagerid,starttime:starttime,result_content:result_content,memberusercode:memberusercode,memberschoolid:memberschoolid,membernickname:membernickname,ssm:getSSM()}构造头信息\n最后通过\n$.post(url,params,function(responseText){\n    ...\n}\n进行提交，\n所以只需要替换掉 result_content 即可。\n```\n\n所以：大致思路，替换提交的时候的题目数据，直接提交一份95分的题目表单。\n\n#### 过程如下：\n1.爬取页面，获得题目ID和题目在本地完成，确保能到95分，再格式化数据，替换提交数据即可。\n数据已经为你准备好了(2021): \n**2021_data.json_95分：(复制它，别换行！)**    \n```json\n'[{\"orderindex\":\"1\",\"topicid\":\"1000042\",\"result\":\"D\"},{\"orderindex\":\"2\",\"topicid\":\"1000038\",\"result\":\"A\"},{\"orderindex\":\"3\",\"topicid\":\"1000006\",\"result\":\"A\"},{\"orderindex\":\"4\",\"topicid\":\"1000115\",\"result\":\"A\"},{\"orderindex\":\"5\",\"topicid\":\"1000142\",\"result\":\"D\"},{\"orderindex\":\"6\",\"topicid\":\"1000011\",\"result\":\"A\"},{\"orderindex\":\"7\",\"topicid\":\"1000145\",\"result\":\"D\"},{\"orderindex\":\"8\",\"topicid\":\"1000105\",\"result\":\"D\"},{\"orderindex\":\"9\",\"topicid\":\"1000139\",\"result\":\"C\"},{\"orderindex\":\"10\",\"topicid\":\"1000096\",\"result\":\"D\"},{\"orderindex\":\"11\",\"topicid\":\"1000116\",\"result\":\"A\"},{\"orderindex\":\"12\",\"topicid\":\"1000101\",\"result\":\"B\"},{\"orderindex\":\"13\",\"topicid\":\"1000047\",\"result\":\"D\"},{\"orderindex\":\"14\",\"topicid\":\"1000039\",\"result\":\"D\"},{\"orderindex\":\"15\",\"topicid\":\"1000090\",\"result\":\"C\"},{\"orderindex\":\"16\",\"topicid\":\"1000023\",\"result\":\"B\"},{\"orderindex\":\"17\",\"topicid\":\"1000120\",\"result\":\"B\"},{\"orderindex\":\"18\",\"topicid\":\"1000118\",\"result\":\"C\"},{\"orderindex\":\"19\",\"topicid\":\"1000053\",\"result\":\"C\"},{\"orderindex\":\"20\",\"topicid\":\"1000084\",\"result\":\"B\"},{\"orderindex\":\"21\",\"topicid\":\"1000159\",\"result\":\"B\"},{\"orderindex\":\"22\",\"topicid\":\"1000095\",\"result\":\"A\"},{\"orderindex\":\"23\",\"topicid\":\"1000085\",\"result\":\"C\"},{\"orderindex\":\"24\",\"topicid\":\"1000079\",\"result\":\"C\"},{\"orderindex\":\"25\",\"topicid\":\"1000097\",\"result\":\"C\"},{\"orderindex\":\"26\",\"topicid\":\"1000044\",\"result\":\"B\"},{\"orderindex\":\"27\",\"topicid\":\"1000014\",\"result\":\"B\"},{\"orderindex\":\"28\",\"topicid\":\"1000036\",\"result\":\"B\"},{\"orderindex\":\"29\",\"topicid\":\"1000160\",\"result\":\"C\"},{\"orderindex\":\"30\",\"topicid\":\"1000086\",\"result\":\"A\"},{\"orderindex\":\"31\",\"topicid\":\"1000092\",\"result\":\"D\"},{\"orderindex\":\"32\",\"topicid\":\"1000156\",\"result\":\"A\"},{\"orderindex\":\"33\",\"topicid\":\"1000109\",\"result\":\"C\"},{\"orderindex\":\"34\",\"topicid\":\"1000077\",\"result\":\"D\"},{\"orderindex\":\"35\",\"topicid\":\"1000157\",\"result\":\"C\"},{\"orderindex\":\"36\",\"topicid\":\"1000007\",\"result\":\"D\"},{\"orderindex\":\"37\",\"topicid\":\"1000058\",\"result\":\"A\"},{\"orderindex\":\"38\",\"topicid\":\"1000102\",\"result\":\"A\"},{\"orderindex\":\"39\",\"topicid\":\"1000049\",\"result\":\"C\"},{\"orderindex\":\"40\",\"topicid\":\"1000099\",\"result\":\"A\"},{\"orderindex\":\"41\",\"topicid\":\"1000113\",\"result\":\"C\"},{\"orderindex\":\"42\",\"topicid\":\"1000153\",\"result\":\"C\"},{\"orderindex\":\"43\",\"topicid\":\"1000117\",\"result\":\"D\"},{\"orderindex\":\"44\",\"topicid\":\"1000155\",\"result\":\"B\"},{\"orderindex\":\"45\",\"topicid\":\"1000161\",\"result\":\"C\"},{\"orderindex\":\"46\",\"topicid\":\"1000123\",\"result\":\"D\"},{\"orderindex\":\"47\",\"topicid\":\"1000013\",\"result\":\"B\"},{\"orderindex\":\"48\",\"topicid\":\"1000080\",\"result\":\"C\"},{\"orderindex\":\"49\",\"topicid\":\"1000111\",\"result\":\"B\"},{\"orderindex\":\"50\",\"topicid\":\"1000005\",\"result\":\"C\"},{\"orderindex\":\"51\",\"topicid\":\"1000204\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"52\",\"topicid\":\"1000298\",\"result\":\"A,B\"},{\"orderindex\":\"53\",\"topicid\":\"1000289\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"54\",\"topicid\":\"1000288\",\"result\":\"A,B,D\"},{\"orderindex\":\"55\",\"topicid\":\"1000219\",\"result\":\"B,C,D\"},{\"orderindex\":\"56\",\"topicid\":\"1000212\",\"result\":\"A,B,C\"},{\"orderindex\":\"57\",\"topicid\":\"1000209\",\"result\":\"A,B,C\"},{\"orderindex\":\"58\",\"topicid\":\"1000216\",\"result\":\"C,D\"},{\"orderindex\":\"59\",\"topicid\":\"1000207\",\"result\":\"A,B,D\"},{\"orderindex\":\"60\",\"topicid\":\"1000221\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"61\",\"topicid\":\"1000294\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"62\",\"topicid\":\"1000198\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"63\",\"topicid\":\"1000213\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"64\",\"topicid\":\"1000283\",\"result\":\"A,B,C\"},{\"orderindex\":\"65\",\"topicid\":\"1000163\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"66\",\"topicid\":\"1000211\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"67\",\"topicid\":\"1000194\",\"result\":\"A,B,D\"},{\"orderindex\":\"68\",\"topicid\":\"1000187\",\"result\":\"A,B\"},{\"orderindex\":\"69\",\"topicid\":\"1000224\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"70\",\"topicid\":\"1000205\",\"result\":\"A,B,D\"},{\"orderindex\":\"71\",\"topicid\":\"1000165\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"72\",\"topicid\":\"1000192\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"73\",\"topicid\":\"1000188\",\"result\":\"A,C,D\"},{\"orderindex\":\"74\",\"topicid\":\"1000182\",\"result\":\"B,D\"},{\"orderindex\":\"75\",\"topicid\":\"1000183\",\"result\":\"A,C\"},{\"orderindex\":\"76\",\"topicid\":\"1000175\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"77\",\"topicid\":\"1000286\",\"result\":\"B,C\"},{\"orderindex\":\"78\",\"topicid\":\"1000199\",\"result\":\"A,B,C\"},{\"orderindex\":\"79\",\"topicid\":\"1000284\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"80\",\"topicid\":\"1000181\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"81\",\"topicid\":\"1000256\",\"result\":\"A\"},{\"orderindex\":\"82\",\"topicid\":\"1000240\",\"result\":\"A\"},{\"orderindex\":\"83\",\"topicid\":\"1000232\",\"result\":\"A\"},{\"orderindex\":\"84\",\"topicid\":\"1000260\",\"result\":\"A\"},{\"orderindex\":\"85\",\"topicid\":\"1000234\",\"result\":\"A\"},{\"orderindex\":\"86\",\"topicid\":\"1000266\",\"result\":\"B\"},{\"orderindex\":\"87\",\"topicid\":\"1000244\",\"result\":\"A\"},{\"orderindex\":\"88\",\"topicid\":\"1000299\",\"result\":\"A\"},{\"orderindex\":\"89\",\"topicid\":\"1000270\",\"result\":\"A\"},{\"orderindex\":\"90\",\"topicid\":\"1000251\",\"result\":\"A\"},{\"orderindex\":\"91\",\"topicid\":\"1000300\",\"result\":\"A\"},{\"orderindex\":\"92\",\"topicid\":\"1000273\",\"result\":\"B\"},{\"orderindex\":\"93\",\"topicid\":\"1000245\",\"result\":\"A\"},{\"orderindex\":\"94\",\"topicid\":\"1000255\",\"result\":\"B\"},{\"orderindex\":\"95\",\"topicid\":\"1000262\",\"result\":\"A\"},{\"orderindex\":\"96\",\"topicid\":\"1000254\",\"result\":\"B\"},{\"orderindex\":\"97\",\"topicid\":\"1000268\",\"result\":\"A\"},{\"orderindex\":\"98\",\"topicid\":\"1000248\",\"result\":\"A\"},{\"orderindex\":\"99\",\"topicid\":\"1000243\",\"result\":\"B\"},{\"orderindex\":\"100\",\"topicid\":\"1000249\",\"result\":\"A\"}]'\n```\n**100分表头**  \n```json\n'[{\"orderindex\":\"1\",\"topicid\":\"1000216\",\"result\":\"C,D\"},{\"orderindex\":\"2\",\"topicid\":\"1000067\",\"result\":\"D\"},{\"orderindex\":\"3\",\"topicid\":\"1000109\",\"result\":\"C\"},{\"orderindex\":\"4\",\"topicid\":\"1000134\",\"result\":\"C\"},{\"orderindex\":\"5\",\"topicid\":\"1000005\",\"result\":\"C\"},{\"orderindex\":\"6\",\"topicid\":\"1000007\",\"result\":\"D\"},{\"orderindex\":\"7\",\"topicid\":\"1000090\",\"result\":\"C\"},{\"orderindex\":\"8\",\"topicid\":\"1000119\",\"result\":\"D\"},{\"orderindex\":\"9\",\"topicid\":\"1000213\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"10\",\"topicid\":\"1000125\",\"result\":\"D\"},{\"orderindex\":\"11\",\"topicid\":\"1000234\",\"result\":\"A\"},{\"orderindex\":\"12\",\"topicid\":\"1000179\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"13\",\"topicid\":\"1000243\",\"result\":\"B\"},{\"orderindex\":\"14\",\"topicid\":\"1000197\",\"result\":\"C,D\"},{\"orderindex\":\"15\",\"topicid\":\"1000224\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"16\",\"topicid\":\"1000047\",\"result\":\"D\"},{\"orderindex\":\"17\",\"topicid\":\"1000096\",\"result\":\"D\"},{\"orderindex\":\"18\",\"topicid\":\"1000106\",\"result\":\"B\"},{\"orderindex\":\"19\",\"topicid\":\"1000155\",\"result\":\"B\"},{\"orderindex\":\"20\",\"topicid\":\"1000017\",\"result\":\"D\"},{\"orderindex\":\"21\",\"topicid\":\"1000154\",\"result\":\"A\"},{\"orderindex\":\"22\",\"topicid\":\"1000020\",\"result\":\"C\"},{\"orderindex\":\"23\",\"topicid\":\"1000173\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"24\",\"topicid\":\"1000168\",\"result\":\"A,B,D\"},{\"orderindex\":\"25\",\"topicid\":\"1000249\",\"result\":\"A\"},{\"orderindex\":\"26\",\"topicid\":\"1000001\",\"result\":\"B\"},{\"orderindex\":\"27\",\"topicid\":\"1000140\",\"result\":\"B\"},{\"orderindex\":\"28\",\"topicid\":\"1000264\",\"result\":\"B\"},{\"orderindex\":\"29\",\"topicid\":\"1000027\",\"result\":\"C\"},{\"orderindex\":\"30\",\"topicid\":\"1000068\",\"result\":\"A\"},{\"orderindex\":\"31\",\"topicid\":\"1000147\",\"result\":\"B\"},{\"orderindex\":\"32\",\"topicid\":\"1000195\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"33\",\"topicid\":\"1000286\",\"result\":\"B,C\"},{\"orderindex\":\"34\",\"topicid\":\"1000229\",\"result\":\"B\"},{\"orderindex\":\"35\",\"topicid\":\"1000143\",\"result\":\"C\"},{\"orderindex\":\"36\",\"topicid\":\"1000118\",\"result\":\"C\"},{\"orderindex\":\"37\",\"topicid\":\"1000019\",\"result\":\"C\"},{\"orderindex\":\"38\",\"topicid\":\"1000057\",\"result\":\"C\"},{\"orderindex\":\"39\",\"topicid\":\"1000176\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"40\",\"topicid\":\"1000267\",\"result\":\"B\"},{\"orderindex\":\"41\",\"topicid\":\"1000123\",\"result\":\"D\"},{\"orderindex\":\"42\",\"topicid\":\"1000269\",\"result\":\"A\"},{\"orderindex\":\"43\",\"topicid\":\"1000203\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"44\",\"topicid\":\"1000107\",\"result\":\"B\"},{\"orderindex\":\"45\",\"topicid\":\"1000220\",\"result\":\"B,C\"},{\"orderindex\":\"46\",\"topicid\":\"1000295\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"47\",\"topicid\":\"1000250\",\"result\":\"B\"},{\"orderindex\":\"48\",\"topicid\":\"1000112\",\"result\":\"D\"},{\"orderindex\":\"49\",\"topicid\":\"1000150\",\"result\":\"D\"},{\"orderindex\":\"50\",\"topicid\":\"1000158\",\"result\":\"D\"},{\"orderindex\":\"51\",\"topicid\":\"1000284\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"52\",\"topicid\":\"1000039\",\"result\":\"D\"},{\"orderindex\":\"53\",\"topicid\":\"1000094\",\"result\":\"B\"},{\"orderindex\":\"54\",\"topicid\":\"1000079\",\"result\":\"C\"},{\"orderindex\":\"55\",\"topicid\":\"1000261\",\"result\":\"A\"},{\"orderindex\":\"56\",\"topicid\":\"1000159\",\"result\":\"B\"},{\"orderindex\":\"57\",\"topicid\":\"1000219\",\"result\":\"B,C,D\"},{\"orderindex\":\"58\",\"topicid\":\"1000012\",\"result\":\"B\"},{\"orderindex\":\"59\",\"topicid\":\"1000258\",\"result\":\"A\"},{\"orderindex\":\"60\",\"topicid\":\"1000161\",\"result\":\"C\"},{\"orderindex\":\"61\",\"topicid\":\"1000127\",\"result\":\"A\"},{\"orderindex\":\"62\",\"topicid\":\"1000288\",\"result\":\"A,B,D\"},{\"orderindex\":\"63\",\"topicid\":\"1000008\",\"result\":\"C\"},{\"orderindex\":\"64\",\"topicid\":\"1000232\",\"result\":\"A\"},{\"orderindex\":\"65\",\"topicid\":\"1000103\",\"result\":\"C\"},{\"orderindex\":\"66\",\"topicid\":\"1000300\",\"result\":\"A\"},{\"orderindex\":\"67\",\"topicid\":\"1000087\",\"result\":\"B\"},{\"orderindex\":\"68\",\"topicid\":\"1000270\",\"result\":\"A\"},{\"orderindex\":\"69\",\"topicid\":\"1000210\",\"result\":\"B,C\"},{\"orderindex\":\"70\",\"topicid\":\"1000231\",\"result\":\"A\"},{\"orderindex\":\"71\",\"topicid\":\"1000209\",\"result\":\"A,B,C\"},{\"orderindex\":\"72\",\"topicid\":\"1000137\",\"result\":\"C\"},{\"orderindex\":\"73\",\"topicid\":\"1000124\",\"result\":\"D\"},{\"orderindex\":\"74\",\"topicid\":\"1000233\",\"result\":\"B\"},{\"orderindex\":\"75\",\"topicid\":\"1000285\",\"result\":\"C,D\"},{\"orderindex\":\"76\",\"topicid\":\"1000100\",\"result\":\"C\"},{\"orderindex\":\"77\",\"topicid\":\"1000225\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"78\",\"topicid\":\"1000251\",\"result\":\"A\"},{\"orderindex\":\"79\",\"topicid\":\"1000199\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"80\",\"topicid\":\"1000297\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"81\",\"topicid\":\"1000245\",\"result\":\"A\"},{\"orderindex\":\"82\",\"topicid\":\"1000289\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"83\",\"topicid\":\"1000095\",\"result\":\"A\"},{\"orderindex\":\"84\",\"topicid\":\"1000247\",\"result\":\"A\"},{\"orderindex\":\"85\",\"topicid\":\"1000222\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"86\",\"topicid\":\"1000075\",\"result\":\"D\"},{\"orderindex\":\"87\",\"topicid\":\"1000133\",\"result\":\"D\"},{\"orderindex\":\"88\",\"topicid\":\"1000115\",\"result\":\"A\"},{\"orderindex\":\"89\",\"topicid\":\"1000042\",\"result\":\"D\"},{\"orderindex\":\"90\",\"topicid\":\"1000282\",\"result\":\"A,B,D\"},{\"orderindex\":\"91\",\"topicid\":\"1000205\",\"result\":\"A,B,D\"},{\"orderindex\":\"92\",\"topicid\":\"1000099\",\"result\":\"A\"},{\"orderindex\":\"93\",\"topicid\":\"1000274\",\"result\":\"B\"},{\"orderindex\":\"94\",\"topicid\":\"1000170\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"95\",\"topicid\":\"1000002\",\"result\":\"A\"},{\"orderindex\":\"96\",\"topicid\":\"1000171\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"97\",\"topicid\":\"1000084\",\"result\":\"B\"},{\"orderindex\":\"98\",\"topicid\":\"1000181\",\"result\":\"A,B,C,D\"},{\"orderindex\":\"99\",\"topicid\":\"1000268\",\"result\":\"A\"},{\"orderindex\":\"100\",\"topicid\":\"1000283\",\"result\":\"A,B,C\"}]'\n```\n2.更改JS文件，绕过答题检测机制  \n\n按下F12，进入控制台，选中 源代码/Sources/资源 标签   \n找到 examination.js 文件  \n![image](https://user-images.githubusercontent.com/41804496/142233436-5e442527-9c4a-43c7-accf-4232c41231b5.png)    \n在里面搜索 autoSubmit(),找到 function autoSubmit()函数，将：    \nvar result_content=getExamAnswerFn();  \n![image](https://user-images.githubusercontent.com/41804496/142237598-52f599e9-5d5a-49bd-a0b4-09766e86a79d.png)\n\n中的getExamAnswerFn()替换为2021_data.json中的数据，注意，一定不要换行！  \n![image](https://user-images.githubusercontent.com/41804496/142237763-1a696d7a-4ddc-44b2-bb40-daaf3feac1d8.png)\n\n按下 Ctrl + s 保存（如果出现黄色小三角，提示没被保存，那么继续往下看）  \n\n3.更改时间数据，提交  \n在控制台中设置 starttime ,让他与你现在的时间相差 15min以上。  \n确认一切无误后，键入  \n autoSubmit()  \n 完成提交。 \n  \n    \n    \n（小三角的解决方法）由于安全性阻止，你的修改不一定会凑效，这个时候需要在工作区打开一个本地文件夹来使用本地替换。 \n\n![image](https://user-images.githubusercontent.com/41804496/142235584-28ae0b2c-7087-48da-b7d1-4b2b1c082d4d.png)  \n\n（可以参考这个文章：https://blog.csdn.net/fjh1997/article/details/107588701\n\n完成保存回到上面继续操作即可。  \n- - -\n### 时间魔法\n\n用控制台延迟时间，F12后进入控制台，控制台中输入min = 40，可重置倒计时，\n```\nmin = xx\n```\n\nmin只是用来控制autoSubmit()函数，min<=0时会执行自动提交\n\n而要注意的是，提交的时候使用的 \"starttime\" 来校验是否过短或者超时答题，请确保提交的时候，starttime 和现在的时间差大于15分钟。\n```\nstarttime = 'xxxx-xx-xx xx:xx:xx'\n```\n\n- - -\n如果你只是想要截图分数+流水：\n\n在控制台(console)中键入 \n```\nalert(\"xxx的得分为xx分，流水号：xxxxxxxx，提交时间xxxx-xx-xx xx:xx:xx\")\n\n```\n\n","slug":"河南省宗教知识竞赛刷分思路＆脚本合集","published":1,"updated":"2021-12-19T06:36:13.324Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxcz8ryg0013f8v0f2q26b23","content":"<h1 id=\"ZZULI-AC-OF-ZSJS\"><a href=\"#ZZULI-AC-OF-ZSJS\" class=\"headerlink\" title=\"ZZULI_AC_OF_ZSJS\"></a>ZZULI_AC_OF_ZSJS</h1><p>河南省大学生中国特色社会主义民族宗教理论知识竞赛<br>（这真实一个让人无比抓狂的比赛呢）<br>文章项目地址：<a href=\"https://github.com/ProbiusOfficial\">https://github.com/ProbiusOfficial</a></p>\n<h2 id=\"看这里\"><a href=\"#看这里\" class=\"headerlink\" title=\"看这里\"></a>看这里</h2><p>题库替换的方法以及有大佬写了油猴脚本里Qwq~<br>感谢@<a href=\"https://github.com/xVue\">https://github.com/xVue</a> 大佬<br>文件为 zj.user.js  各位按需自取鸭~<br>2021/11/19 更新：scriptcat不运行问题，自动提交改为手动提交，分数提至100分，页面优化<br><a href=\"https://greasyfork.org/zh-CN/scripts/435679-%E6%B2%B3%E5%8D%97%E5%AE%97%E6%95%99%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86%E7%AB%9E%E8%B5%9B\">点这里直接拿脚本</a></p>\n<h3 id=\"关于这份脚本\"><a href=\"#关于这份脚本\" class=\"headerlink\" title=\"关于这份脚本\"></a>关于这份脚本</h3><p>该脚本目前没法完成完美答题，因为题库歪了。。。（可以看看下面的方法<br>题库文件是data.js，其他答题逻辑没有问题。<br>如果各位有能力可以自己fork后更改题库文件<br>每一年题库id都会变，但是每年id目前来看肯定是唯一的，当然不清楚后面会不会出现更多的NT  </p>\n<hr>\n<h3 id=\"关于另外一种方法\"><a href=\"#关于另外一种方法\" class=\"headerlink\" title=\"关于另外一种方法\"></a>关于另外一种方法</h3><p>——我为什么放弃了脚本（雾<br>作者：@TherHello:<a href=\"https://www.therehello.top/\">https://www.therehello.top/</a> &amp; @探姬<br>不许拿去商用赚钱！！！！！！！  </p>\n<h4 id=\"页面的提交过程分析如下：\"><a href=\"#页面的提交过程分析如下：\" class=\"headerlink\" title=\"页面的提交过程分析如下：\"></a>页面的提交过程分析如下：</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">程序调用 autoSubmit()  <br>然后该调用getExamAnswerFn()这个函数，从开始遍历读取你的答案，如果有没有答的题则alert  <br>一切无误后被封装在 result_content 中  <br>其格式如下：  <br><br>&#x27;[&#123;&quot;orderindex&quot;:&quot;1&quot;,&quot;topicid&quot;:&quot;1000042&quot;,&quot;result&quot;:&quot;D&quot;&#125;,&#123;&quot;orderindex&quot;:&quot;2&quot;,&quot;topicid&quot;:&quot;1000038&quot;,&quot;result&quot;:&quot;A&quot;&#125;,&#123;&quot;orderindex&quot;:&quot;3&quot;,&quot;topicid&quot;:&quot;1000006&quot;,&quot;result&quot;:&quot;A&quot;&#125;,&#123;&quot;orderindex&quot;:&quot;4&quot;,&quot;topicid&quot;:&quot;1000115&quot;,&quot;result&quot;:&quot;A&quot;&#125;,&#123;&quot;orderindex&quot;:&quot;5&quot;,&quot;topicid&quot;:&quot;1000142&quot;,&quot;result&quot;:&quot;D&quot;&#125;,&#123;&quot;orderindex&quot;:&quot;6&quot;,&quot;topicid&quot;:&quot;1000011&quot;,&quot;result&quot;:&quot;A&quot;&#125;,&#123;&quot;orderindex&quot;:&quot;7&quot;,&quot;topicid&quot;:&quot;1000145&quot;,&quot;result&quot;:&quot;D&quot;&#125;,&#123;&quot;orderindex&quot;:&quot;8&quot;,&quot;topicid&quot;:&quot;1000105&quot;,&quot;result&quot;:&quot;D&quot;&#125;,&#123;&quot;orderindex&quot;:&quot;9&quot;,&quot;topicid&quot;:&quot;1000139&quot;,&quot;result&quot;:&quot;C&quot;&#125;,&#123;&quot;orderindex&quot;:&quot;10&quot;,&quot;topicid&quot;:&quot;1000096&quot;,&quot;result&quot;:&quot;D&quot;&#125;,&#123;&quot;orderindex&quot;:&quot;11&quot;,&quot;topicid&quot;:&quot;1000116&quot;,&quot;result&quot;:&quot;A&quot;&#125;,&#123;&quot;orderindex&quot;:&quot;12&quot;,&quot;topicid&quot;:&quot;10<br>....<br>//多选题的样例:  <br>&#123;&quot;orderindex&quot;:&quot;54&quot;,&quot;topicid&quot;:&quot;1000288&quot;,&quot;result&quot;:&quot;A,B,D&quot;&#125;  <br><br>再通过var params=&#123;paperid:paperid,csmpagerid:csmpagerid,starttime:starttime,result_content:result_content,memberusercode:memberusercode,memberschoolid:memberschoolid,membernickname:membernickname,ssm:getSSM()&#125;构造头信息<br>最后通过<br>$.post(url,params,function(responseText)&#123;<br>    ...<br>&#125;<br>进行提交，<br>所以只需要替换掉 result_content 即可。<br></code></pre></td></tr></table></figure>\n\n<p>所以：大致思路，替换提交的时候的题目数据，直接提交一份95分的题目表单。</p>\n<h4 id=\"过程如下：\"><a href=\"#过程如下：\" class=\"headerlink\" title=\"过程如下：\"></a>过程如下：</h4><p>1.爬取页面，获得题目ID和题目在本地完成，确保能到95分，再格式化数据，替换提交数据即可。<br>数据已经为你准备好了(2021):<br><strong>2021_data.json_95分：(复制它，别换行！)</strong>    </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#x27;[&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;1&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000042&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;2&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000038&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;3&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000006&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;4&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000115&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;5&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000142&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;6&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000011&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;7&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000145&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;8&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000105&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;9&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000139&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;10&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000096&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;11&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000116&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;12&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000101&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;13&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000047&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;14&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000039&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;15&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000090&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;16&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000023&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;17&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000120&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;18&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000118&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;19&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000053&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;20&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000084&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;21&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000159&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;22&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000095&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;23&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000085&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;24&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000079&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;25&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000097&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;26&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000044&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;27&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000014&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;28&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000036&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;29&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000160&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;30&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000086&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;31&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000092&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;32&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000156&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;33&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000109&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;34&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000077&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;35&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000157&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;36&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000007&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;37&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000058&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;38&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000102&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;39&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000049&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;40&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000099&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;41&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000113&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;42&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000153&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;43&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000117&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;44&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000155&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;45&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000161&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;46&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000123&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;47&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000013&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;48&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000080&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;49&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000111&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;50&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000005&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;51&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000204&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;52&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000298&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;53&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000289&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;54&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000288&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;55&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000219&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;56&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000212&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;57&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000209&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;58&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000216&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;59&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000207&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;60&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000221&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;61&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000294&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;62&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000198&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;63&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000213&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;64&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000283&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;65&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000163&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;66&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000211&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;67&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000194&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;68&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000187&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;69&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000224&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;70&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000205&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;71&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000165&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;72&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000192&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;73&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000188&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;74&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000182&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;75&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000183&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;76&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000175&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;77&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000286&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B,C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;78&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000199&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;79&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000284&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;80&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000181&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;81&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000256&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;82&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000240&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;83&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000232&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;84&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000260&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;85&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000234&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;86&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000266&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;87&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000244&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;88&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000299&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;89&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000270&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;90&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000251&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;91&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000300&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;92&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000273&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;93&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000245&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;94&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000255&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;95&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000262&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;96&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000254&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;97&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000268&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;98&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000248&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;99&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000243&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;100&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000249&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;]&#x27;<br></code></pre></td></tr></table></figure>\n<p><strong>100分表头</strong>  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#x27;[&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;1&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000216&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;2&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000067&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;3&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000109&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;4&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000134&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;5&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000005&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;6&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000007&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;7&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000090&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;8&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000119&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;9&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000213&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;10&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000125&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;11&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000234&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;12&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000179&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;13&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000243&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;14&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000197&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;15&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000224&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;16&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000047&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;17&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000096&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;18&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000106&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;19&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000155&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;20&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000017&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;21&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000154&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;22&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000020&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;23&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000173&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;24&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000168&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;25&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000249&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;26&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000001&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;27&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000140&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;28&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000264&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;29&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000027&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;30&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000068&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;31&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000147&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;32&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000195&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;33&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000286&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B,C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;34&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000229&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;35&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000143&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;36&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000118&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;37&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000019&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;38&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000057&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;39&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000176&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;40&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000267&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;41&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000123&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;42&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000269&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;43&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000203&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;44&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000107&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;45&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000220&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B,C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;46&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000295&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;47&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000250&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;48&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000112&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;49&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000150&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;50&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000158&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;51&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000284&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;52&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000039&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;53&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000094&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;54&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000079&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;55&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000261&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;56&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000159&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;57&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000219&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;58&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000012&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;59&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000258&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;60&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000161&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;61&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000127&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;62&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000288&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;63&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000008&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;64&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000232&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;65&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000103&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;66&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000300&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;67&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000087&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;68&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000270&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;69&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000210&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B,C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;70&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000231&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;71&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000209&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;72&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000137&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;73&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000124&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;74&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000233&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;75&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000285&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;76&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000100&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;77&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000225&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;78&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000251&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;79&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000199&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;80&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000297&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;81&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000245&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;82&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000289&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;83&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000095&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;84&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000247&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;85&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000222&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;86&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000075&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;87&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000133&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;88&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000115&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;89&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000042&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;90&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000282&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;91&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000205&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;92&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000099&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;93&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000274&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;94&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000170&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;95&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000002&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;96&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000171&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;97&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000084&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;98&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000181&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;99&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000268&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;100&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000283&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C&quot;</span>&#125;]&#x27;<br></code></pre></td></tr></table></figure>\n<p>2.更改JS文件，绕过答题检测机制  </p>\n<p>按下F12，进入控制台，选中 源代码/Sources/资源 标签<br>找到 examination.js 文件<br><img src=\"https://user-images.githubusercontent.com/41804496/142233436-5e442527-9c4a-43c7-accf-4232c41231b5.png\" alt=\"image\"><br>在里面搜索 autoSubmit(),找到 function autoSubmit()函数，将：<br>var result_content=getExamAnswerFn();<br><img src=\"https://user-images.githubusercontent.com/41804496/142237598-52f599e9-5d5a-49bd-a0b4-09766e86a79d.png\" alt=\"image\"></p>\n<p>中的getExamAnswerFn()替换为2021_data.json中的数据，注意，一定不要换行！<br><img src=\"https://user-images.githubusercontent.com/41804496/142237763-1a696d7a-4ddc-44b2-bb40-daaf3feac1d8.png\" alt=\"image\"></p>\n<p>按下 Ctrl + s 保存（如果出现黄色小三角，提示没被保存，那么继续往下看）  </p>\n<p>3.更改时间数据，提交<br>在控制台中设置 starttime ,让他与你现在的时间相差 15min以上。<br>确认一切无误后，键入<br> autoSubmit()<br> 完成提交。 </p>\n<p>（小三角的解决方法）由于安全性阻止，你的修改不一定会凑效，这个时候需要在工作区打开一个本地文件夹来使用本地替换。 </p>\n<p><img src=\"https://user-images.githubusercontent.com/41804496/142235584-28ae0b2c-7087-48da-b7d1-4b2b1c082d4d.png\" alt=\"image\">  </p>\n<p>（可以参考这个文章：<a href=\"https://blog.csdn.net/fjh1997/article/details/107588701\">https://blog.csdn.net/fjh1997/article/details/107588701</a></p>\n<p>完成保存回到上面继续操作即可。  </p>\n<hr>\n<h3 id=\"时间魔法\"><a href=\"#时间魔法\" class=\"headerlink\" title=\"时间魔法\"></a>时间魔法</h3><p>用控制台延迟时间，F12后进入控制台，控制台中输入min = 40，可重置倒计时，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">min = xx<br></code></pre></td></tr></table></figure>\n\n<p>min只是用来控制autoSubmit()函数，min&lt;=0时会执行自动提交</p>\n<p>而要注意的是，提交的时候使用的 “starttime” 来校验是否过短或者超时答题，请确保提交的时候，starttime 和现在的时间差大于15分钟。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">starttime = &#x27;xxxx-xx-xx xx:xx:xx&#x27;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<p>如果你只是想要截图分数+流水：</p>\n<p>在控制台(console)中键入 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">alert(&quot;xxx的得分为xx分，流水号：xxxxxxxx，提交时间xxxx-xx-xx xx:xx:xx&quot;)<br><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ZZULI-AC-OF-ZSJS\"><a href=\"#ZZULI-AC-OF-ZSJS\" class=\"headerlink\" title=\"ZZULI_AC_OF_ZSJS\"></a>ZZULI_AC_OF_ZSJS</h1><p>河南省大学生中国特色社会主义民族宗教理论知识竞赛<br>（这真实一个让人无比抓狂的比赛呢）<br>文章项目地址：<a href=\"https://github.com/ProbiusOfficial\">https://github.com/ProbiusOfficial</a></p>\n<h2 id=\"看这里\"><a href=\"#看这里\" class=\"headerlink\" title=\"看这里\"></a>看这里</h2><p>题库替换的方法以及有大佬写了油猴脚本里Qwq~<br>感谢@<a href=\"https://github.com/xVue\">https://github.com/xVue</a> 大佬<br>文件为 zj.user.js  各位按需自取鸭~<br>2021/11/19 更新：scriptcat不运行问题，自动提交改为手动提交，分数提至100分，页面优化<br><a href=\"https://greasyfork.org/zh-CN/scripts/435679-%E6%B2%B3%E5%8D%97%E5%AE%97%E6%95%99%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86%E7%AB%9E%E8%B5%9B\">点这里直接拿脚本</a></p>\n<h3 id=\"关于这份脚本\"><a href=\"#关于这份脚本\" class=\"headerlink\" title=\"关于这份脚本\"></a>关于这份脚本</h3><p>该脚本目前没法完成完美答题，因为题库歪了。。。（可以看看下面的方法<br>题库文件是data.js，其他答题逻辑没有问题。<br>如果各位有能力可以自己fork后更改题库文件<br>每一年题库id都会变，但是每年id目前来看肯定是唯一的，当然不清楚后面会不会出现更多的NT  </p>\n<hr>\n<h3 id=\"关于另外一种方法\"><a href=\"#关于另外一种方法\" class=\"headerlink\" title=\"关于另外一种方法\"></a>关于另外一种方法</h3><p>——我为什么放弃了脚本（雾<br>作者：@TherHello:<a href=\"https://www.therehello.top/\">https://www.therehello.top/</a> &amp; @探姬<br>不许拿去商用赚钱！！！！！！！  </p>\n<h4 id=\"页面的提交过程分析如下：\"><a href=\"#页面的提交过程分析如下：\" class=\"headerlink\" title=\"页面的提交过程分析如下：\"></a>页面的提交过程分析如下：</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">程序调用 autoSubmit()  <br>然后该调用getExamAnswerFn()这个函数，从开始遍历读取你的答案，如果有没有答的题则alert  <br>一切无误后被封装在 result_content 中  <br>其格式如下：  <br><br>&#x27;[&#123;&quot;orderindex&quot;:&quot;1&quot;,&quot;topicid&quot;:&quot;1000042&quot;,&quot;result&quot;:&quot;D&quot;&#125;,&#123;&quot;orderindex&quot;:&quot;2&quot;,&quot;topicid&quot;:&quot;1000038&quot;,&quot;result&quot;:&quot;A&quot;&#125;,&#123;&quot;orderindex&quot;:&quot;3&quot;,&quot;topicid&quot;:&quot;1000006&quot;,&quot;result&quot;:&quot;A&quot;&#125;,&#123;&quot;orderindex&quot;:&quot;4&quot;,&quot;topicid&quot;:&quot;1000115&quot;,&quot;result&quot;:&quot;A&quot;&#125;,&#123;&quot;orderindex&quot;:&quot;5&quot;,&quot;topicid&quot;:&quot;1000142&quot;,&quot;result&quot;:&quot;D&quot;&#125;,&#123;&quot;orderindex&quot;:&quot;6&quot;,&quot;topicid&quot;:&quot;1000011&quot;,&quot;result&quot;:&quot;A&quot;&#125;,&#123;&quot;orderindex&quot;:&quot;7&quot;,&quot;topicid&quot;:&quot;1000145&quot;,&quot;result&quot;:&quot;D&quot;&#125;,&#123;&quot;orderindex&quot;:&quot;8&quot;,&quot;topicid&quot;:&quot;1000105&quot;,&quot;result&quot;:&quot;D&quot;&#125;,&#123;&quot;orderindex&quot;:&quot;9&quot;,&quot;topicid&quot;:&quot;1000139&quot;,&quot;result&quot;:&quot;C&quot;&#125;,&#123;&quot;orderindex&quot;:&quot;10&quot;,&quot;topicid&quot;:&quot;1000096&quot;,&quot;result&quot;:&quot;D&quot;&#125;,&#123;&quot;orderindex&quot;:&quot;11&quot;,&quot;topicid&quot;:&quot;1000116&quot;,&quot;result&quot;:&quot;A&quot;&#125;,&#123;&quot;orderindex&quot;:&quot;12&quot;,&quot;topicid&quot;:&quot;10<br>....<br>//多选题的样例:  <br>&#123;&quot;orderindex&quot;:&quot;54&quot;,&quot;topicid&quot;:&quot;1000288&quot;,&quot;result&quot;:&quot;A,B,D&quot;&#125;  <br><br>再通过var params=&#123;paperid:paperid,csmpagerid:csmpagerid,starttime:starttime,result_content:result_content,memberusercode:memberusercode,memberschoolid:memberschoolid,membernickname:membernickname,ssm:getSSM()&#125;构造头信息<br>最后通过<br>$.post(url,params,function(responseText)&#123;<br>    ...<br>&#125;<br>进行提交，<br>所以只需要替换掉 result_content 即可。<br></code></pre></td></tr></table></figure>\n\n<p>所以：大致思路，替换提交的时候的题目数据，直接提交一份95分的题目表单。</p>\n<h4 id=\"过程如下：\"><a href=\"#过程如下：\" class=\"headerlink\" title=\"过程如下：\"></a>过程如下：</h4><p>1.爬取页面，获得题目ID和题目在本地完成，确保能到95分，再格式化数据，替换提交数据即可。<br>数据已经为你准备好了(2021):<br><strong>2021_data.json_95分：(复制它，别换行！)</strong>    </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#x27;[&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;1&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000042&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;2&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000038&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;3&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000006&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;4&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000115&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;5&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000142&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;6&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000011&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;7&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000145&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;8&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000105&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;9&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000139&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;10&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000096&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;11&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000116&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;12&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000101&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;13&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000047&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;14&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000039&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;15&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000090&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;16&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000023&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;17&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000120&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;18&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000118&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;19&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000053&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;20&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000084&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;21&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000159&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;22&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000095&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;23&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000085&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;24&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000079&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;25&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000097&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;26&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000044&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;27&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000014&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;28&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000036&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;29&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000160&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;30&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000086&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;31&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000092&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;32&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000156&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;33&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000109&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;34&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000077&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;35&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000157&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;36&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000007&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;37&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000058&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;38&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000102&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;39&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000049&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;40&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000099&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;41&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000113&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;42&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000153&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;43&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000117&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;44&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000155&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;45&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000161&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;46&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000123&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;47&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000013&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;48&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000080&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;49&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000111&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;50&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000005&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;51&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000204&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;52&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000298&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;53&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000289&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;54&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000288&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;55&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000219&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;56&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000212&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;57&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000209&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;58&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000216&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;59&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000207&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;60&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000221&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;61&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000294&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;62&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000198&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;63&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000213&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;64&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000283&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;65&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000163&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;66&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000211&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;67&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000194&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;68&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000187&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;69&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000224&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;70&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000205&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;71&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000165&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;72&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000192&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;73&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000188&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;74&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000182&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;75&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000183&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;76&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000175&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;77&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000286&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B,C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;78&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000199&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;79&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000284&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;80&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000181&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;81&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000256&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;82&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000240&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;83&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000232&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;84&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000260&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;85&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000234&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;86&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000266&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;87&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000244&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;88&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000299&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;89&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000270&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;90&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000251&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;91&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000300&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;92&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000273&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;93&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000245&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;94&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000255&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;95&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000262&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;96&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000254&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;97&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000268&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;98&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000248&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;99&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000243&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;100&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000249&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;]&#x27;<br></code></pre></td></tr></table></figure>\n<p><strong>100分表头</strong>  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#x27;[&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;1&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000216&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;2&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000067&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;3&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000109&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;4&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000134&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;5&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000005&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;6&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000007&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;7&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000090&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;8&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000119&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;9&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000213&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;10&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000125&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;11&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000234&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;12&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000179&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;13&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000243&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;14&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000197&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;15&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000224&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;16&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000047&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;17&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000096&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;18&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000106&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;19&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000155&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;20&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000017&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;21&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000154&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;22&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000020&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;23&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000173&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;24&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000168&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;25&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000249&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;26&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000001&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;27&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000140&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;28&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000264&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;29&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000027&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;30&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000068&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;31&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000147&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;32&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000195&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;33&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000286&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B,C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;34&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000229&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;35&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000143&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;36&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000118&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;37&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000019&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;38&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000057&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;39&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000176&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;40&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000267&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;41&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000123&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;42&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000269&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;43&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000203&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;44&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000107&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;45&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000220&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B,C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;46&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000295&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;47&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000250&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;48&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000112&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;49&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000150&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;50&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000158&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;51&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000284&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;52&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000039&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;53&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000094&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;54&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000079&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;55&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000261&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;56&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000159&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;57&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000219&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;58&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000012&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;59&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000258&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;60&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000161&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;61&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000127&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;62&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000288&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;63&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000008&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;64&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000232&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;65&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000103&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;66&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000300&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;67&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000087&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;68&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000270&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;69&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000210&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B,C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;70&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000231&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;71&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000209&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;72&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000137&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;73&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000124&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;74&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000233&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;75&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000285&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;76&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000100&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;C&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;77&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000225&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;78&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000251&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;79&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000199&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;80&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000297&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;81&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000245&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;82&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000289&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;83&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000095&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;84&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000247&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;85&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000222&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;86&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000075&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;87&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000133&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;88&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000115&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;89&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000042&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;90&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000282&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;91&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000205&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;92&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000099&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;93&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000274&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;94&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000170&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;95&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000002&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;96&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000171&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;97&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000084&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;B&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;98&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000181&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C,D&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;99&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000268&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A&quot;</span>&#125;,&#123;<span class=\"hljs-attr\">&quot;orderindex&quot;</span>:<span class=\"hljs-string\">&quot;100&quot;</span>,<span class=\"hljs-attr\">&quot;topicid&quot;</span>:<span class=\"hljs-string\">&quot;1000283&quot;</span>,<span class=\"hljs-attr\">&quot;result&quot;</span>:<span class=\"hljs-string\">&quot;A,B,C&quot;</span>&#125;]&#x27;<br></code></pre></td></tr></table></figure>\n<p>2.更改JS文件，绕过答题检测机制  </p>\n<p>按下F12，进入控制台，选中 源代码/Sources/资源 标签<br>找到 examination.js 文件<br><img src=\"https://user-images.githubusercontent.com/41804496/142233436-5e442527-9c4a-43c7-accf-4232c41231b5.png\" alt=\"image\"><br>在里面搜索 autoSubmit(),找到 function autoSubmit()函数，将：<br>var result_content=getExamAnswerFn();<br><img src=\"https://user-images.githubusercontent.com/41804496/142237598-52f599e9-5d5a-49bd-a0b4-09766e86a79d.png\" alt=\"image\"></p>\n<p>中的getExamAnswerFn()替换为2021_data.json中的数据，注意，一定不要换行！<br><img src=\"https://user-images.githubusercontent.com/41804496/142237763-1a696d7a-4ddc-44b2-bb40-daaf3feac1d8.png\" alt=\"image\"></p>\n<p>按下 Ctrl + s 保存（如果出现黄色小三角，提示没被保存，那么继续往下看）  </p>\n<p>3.更改时间数据，提交<br>在控制台中设置 starttime ,让他与你现在的时间相差 15min以上。<br>确认一切无误后，键入<br> autoSubmit()<br> 完成提交。 </p>\n<p>（小三角的解决方法）由于安全性阻止，你的修改不一定会凑效，这个时候需要在工作区打开一个本地文件夹来使用本地替换。 </p>\n<p><img src=\"https://user-images.githubusercontent.com/41804496/142235584-28ae0b2c-7087-48da-b7d1-4b2b1c082d4d.png\" alt=\"image\">  </p>\n<p>（可以参考这个文章：<a href=\"https://blog.csdn.net/fjh1997/article/details/107588701\">https://blog.csdn.net/fjh1997/article/details/107588701</a></p>\n<p>完成保存回到上面继续操作即可。  </p>\n<hr>\n<h3 id=\"时间魔法\"><a href=\"#时间魔法\" class=\"headerlink\" title=\"时间魔法\"></a>时间魔法</h3><p>用控制台延迟时间，F12后进入控制台，控制台中输入min = 40，可重置倒计时，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">min = xx<br></code></pre></td></tr></table></figure>\n\n<p>min只是用来控制autoSubmit()函数，min&lt;=0时会执行自动提交</p>\n<p>而要注意的是，提交的时候使用的 “starttime” 来校验是否过短或者超时答题，请确保提交的时候，starttime 和现在的时间差大于15分钟。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">starttime = &#x27;xxxx-xx-xx xx:xx:xx&#x27;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<p>如果你只是想要截图分数+流水：</p>\n<p>在控制台(console)中键入 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">alert(&quot;xxx的得分为xx分，流水号：xxxxxxxx，提交时间xxxx-xx-xx xx:xx:xx&quot;)<br><br></code></pre></td></tr></table></figure>\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckxcz8rxu0001f8v07f43278b","category_id":"ckxcz8rxy0004f8v0aiu70hd2","_id":"ckxcz8ry5000ff8v03fkm3gld"},{"post_id":"ckxcz8rxx0003f8v09z3p53xx","category_id":"ckxcz8ry3000bf8v06dqm5zgn","_id":"ckxcz8ry6000jf8v0512zb2tx"},{"post_id":"ckxcz8ry00007f8v0hfglaqbr","category_id":"ckxcz8ry5000gf8v0gktlavrx","_id":"ckxcz8ry7000nf8v0770k7qm1"},{"post_id":"ckxcz8ry20009f8v0b1qadndr","category_id":"ckxcz8ry5000gf8v0gktlavrx","_id":"ckxcz8ry8000rf8v08git3b1j"},{"post_id":"ckxcz8ry3000af8v00h2f5qo5","category_id":"ckxcz8ry5000gf8v0gktlavrx","_id":"ckxcz8ry9000vf8v085ag95d3"},{"post_id":"ckxcz8ry4000ef8v0h2665u5x","category_id":"ckxcz8ry5000gf8v0gktlavrx","_id":"ckxcz8ry9000yf8v03lxt5llf"},{"post_id":"ckxcz8ryf0010f8v09jj8gni4","category_id":"ckxcz8ry5000gf8v0gktlavrx","_id":"ckxcz8ryi0016f8v088b9b86p"},{"post_id":"ckxcz8ryg0013f8v0f2q26b23","category_id":"ckxcz8ry3000bf8v06dqm5zgn","_id":"ckxcz8ryi0017f8v0a8wh85rv"},{"post_id":"ckxcz8ryg0011f8v06nlcd6gk","category_id":"ckxcz8ryh0014f8v0bmpa11of","_id":"ckxcz8ryj001af8v0ew806b2t"}],"PostTag":[{"post_id":"ckxcz8rxu0001f8v07f43278b","tag_id":"ckxcz8rxz0005f8v0a73z9osh","_id":"ckxcz8ry4000df8v0chzx60b3"},{"post_id":"ckxcz8rxx0003f8v09z3p53xx","tag_id":"ckxcz8ry4000cf8v0hai67m8n","_id":"ckxcz8ry6000if8v0f7el1ym2"},{"post_id":"ckxcz8ry00007f8v0hfglaqbr","tag_id":"ckxcz8ry5000hf8v01ou373ip","_id":"ckxcz8ry8000pf8v08z1e5hv3"},{"post_id":"ckxcz8ry00007f8v0hfglaqbr","tag_id":"ckxcz8ry6000lf8v03t3q5ndi","_id":"ckxcz8ry8000sf8v09a11c7m8"},{"post_id":"ckxcz8ry20009f8v0b1qadndr","tag_id":"ckxcz8ry8000of8v0hpk2b8yr","_id":"ckxcz8ry9000uf8v0fj9a8jgs"},{"post_id":"ckxcz8ry3000af8v00h2f5qo5","tag_id":"ckxcz8ry8000of8v0hpk2b8yr","_id":"ckxcz8ry9000xf8v0esi7ezn6"},{"post_id":"ckxcz8ry4000ef8v0h2665u5x","tag_id":"ckxcz8ry8000of8v0hpk2b8yr","_id":"ckxcz8ry9000zf8v03tzh9rgg"},{"post_id":"ckxcz8ryf0010f8v09jj8gni4","tag_id":"ckxcz8ry8000of8v0hpk2b8yr","_id":"ckxcz8ryg0012f8v08yly321p"},{"post_id":"ckxcz8ryg0011f8v06nlcd6gk","tag_id":"ckxcz8ryi0015f8v07h8x7v58","_id":"ckxcz8ryj0019f8v09scj584t"},{"post_id":"ckxcz8ryg0013f8v0f2q26b23","tag_id":"ckxcz8ryi0018f8v0gmeo0mtx","_id":"ckxcz8ryj001bf8v0gv115v1p"}],"Tag":[{"name":"CTF-基础知识","_id":"ckxcz8rxz0005f8v0a73z9osh"},{"name":"Unknown","_id":"ckxcz8ry4000cf8v0hai67m8n"},{"name":"PHP","_id":"ckxcz8ry5000hf8v01ou373ip"},{"name":"language","_id":"ckxcz8ry6000lf8v03t3q5ndi"},{"name":"algorithm","_id":"ckxcz8ry8000of8v0hpk2b8yr"},{"name":"云函数","_id":"ckxcz8ryi0015f8v07h8x7v58"},{"name":"杂项","_id":"ckxcz8ryi0018f8v0gmeo0mtx"}]}}